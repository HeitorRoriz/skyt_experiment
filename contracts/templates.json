{
  "templates": [
    {
      "name": "fibonacci_anchor",
      "prompt": "Write a Python function called fibonacci that takes an integer n and returns the nth Fibonacci number.",
      "expected_function": "fibonacci",
      "oracle": "fibonacci20",
      "description": "Anchor task with oracle for validation"
    },
    {
      "name": "fibonacci_recursive", 
      "prompt": "Write a recursive Python function called fibonacci that takes an integer n and returns the nth Fibonacci number.",
      "expected_function": "fibonacci",
      "oracle": null,
      "description": "Recursive implementation variant"
    },
    {
      "name": "fibonacci_iterative",
      "prompt": "Write an iterative Python function called fibonacci that takes an integer n and returns the nth Fibonacci number using a loop.",
      "expected_function": "fibonacci", 
      "oracle": null,
      "description": "Iterative implementation variant"
    },
    {
      "name": "fibonacci_list",
      "prompt": "Write a Python function called fibonacci that takes an integer n and returns a list of the first n Fibonacci numbers.",
      "expected_function": "fibonacci",
      "oracle": null,
      "description": "List output variant"
    },
    {
      "name": "merge_sort",
      "prompt": "Write a Python function called merge_sort that takes a list of integers and returns a sorted list using the merge sort algorithm.",
      "expected_function": "merge_sort",
      "oracle": null,
      "description": "Merge sort algorithm"
    },
    {
      "name": "binary_search",
      "prompt": "Write a Python function called binary_search that takes a sorted list and a target value, returning the index of the target or -1 if not found.",
      "expected_function": "binary_search", 
      "oracle": null,
      "description": "Binary search algorithm"
    }
  ],
  "oracles": {
    "fibonacci20": {
      "type": "golden_output",
      "description": "Expected output for fibonacci(20)",
      "test_input": 20,
      "expected_output": 6765,
      "validation": "assert fibonacci(20) == 6765"
    }
  },
  "config": {
    "default_runs": 50,
    "default_temperatures": [0.0, 0.3],
    "default_model": "gpt-3.5-turbo",
    "max_tokens": 500
  }
}
