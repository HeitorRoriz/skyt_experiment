{
  "fibonacci_basic": {
    "id": "fibonacci_basic",
    "task_intent": "Generate nth Fibonacci number using iteration",
    "prompt": "Write a Python function called 'fibonacci' that takes an integer n and returns the nth Fibonacci number. Use iteration, not recursion.",
    "description": "Basic iterative Fibonacci implementation",
    "algorithm_family": "fibonacci",
    "constraints": {
      "function_name": "fibonacci",
      "requires_recursion": false,
      "implementation_style": "iterative"
    },
    "oracle_requirements": {
      "test_cases": [
        {"input": 0, "expected": 0, "description": "Base case F(0)"},
        {"input": 1, "expected": 1, "description": "Base case F(1)"},
        {"input": 5, "expected": 5, "description": "F(5)"},
        {"input": 10, "expected": 55, "description": "F(10)"}
      ],
      "correctness_threshold": 1.0,
      "required_pass_rate": 0.8
    },
    "normalization_rules": {
      "remove_comments": true,
      "normalize_whitespace": true,
      "enforce_function_name": true
    },
    "rescue_bounds": {
      "allow_function_rename": true,
      "allow_print_removal": true,
      "max_transformations": 5
    }
  },
  "fibonacci_recursive": {
    "id": "fibonacci_recursive",
    "task_intent": "Generate nth Fibonacci number using recursion",
    "prompt": "Write a Python function called 'fibonacci' that takes an integer n and returns the nth Fibonacci number. Use recursion.",
    "description": "Recursive Fibonacci implementation",
    "algorithm_family": "fibonacci",
    "constraints": {
      "function_name": "fibonacci",
      "requires_recursion": true,
      "implementation_style": "recursive"
    },
    "oracle_requirements": {
      "test_cases": [
        {"input": 0, "expected": 0, "description": "Base case F(0)"},
        {"input": 1, "expected": 1, "description": "Base case F(1)"},
        {"input": 5, "expected": 5, "description": "F(5)"},
        {"input": 8, "expected": 21, "description": "F(8)"}
      ],
      "correctness_threshold": 1.0,
      "required_pass_rate": 0.8
    },
    "normalization_rules": {
      "remove_comments": true,
      "normalize_whitespace": true,
      "enforce_function_name": true
    }
  },
  "fibonacci_list": {
    "id": "fibonacci_list",
    "task_intent": "Generate list of first n Fibonacci numbers",
    "prompt": "Write a Python function called 'fibonacci' that takes an integer n and returns a list of the first n Fibonacci numbers.",
    "description": "Fibonacci sequence as list output",
    "algorithm_family": "fibonacci",
    "constraints": {
      "function_name": "fibonacci",
      "output_type": "list"
    },
    "oracle_requirements": {
      "test_cases": [
        {"input": 0, "expected": [], "description": "Empty sequence"},
        {"input": 1, "expected": [0], "description": "Single element"},
        {"input": 5, "expected": [0, 1, 1, 2, 3], "description": "First 5 numbers"}
      ],
      "correctness_threshold": 1.0,
      "required_pass_rate": 0.8
    }
  },
  "merge_sort": {
    "id": "merge_sort",
    "task_intent": "Sort array using merge sort algorithm",
    "prompt": "Write a Python function called 'merge_sort' that takes a list of integers and returns a sorted list using the merge sort algorithm.",
    "description": "Merge sort implementation",
    "algorithm_family": "merge_sort",
    "constraints": {
      "function_name": "merge_sort",
      "algorithm": "merge_sort"
    },
    "oracle_requirements": {
      "test_cases": [
        {"input": [], "expected": [], "description": "Empty array"},
        {"input": [1], "expected": [1], "description": "Single element"},
        {"input": [3, 1, 4, 1, 5], "expected": [1, 1, 3, 4, 5], "description": "Random array"},
        {"input": [5, 4, 3, 2, 1], "expected": [1, 2, 3, 4, 5], "description": "Reverse sorted"}
      ],
      "correctness_threshold": 1.0,
      "required_pass_rate": 0.8
    }
  },
  "binary_search": {
    "id": "binary_search",
    "task_intent": "Search for element in sorted array using binary search",
    "prompt": "Write a Python function called 'binary_search' that takes a sorted list and a target value, returning the index of the target or -1 if not found.",
    "description": "Binary search implementation",
    "algorithm_family": "binary_search",
    "constraints": {
      "function_name": "binary_search",
      "algorithm": "binary_search"
    },
    "oracle_requirements": {
      "test_cases": [
        {"array": [1, 2, 3, 4, 5], "target": 3, "expected": 2, "description": "Element found"},
        {"array": [1, 2, 3, 4, 5], "target": 6, "expected": -1, "description": "Element not found"},
        {"array": [], "target": 1, "expected": -1, "description": "Empty array"}
      ],
      "correctness_threshold": 1.0,
      "required_pass_rate": 0.8
    }
  }
}
