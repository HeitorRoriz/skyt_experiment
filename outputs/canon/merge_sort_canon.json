{
  "contract_id": "merge_sort",
  "canonical_code": "def merge_sort(arr):\n    if len(arr) <= 1:\n        return arr\n    \n    mid = len(arr) // 2\n    left = merge_sort(arr[:mid])\n    right = merge_sort(arr[mid:])\n    \n    return merge(left, right)\n\ndef merge(left, right):\n    result = []\n    i = j = 0\n    \n    while i < len(left) and j < len(right):\n        if left[i] <= right[j]:\n            result.append(left[i])\n            i += 1\n        else:\n            result.append(right[j])\n            j += 1\n    \n    result.extend(left[i:])\n    result.extend(right[j:])\n    \n    return result\n",
  "foundational_properties": {
    "control_flow_signature": {
      "if_statements": 2,
      "for_loops": 0,
      "while_loops": 1,
      "function_calls": [
        "len",
        "len",
        "merge_sort",
        "merge_sort",
        "merge",
        "len",
        "len"
      ],
      "nested_depth": 2,
      "branch_patterns": [
        "if_at_depth_0",
        "if_at_depth_1"
      ]
    },
    "data_dependency_graph": {
      "dependencies": {
        "mid": [
          "arr"
        ],
        "left": [],
        "right": [],
        "result": [],
        "i": [],
        "j": []
      },
      "assignments": {
        "mid": "BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='arr', ctx=Load())]), op=FloorDiv(), right=Constant(value=2))",
        "left": "Call(func=Name(id='merge_sort', ctx=Load()), args=[Subscript(value=Name(id='arr', ctx=Load()), slice=Slice(upper=Name(id='mid', ctx=Load())), ctx=Load())])",
        "right": "Call(func=Name(id='merge_sort', ctx=Load()), args=[Subscript(value=Name(id='arr', ctx=Load()), slice=Slice(lower=Name(id='mid', ctx=Load())), ctx=Load())])",
        "result": "List(ctx=Load())",
        "i": "Constant(value=0)",
        "j": "Constant(value=0)"
      }
    },
    "execution_paths": {
      "execution_paths": [
        [
          "function_merge_sort"
        ],
        [
          "function_merge_sort",
          "branch"
        ],
        [
          "function_merge"
        ],
        [
          "function_merge",
          "branch"
        ]
      ]
    },
    "function_contracts": {
      "merge_sort": {
        "name": "merge_sort",
        "args": [
          "arr"
        ],
        "returns": null,
        "has_return": true
      },
      "merge": {
        "name": "merge",
        "args": [
          "left",
          "right"
        ],
        "returns": null,
        "has_return": true
      }
    },
    "complexity_class": {
      "nested_loops": 1,
      "recursive_calls": 2,
      "estimated_complexity": "O(2^n)"
    },
    "side_effect_profile": {
      "has_print": false,
      "has_global_access": false,
      "has_file_io": false,
      "modifies_arguments": false,
      "is_pure": true
    },
    "termination_properties": {
      "has_base_case": true,
      "has_bounded_loops": false,
      "recursive_depth": 0
    },
    "algebraic_structure": {
      "commutative_ops": [],
      "associative_ops": [],
      "binary_operations": [
        "FloorDiv"
      ]
    },
    "numerical_behavior": {
      "uses_integers": true,
      "uses_floats": false,
      "has_arithmetic": true,
      "numeric_constants": [
        1,
        2,
        0,
        1,
        1
      ]
    },
    "logical_equivalence": {
      "boolean_ops": [
        "And"
      ],
      "comparisons": [
        "LtE",
        "Lt",
        "Lt",
        "LtE"
      ],
      "logical_patterns": []
    },
    "normalized_ast_structure": {
      "node_types": [
        "Module",
        "FunctionDef",
        "arguments",
        "arg",
        "If",
        "Compare",
        "Call",
        "Name",
        "Load",
        "Name",
        "Load",
        "LtE",
        "Constant",
        "Return",
        "Name",
        "Load",
        "Assign",
        "Name",
        "Store",
        "BinOp",
        "Call",
        "Name",
        "Load",
        "Name",
        "Load",
        "FloorDiv",
        "Constant",
        "Assign",
        "Name",
        "Store",
        "Call",
        "Name",
        "Load",
        "Subscript",
        "Name",
        "Load",
        "Slice",
        "Name",
        "Load",
        "Load",
        "Assign",
        "Name",
        "Store",
        "Call",
        "Name",
        "Load",
        "Subscript",
        "Name",
        "Load",
        "Slice",
        "Name",
        "Load",
        "Load",
        "Return",
        "Call",
        "Name",
        "Load",
        "Name",
        "Load",
        "Name",
        "Load",
        "FunctionDef",
        "arguments",
        "arg",
        "arg",
        "Assign",
        "Name",
        "Store",
        "List",
        "Load",
        "Assign",
        "Name",
        "Store",
        "Name",
        "Store",
        "Constant",
        "While",
        "BoolOp",
        "And",
        "Compare",
        "Name",
        "Load",
        "Lt",
        "Call",
        "Name",
        "Load",
        "Name",
        "Load",
        "Compare",
        "Name",
        "Load",
        "Lt",
        "Call",
        "Name",
        "Load",
        "Name",
        "Load",
        "If",
        "Compare",
        "Subscript",
        "Name",
        "Load",
        "Name",
        "Load",
        "Load",
        "LtE",
        "Subscript",
        "Name",
        "Load",
        "Name",
        "Load",
        "Load",
        "Expr",
        "Call",
        "Attribute",
        "Name",
        "Load",
        "Load",
        "Subscript",
        "Name",
        "Load",
        "Name",
        "Load",
        "Load",
        "AugAssign",
        "Name",
        "Store",
        "Add",
        "Constant",
        "Expr",
        "Call",
        "Attribute",
        "Name",
        "Load",
        "Load",
        "Subscript",
        "Name",
        "Load",
        "Name",
        "Load",
        "Load",
        "AugAssign",
        "Name",
        "Store",
        "Add",
        "Constant",
        "Expr",
        "Call",
        "Attribute",
        "Name",
        "Load",
        "Load",
        "Subscript",
        "Name",
        "Load",
        "Slice",
        "Name",
        "Load",
        "Load",
        "Expr",
        "Call",
        "Attribute",
        "Name",
        "Load",
        "Load",
        "Subscript",
        "Name",
        "Load",
        "Slice",
        "Name",
        "Load",
        "Load",
        "Return",
        "Name",
        "Load"
      ],
      "ast_depth": 8,
      "ast_hash": "c4ad141d4026c0d9dd334ac60127f891",
      "alpha_renamed_hash": "a30037c751e27acc64bcfc5d0a7d9b26"
    },
    "operator_precedence": {
      "operator_sequence": [
        "FloorDiv"
      ],
      "precedence_levels": {
        "FloorDiv": 4
      }
    },
    "statement_ordering": {
      "statement_types": [
        "FunctionDef",
        "If",
        "Return",
        "Assign",
        "Assign",
        "Assign",
        "Return",
        "FunctionDef",
        "Assign",
        "Assign",
        "While",
        "If",
        "Expr",
        "AugAssign",
        "Expr",
        "AugAssign",
        "Expr",
        "Expr",
        "Return"
      ],
      "statement_sequence": [
        "FunctionDef_0",
        "If_1",
        "Return_2",
        "Assign_3",
        "Assign_4",
        "Assign_5",
        "Return_6",
        "FunctionDef_7",
        "Assign_8",
        "Assign_9",
        "While_10",
        "If_11",
        "Expr_12",
        "AugAssign_13",
        "Expr_14",
        "AugAssign_15",
        "Expr_16",
        "Expr_17",
        "Return_18"
      ],
      "control_flow_order": [
        "FunctionDef",
        "If",
        "FunctionDef",
        "While",
        "If"
      ]
    },
    "behavioral_signature": {
      "can_execute": true,
      "io_signature_hash": "ca377392ba27f5bdaf360e84f2bd61ab",
      "side_effects_detected": [],
      "test_results": [
        [
          0,
          "Exception:TypeError",
          false
        ],
        [
          1,
          "Exception:TypeError",
          false
        ],
        [
          2,
          "Exception:TypeError",
          false
        ]
      ]
    },
    "recursion_schema": {
      "is_recursive": true,
      "base_cases": [
        {
          "condition": "len(arr) <= 1",
          "return_type": "expression"
        }
      ],
      "recursive_calls": [
        {
          "num_args": 1,
          "arg_patterns": [
            "Subscript"
          ]
        },
        {
          "num_args": 1,
          "arg_patterns": [
            "Subscript"
          ]
        }
      ],
      "recursion_pattern": "divide_and_conquer",
      "termination_guards": [
        "len(arr) <= 1"
      ]
    }
  },
  "created_timestamp": "2025-09-29T14:47:00",
  "canon_version": "1.0",
  "oracle_validated": true,
  "oracle_pass_rate": 1.0,
  "source": "curated_golden_implementation"
}