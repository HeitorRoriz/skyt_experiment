{
  "contract_id": "binary_search",
  "canonical_code": "def binary_search(arr, target):\n    left = 0\n    right = len(arr) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return -1\n",
  "foundational_properties": {
    "control_flow_signature": {
      "if_statements": 2,
      "for_loops": 0,
      "while_loops": 1,
      "function_calls": [
        "len"
      ],
      "nested_depth": 3,
      "branch_patterns": [
        "if_at_depth_1",
        "if_at_depth_2"
      ]
    },
    "data_dependency_graph": {
      "dependencies": {
        "left": [
          "mid"
        ],
        "right": [
          "arr",
          "mid"
        ],
        "mid": [
          "left",
          "right"
        ]
      },
      "assignments": {
        "left": "BinOp(left=Name(id='mid', ctx=Load()), op=Add(), right=Constant(value=1))",
        "right": "BinOp(left=Name(id='mid', ctx=Load()), op=Sub(), right=Constant(value=1))",
        "mid": "BinOp(left=BinOp(left=Name(id='left', ctx=Load()), op=Add(), right=Name(id='right', ctx=Load())), op=FloorDiv(), right=Constant(value=2))"
      }
    },
    "execution_paths": {
      "execution_paths": [
        [
          "function_binary_search"
        ],
        [
          "function_binary_search",
          "branch"
        ],
        [
          "function_binary_search",
          "branch",
          "branch"
        ]
      ]
    },
    "function_contracts": {
      "binary_search": {
        "name": "binary_search",
        "args": [
          "arr",
          "target"
        ],
        "returns": null,
        "has_return": true
      }
    },
    "complexity_class": {
      "nested_loops": 1,
      "recursive_calls": 0,
      "estimated_complexity": "O(n)"
    },
    "side_effect_profile": {
      "has_print": false,
      "has_global_access": false,
      "has_file_io": false,
      "modifies_arguments": false,
      "is_pure": true
    },
    "termination_properties": {
      "has_base_case": true,
      "has_bounded_loops": false,
      "recursive_depth": 0
    },
    "algebraic_structure": {
      "commutative_ops": [
        "Add",
        "Add"
      ],
      "associative_ops": [
        "Add",
        "Add"
      ],
      "binary_operations": [
        "Sub",
        "FloorDiv",
        "Add",
        "Add",
        "Sub"
      ]
    },
    "numerical_behavior": {
      "uses_integers": true,
      "uses_floats": false,
      "has_arithmetic": true,
      "numeric_constants": [
        0,
        1,
        2,
        1,
        1,
        1
      ]
    },
    "logical_equivalence": {
      "boolean_ops": [],
      "comparisons": [
        "LtE",
        "Eq",
        "Lt"
      ],
      "logical_patterns": []
    },
    "normalized_ast_structure": {
      "node_types": [
        "Module",
        "FunctionDef",
        "arguments",
        "arg",
        "arg",
        "Assign",
        "Name",
        "Store",
        "Constant",
        "Assign",
        "Name",
        "Store",
        "BinOp",
        "Call",
        "Name",
        "Load",
        "Name",
        "Load",
        "Sub",
        "Constant",
        "While",
        "Compare",
        "Name",
        "Load",
        "LtE",
        "Name",
        "Load",
        "Assign",
        "Name",
        "Store",
        "BinOp",
        "BinOp",
        "Name",
        "Load",
        "Add",
        "Name",
        "Load",
        "FloorDiv",
        "Constant",
        "If",
        "Compare",
        "Subscript",
        "Name",
        "Load",
        "Name",
        "Load",
        "Load",
        "Eq",
        "Name",
        "Load",
        "Return",
        "Name",
        "Load",
        "If",
        "Compare",
        "Subscript",
        "Name",
        "Load",
        "Name",
        "Load",
        "Load",
        "Lt",
        "Name",
        "Load",
        "Assign",
        "Name",
        "Store",
        "BinOp",
        "Name",
        "Load",
        "Add",
        "Constant",
        "Assign",
        "Name",
        "Store",
        "BinOp",
        "Name",
        "Load",
        "Sub",
        "Constant",
        "Return",
        "UnaryOp",
        "USub",
        "Constant"
      ],
      "ast_depth": 8,
      "ast_hash": "74d7431d211e2ac08525765a230321bd",
      "alpha_renamed_hash": "336455f44d34c8072900173b6cbdbc26"
    },
    "operator_precedence": {
      "operator_sequence": [
        "Sub",
        "FloorDiv",
        "Add",
        "Add",
        "Sub"
      ],
      "precedence_levels": {
        "Sub": 3,
        "FloorDiv": 4,
        "Add": 3
      }
    },
    "statement_ordering": {
      "statement_types": [
        "FunctionDef",
        "Assign",
        "Assign",
        "While",
        "Assign",
        "If",
        "Return",
        "If",
        "Assign",
        "Assign",
        "Return"
      ],
      "statement_sequence": [
        "FunctionDef_0",
        "Assign_1",
        "Assign_2",
        "While_3",
        "Assign_4",
        "If_5",
        "Return_6",
        "If_7",
        "Assign_8",
        "Assign_9",
        "Return_10"
      ],
      "control_flow_order": [
        "FunctionDef",
        "While",
        "If",
        "If"
      ]
    },
    "behavioral_signature": {
      "can_execute": true,
      "io_signature_hash": "ca377392ba27f5bdaf360e84f2bd61ab",
      "side_effects_detected": [],
      "test_results": [
        [
          0,
          "Exception:TypeError",
          false
        ],
        [
          1,
          "Exception:TypeError",
          false
        ],
        [
          2,
          "Exception:TypeError",
          false
        ]
      ]
    },
    "recursion_schema": {
      "is_recursive": false,
      "base_cases": [],
      "recursive_calls": [],
      "recursion_pattern": null,
      "termination_guards": []
    }
  },
  "created_timestamp": "2025-09-29T16:54:00",
  "canon_version": "1.0",
  "oracle_validated": true,
  "oracle_pass_rate": 1.0,
  "source": "curated_golden_implementation"
}