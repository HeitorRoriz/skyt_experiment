{
  "contract_id": "fibonacci_basic",
  "canonical_code": "def fibonacci(n):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b",
  "foundational_properties": {
    "control_flow_signature": {
      "if_statements": 2,
      "for_loops": 1,
      "while_loops": 0,
      "function_calls": [
        "range"
      ],
      "nested_depth": 2,
      "branch_patterns": [
        "if_at_depth_0",
        "if_at_depth_1"
      ]
    },
    "data_dependency_graph": {
      "dependencies": {},
      "assignments": {}
    },
    "execution_paths": {
      "execution_paths": [
        [
          "function_fibonacci"
        ],
        [
          "function_fibonacci",
          "branch"
        ],
        [
          "function_fibonacci",
          "branch",
          "branch"
        ],
        [
          "function_fibonacci",
          "loop"
        ]
      ]
    },
    "function_contracts": {
      "fibonacci": {
        "name": "fibonacci",
        "args": [
          "n"
        ],
        "returns": null,
        "has_return": true
      }
    },
    "complexity_class": {
      "nested_loops": 1,
      "recursive_calls": 0,
      "estimated_complexity": "O(n)"
    },
    "side_effect_profile": {
      "has_print": false,
      "has_global_access": false,
      "has_file_io": false,
      "modifies_arguments": false,
      "is_pure": true
    },
    "termination_properties": {
      "has_base_case": true,
      "has_bounded_loops": true,
      "recursive_depth": 0
    },
    "algebraic_structure": {
      "commutative_ops": [
        "Add",
        "Add"
      ],
      "associative_ops": [
        "Add",
        "Add"
      ],
      "binary_operations": [
        "Add",
        "Add"
      ]
    },
    "numerical_behavior": {
      "uses_integers": true,
      "uses_floats": false,
      "has_arithmetic": true,
      "numeric_constants": [
        0,
        0,
        1,
        1,
        0,
        1,
        2,
        1
      ]
    },
    "logical_equivalence": {
      "boolean_ops": [],
      "comparisons": [
        "LtE",
        "Eq"
      ],
      "logical_patterns": []
    },
    "normalized_ast_structure": {
      "node_types": [
        "Module",
        "FunctionDef",
        "arguments",
        "arg",
        "If",
        "Compare",
        "Name",
        "Load",
        "LtE",
        "Constant",
        "Return",
        "Constant",
        "If",
        "Compare",
        "Name",
        "Load",
        "Eq",
        "Constant",
        "Return",
        "Constant",
        "Assign",
        "Tuple",
        "Name",
        "Store",
        "Name",
        "Store",
        "Store",
        "Tuple",
        "Constant",
        "Constant",
        "Load",
        "For",
        "Name",
        "Store",
        "Call",
        "Name",
        "Load",
        "Constant",
        "BinOp",
        "Name",
        "Load",
        "Add",
        "Constant",
        "Assign",
        "Tuple",
        "Name",
        "Store",
        "Name",
        "Store",
        "Store",
        "Tuple",
        "Name",
        "Load",
        "BinOp",
        "Name",
        "Load",
        "Add",
        "Name",
        "Load",
        "Load",
        "Return",
        "Name",
        "Load"
      ],
      "ast_depth": 7,
      "ast_hash": "9ab064e3ea8e7729ca5332b33258c4f7"
    },
    "operator_precedence": {
      "operator_sequence": [
        "Add",
        "Add"
      ],
      "precedence_levels": {
        "Add": 3
      }
    },
    "statement_ordering": {
      "statement_types": [
        "FunctionDef",
        "If",
        "Return",
        "If",
        "Return",
        "Assign",
        "For",
        "Assign",
        "Return"
      ],
      "statement_sequence": [
        "FunctionDef_0",
        "If_1",
        "Return_2",
        "If_3",
        "Return_4",
        "Assign_5",
        "For_6",
        "Assign_7",
        "Return_8"
      ],
      "control_flow_order": [
        "FunctionDef",
        "If",
        "If",
        "For"
      ]
    }
  },
  "created_timestamp": "2025-09-29T11:19:21.406978",
  "canon_version": "1.0"
}