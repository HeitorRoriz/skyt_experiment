{
  "experiment_id": "binary_search_temp1.5_20250929_172141",
  "contract_id": "binary_search",
  "temperature": 1.5,
  "timestamp": "2025-09-29T17:21:41.112405",
  "num_runs": 10,
  "successful_runs": 10,
  "contract": {
    "id": "binary_search",
    "task_intent": "Search for element in sorted array using binary search",
    "prompt": "Write a Python function called 'binary_search' that takes a sorted list and a target value, returning the index of the target or -1 if not found.",
    "constraints": {
      "function_name": "binary_search",
      "algorithm": "binary_search"
    },
    "language": "python",
    "environment": {},
    "output_format": "raw_code",
    "oracle_requirements": {
      "test_cases": [
        {
          "array": [
            1,
            2,
            3,
            4,
            5
          ],
          "target": 3,
          "expected": 2,
          "description": "Element found"
        },
        {
          "array": [
            1,
            2,
            3,
            4,
            5
          ],
          "target": 6,
          "expected": -1,
          "description": "Element not found"
        },
        {
          "array": [],
          "target": 1,
          "expected": -1,
          "description": "Empty array"
        }
      ],
      "correctness_threshold": 1.0,
      "required_pass_rate": 0.8
    },
    "normalization_rules": {},
    "anchor_signature": null,
    "compliance_flag": false,
    "distance_metric": "foundational_properties",
    "rescue_bounds": {},
    "model_specification": {},
    "contract_version": "2.0",
    "oracle_version": "1.0",
    "normalization_version": "1.0",
    "created_timestamp": "2025-09-29T17:21:13.083153",
    "run_id": null,
    "prompt_id": "binary_search",
    "sample_id": null
  },
  "canon_data": {
    "contract_id": "binary_search",
    "canonical_code": "def binary_search(arr, target):\n    left = 0\n    right = len(arr) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return -1\n",
    "foundational_properties": {
      "control_flow_signature": {
        "if_statements": 2,
        "for_loops": 0,
        "while_loops": 1,
        "function_calls": [
          "len"
        ],
        "nested_depth": 3,
        "branch_patterns": [
          "if_at_depth_1",
          "if_at_depth_2"
        ]
      },
      "data_dependency_graph": {
        "dependencies": {
          "left": [
            "mid"
          ],
          "right": [
            "arr",
            "mid"
          ],
          "mid": [
            "left",
            "right"
          ]
        },
        "assignments": {
          "left": "BinOp(left=Name(id='mid', ctx=Load()), op=Add(), right=Constant(value=1))",
          "right": "BinOp(left=Name(id='mid', ctx=Load()), op=Sub(), right=Constant(value=1))",
          "mid": "BinOp(left=BinOp(left=Name(id='left', ctx=Load()), op=Add(), right=Name(id='right', ctx=Load())), op=FloorDiv(), right=Constant(value=2))"
        }
      },
      "execution_paths": {
        "execution_paths": [
          [
            "function_binary_search"
          ],
          [
            "function_binary_search",
            "branch"
          ],
          [
            "function_binary_search",
            "branch",
            "branch"
          ]
        ]
      },
      "function_contracts": {
        "binary_search": {
          "name": "binary_search",
          "args": [
            "arr",
            "target"
          ],
          "returns": null,
          "has_return": true
        }
      },
      "complexity_class": {
        "nested_loops": 1,
        "recursive_calls": 0,
        "estimated_complexity": "O(n)"
      },
      "side_effect_profile": {
        "has_print": false,
        "has_global_access": false,
        "has_file_io": false,
        "modifies_arguments": false,
        "is_pure": true
      },
      "termination_properties": {
        "has_base_case": true,
        "has_bounded_loops": false,
        "recursive_depth": 0
      },
      "algebraic_structure": {
        "commutative_ops": [
          "Add",
          "Add"
        ],
        "associative_ops": [
          "Add",
          "Add"
        ],
        "binary_operations": [
          "Sub",
          "FloorDiv",
          "Add",
          "Add",
          "Sub"
        ]
      },
      "numerical_behavior": {
        "uses_integers": true,
        "uses_floats": false,
        "has_arithmetic": true,
        "numeric_constants": [
          0,
          1,
          2,
          1,
          1,
          1
        ]
      },
      "logical_equivalence": {
        "boolean_ops": [],
        "comparisons": [
          "LtE",
          "Eq",
          "Lt"
        ],
        "logical_patterns": []
      },
      "normalized_ast_structure": {
        "node_types": [
          "Module",
          "FunctionDef",
          "arguments",
          "arg",
          "arg",
          "Assign",
          "Name",
          "Store",
          "Constant",
          "Assign",
          "Name",
          "Store",
          "BinOp",
          "Call",
          "Name",
          "Load",
          "Name",
          "Load",
          "Sub",
          "Constant",
          "While",
          "Compare",
          "Name",
          "Load",
          "LtE",
          "Name",
          "Load",
          "Assign",
          "Name",
          "Store",
          "BinOp",
          "BinOp",
          "Name",
          "Load",
          "Add",
          "Name",
          "Load",
          "FloorDiv",
          "Constant",
          "If",
          "Compare",
          "Subscript",
          "Name",
          "Load",
          "Name",
          "Load",
          "Load",
          "Eq",
          "Name",
          "Load",
          "Return",
          "Name",
          "Load",
          "If",
          "Compare",
          "Subscript",
          "Name",
          "Load",
          "Name",
          "Load",
          "Load",
          "Lt",
          "Name",
          "Load",
          "Assign",
          "Name",
          "Store",
          "BinOp",
          "Name",
          "Load",
          "Add",
          "Constant",
          "Assign",
          "Name",
          "Store",
          "BinOp",
          "Name",
          "Load",
          "Sub",
          "Constant",
          "Return",
          "UnaryOp",
          "USub",
          "Constant"
        ],
        "ast_depth": 8,
        "ast_hash": "74d7431d211e2ac08525765a230321bd",
        "alpha_renamed_hash": "336455f44d34c8072900173b6cbdbc26"
      },
      "operator_precedence": {
        "operator_sequence": [
          "Sub",
          "FloorDiv",
          "Add",
          "Add",
          "Sub"
        ],
        "precedence_levels": {
          "Sub": 3,
          "FloorDiv": 4,
          "Add": 3
        }
      },
      "statement_ordering": {
        "statement_types": [
          "FunctionDef",
          "Assign",
          "Assign",
          "While",
          "Assign",
          "If",
          "Return",
          "If",
          "Assign",
          "Assign",
          "Return"
        ],
        "statement_sequence": [
          "FunctionDef_0",
          "Assign_1",
          "Assign_2",
          "While_3",
          "Assign_4",
          "If_5",
          "Return_6",
          "If_7",
          "Assign_8",
          "Assign_9",
          "Return_10"
        ],
        "control_flow_order": [
          "FunctionDef",
          "While",
          "If",
          "If"
        ]
      },
      "behavioral_signature": {
        "can_execute": true,
        "io_signature_hash": "ca377392ba27f5bdaf360e84f2bd61ab",
        "side_effects_detected": [],
        "test_results": [
          [
            0,
            "Exception:TypeError",
            false
          ],
          [
            1,
            "Exception:TypeError",
            false
          ],
          [
            2,
            "Exception:TypeError",
            false
          ]
        ]
      },
      "recursion_schema": {
        "is_recursive": false,
        "base_cases": [],
        "recursive_calls": [],
        "recursion_pattern": null,
        "termination_guards": []
      }
    },
    "created_timestamp": "2025-09-29T16:54:00",
    "canon_version": "1.0",
    "oracle_validated": true,
    "oracle_pass_rate": 1.0,
    "source": "curated_golden_implementation"
  },
  "canon_created": true,
  "llm_results": [
    {
      "run_id": 1,
      "raw_output": "def binary_search(sorted_list, target):\n    left, right = 0, len(sorted_list) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if sorted_list[mid] == target:\n            return mid\n        elif sorted_list[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1",
      "success": true,
      "enhanced_prompt": "Write a Python function called 'binary_search' that takes a sorted list and a target value, returning the index of the target or -1 if not found.\n\nIMPORTANT: The function must be named 'binary_search'.\n\nProvide only the Python code, no explanations or markdown."
    },
    {
      "run_id": 2,
      "raw_output": "def binary_search(sorted_list, target):\n    left, right = 0, len(sorted_list) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if sorted_list[mid] == target:\n            return mid\n        elif sorted_list[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1",
      "success": true,
      "enhanced_prompt": "Write a Python function called 'binary_search' that takes a sorted list and a target value, returning the index of the target or -1 if not found.\n\nIMPORTANT: The function must be named 'binary_search'.\n\nProvide only the Python code, no explanations or markdown."
    },
    {
      "run_id": 3,
      "raw_output": "def binary_search(sorted_list, target):\n    left, right = 0, len(sorted_list) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if sorted_list[mid] == target:\n            return mid\n        elif sorted_list[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1",
      "success": true,
      "enhanced_prompt": "Write a Python function called 'binary_search' that takes a sorted list and a target value, returning the index of the target or -1 if not found.\n\nIMPORTANT: The function must be named 'binary_search'.\n\nProvide only the Python code, no explanations or markdown."
    },
    {
      "run_id": 4,
      "raw_output": "def binary_search(sorted_list, target):\n    left, right = 0, len(sorted_list) - 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if sorted_list[mid] == target:\n            return mid\n        elif sorted_list[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1",
      "success": true,
      "enhanced_prompt": "Write a Python function called 'binary_search' that takes a sorted list and a target value, returning the index of the target or -1 if not found.\n\nIMPORTANT: The function must be named 'binary_search'.\n\nProvide only the Python code, no explanations or markdown."
    },
    {
      "run_id": 5,
      "raw_output": "def binary_search(sorted_list, target):\n    left, right = 0, len(sorted_list) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if sorted_list[mid] == target:\n            return mid\n        elif sorted_list[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1",
      "success": true,
      "enhanced_prompt": "Write a Python function called 'binary_search' that takes a sorted list and a target value, returning the index of the target or -1 if not found.\n\nIMPORTANT: The function must be named 'binary_search'.\n\nProvide only the Python code, no explanations or markdown."
    },
    {
      "run_id": 6,
      "raw_output": "def binary_search(sorted_list, target):\n    left, right = 0, len(sorted_list) - 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if sorted_list[mid] == target:\n            return mid\n        elif sorted_list[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1",
      "success": true,
      "enhanced_prompt": "Write a Python function called 'binary_search' that takes a sorted list and a target value, returning the index of the target or -1 if not found.\n\nIMPORTANT: The function must be named 'binary_search'.\n\nProvide only the Python code, no explanations or markdown."
    },
    {
      "run_id": 7,
      "raw_output": "def binary_search(sorted_list, target):\n    left, right = 0, len(sorted_list) - 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if sorted_list[mid] == target:\n            return mid\n        elif sorted_list[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1",
      "success": true,
      "enhanced_prompt": "Write a Python function called 'binary_search' that takes a sorted list and a target value, returning the index of the target or -1 if not found.\n\nIMPORTANT: The function must be named 'binary_search'.\n\nProvide only the Python code, no explanations or markdown."
    },
    {
      "run_id": 8,
      "raw_output": "def binary_search(sorted_list, target):\n    low = 0\n    high = len(sorted_list) - 1\n    \n    while low <= high:\n        mid = (low + high) // 2\n        if sorted_list[mid] == target:\n            return mid\n        elif sorted_list[mid] < target:\n            low = mid + 1\n        else:\n            high = mid - 1\n            \n    return -1",
      "success": true,
      "enhanced_prompt": "Write a Python function called 'binary_search' that takes a sorted list and a target value, returning the index of the target or -1 if not found.\n\nIMPORTANT: The function must be named 'binary_search'.\n\nProvide only the Python code, no explanations or markdown."
    },
    {
      "run_id": 9,
      "raw_output": "def binary_search(sorted_list, target):\n    low, high = 0, len(sorted_list) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if sorted_list[mid] == target:\n            return mid\n        elif sorted_list[mid] < target:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1",
      "success": true,
      "enhanced_prompt": "Write a Python function called 'binary_search' that takes a sorted list and a target value, returning the index of the target or -1 if not found.\n\nIMPORTANT: The function must be named 'binary_search'.\n\nProvide only the Python code, no explanations or markdown."
    },
    {
      "run_id": 10,
      "raw_output": "def binary_search(sorted_list, target):\n    low = 0\n    high = len(sorted_list) - 1\n    \n    while low <= high:\n        mid = (low + high) // 2\n        if sorted_list[mid] == target:\n            return mid\n        elif sorted_list[mid] < target:\n            low = mid + 1\n        else:\n            high = mid - 1\n    \n    return -1",
      "success": true,
      "enhanced_prompt": "Write a Python function called 'binary_search' that takes a sorted list and a target value, returning the index of the target or -1 if not found.\n\nIMPORTANT: The function must be named 'binary_search'.\n\nProvide only the Python code, no explanations or markdown."
    }
  ],
  "raw_outputs": [
    "def binary_search(sorted_list, target):\n    left, right = 0, len(sorted_list) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if sorted_list[mid] == target:\n            return mid\n        elif sorted_list[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1",
    "def binary_search(sorted_list, target):\n    left, right = 0, len(sorted_list) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if sorted_list[mid] == target:\n            return mid\n        elif sorted_list[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1",
    "def binary_search(sorted_list, target):\n    left, right = 0, len(sorted_list) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if sorted_list[mid] == target:\n            return mid\n        elif sorted_list[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1",
    "def binary_search(sorted_list, target):\n    left, right = 0, len(sorted_list) - 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if sorted_list[mid] == target:\n            return mid\n        elif sorted_list[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1",
    "def binary_search(sorted_list, target):\n    left, right = 0, len(sorted_list) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if sorted_list[mid] == target:\n            return mid\n        elif sorted_list[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1",
    "def binary_search(sorted_list, target):\n    left, right = 0, len(sorted_list) - 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if sorted_list[mid] == target:\n            return mid\n        elif sorted_list[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1",
    "def binary_search(sorted_list, target):\n    left, right = 0, len(sorted_list) - 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if sorted_list[mid] == target:\n            return mid\n        elif sorted_list[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1",
    "def binary_search(sorted_list, target):\n    low = 0\n    high = len(sorted_list) - 1\n    \n    while low <= high:\n        mid = (low + high) // 2\n        if sorted_list[mid] == target:\n            return mid\n        elif sorted_list[mid] < target:\n            low = mid + 1\n        else:\n            high = mid - 1\n            \n    return -1",
    "def binary_search(sorted_list, target):\n    low, high = 0, len(sorted_list) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if sorted_list[mid] == target:\n            return mid\n        elif sorted_list[mid] < target:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1",
    "def binary_search(sorted_list, target):\n    low = 0\n    high = len(sorted_list) - 1\n    \n    while low <= high:\n        mid = (low + high) // 2\n        if sorted_list[mid] == target:\n            return mid\n        elif sorted_list[mid] < target:\n            low = mid + 1\n        else:\n            high = mid - 1\n    \n    return -1"
  ],
  "transformation_results": [
    {
      "run_id": 1,
      "original_code": "def binary_search(sorted_list, target):\n    left, right = 0, len(sorted_list) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if sorted_list[mid] == target:\n            return mid\n        elif sorted_list[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1",
      "transformed_code": "def binary_search(sorted_list, target):\n    left, right = 0, len(sorted_list) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if sorted_list[mid] == target:\n            return mid\n        elif sorted_list[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1",
      "transformation_needed": true,
      "transformation_success": false,
      "final_distance": 0.2111111111111111,
      "transformations_applied": []
    },
    {
      "run_id": 2,
      "original_code": "def binary_search(sorted_list, target):\n    left, right = 0, len(sorted_list) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if sorted_list[mid] == target:\n            return mid\n        elif sorted_list[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1",
      "transformed_code": "def binary_search(sorted_list, target):\n    left, right = 0, len(sorted_list) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if sorted_list[mid] == target:\n            return mid\n        elif sorted_list[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1",
      "transformation_needed": true,
      "transformation_success": false,
      "final_distance": 0.2111111111111111,
      "transformations_applied": []
    },
    {
      "run_id": 3,
      "original_code": "def binary_search(sorted_list, target):\n    left, right = 0, len(sorted_list) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if sorted_list[mid] == target:\n            return mid\n        elif sorted_list[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1",
      "transformed_code": "def binary_search(sorted_list, target):\n    left, right = 0, len(sorted_list) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if sorted_list[mid] == target:\n            return mid\n        elif sorted_list[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1",
      "transformation_needed": true,
      "transformation_success": false,
      "final_distance": 0.2111111111111111,
      "transformations_applied": []
    },
    {
      "run_id": 4,
      "original_code": "def binary_search(sorted_list, target):\n    left, right = 0, len(sorted_list) - 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if sorted_list[mid] == target:\n            return mid\n        elif sorted_list[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1",
      "transformed_code": "def binary_search(sorted_list, target):\n    left, right = 0, len(sorted_list) - 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if sorted_list[mid] == target:\n            return mid\n        elif sorted_list[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1",
      "transformation_needed": true,
      "transformation_success": false,
      "final_distance": 0.3,
      "transformations_applied": []
    },
    {
      "run_id": 5,
      "original_code": "def binary_search(sorted_list, target):\n    left, right = 0, len(sorted_list) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if sorted_list[mid] == target:\n            return mid\n        elif sorted_list[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1",
      "transformed_code": "def binary_search(sorted_list, target):\n    left, right = 0, len(sorted_list) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if sorted_list[mid] == target:\n            return mid\n        elif sorted_list[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1",
      "transformation_needed": true,
      "transformation_success": false,
      "final_distance": 0.2111111111111111,
      "transformations_applied": []
    },
    {
      "run_id": 6,
      "original_code": "def binary_search(sorted_list, target):\n    left, right = 0, len(sorted_list) - 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if sorted_list[mid] == target:\n            return mid\n        elif sorted_list[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1",
      "transformed_code": "def binary_search(sorted_list, target):\n    left, right = 0, len(sorted_list) - 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if sorted_list[mid] == target:\n            return mid\n        elif sorted_list[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1",
      "transformation_needed": true,
      "transformation_success": false,
      "final_distance": 0.3,
      "transformations_applied": []
    },
    {
      "run_id": 7,
      "original_code": "def binary_search(sorted_list, target):\n    left, right = 0, len(sorted_list) - 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if sorted_list[mid] == target:\n            return mid\n        elif sorted_list[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1",
      "transformed_code": "def binary_search(sorted_list, target):\n    left, right = 0, len(sorted_list) - 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if sorted_list[mid] == target:\n            return mid\n        elif sorted_list[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1",
      "transformation_needed": true,
      "transformation_success": false,
      "final_distance": 0.3,
      "transformations_applied": []
    },
    {
      "run_id": 8,
      "original_code": "def binary_search(sorted_list, target):\n    low = 0\n    high = len(sorted_list) - 1\n    \n    while low <= high:\n        mid = (low + high) // 2\n        if sorted_list[mid] == target:\n            return mid\n        elif sorted_list[mid] < target:\n            low = mid + 1\n        else:\n            high = mid - 1\n            \n    return -1",
      "transformed_code": "def binary_search(arr, target):\n    left = 0\n    right = len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1",
      "transformation_needed": true,
      "transformation_success": true,
      "final_distance": 0.0,
      "transformations_applied": [
        "VariableRenamer"
      ]
    },
    {
      "run_id": 9,
      "original_code": "def binary_search(sorted_list, target):\n    low, high = 0, len(sorted_list) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if sorted_list[mid] == target:\n            return mid\n        elif sorted_list[mid] < target:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1",
      "transformed_code": "def binary_search(arr, target):\n    left, right = (0, len(arr) - 1)\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1",
      "transformation_needed": true,
      "transformation_success": false,
      "final_distance": 0.14444444444444443,
      "transformations_applied": [
        "VariableRenamer"
      ]
    },
    {
      "run_id": 10,
      "original_code": "def binary_search(sorted_list, target):\n    low = 0\n    high = len(sorted_list) - 1\n    \n    while low <= high:\n        mid = (low + high) // 2\n        if sorted_list[mid] == target:\n            return mid\n        elif sorted_list[mid] < target:\n            low = mid + 1\n        else:\n            high = mid - 1\n    \n    return -1",
      "transformed_code": "def binary_search(arr, target):\n    left = 0\n    right = len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1",
      "transformation_needed": true,
      "transformation_success": true,
      "final_distance": 0.0,
      "transformations_applied": [
        "VariableRenamer"
      ]
    }
  ],
  "metrics": {
    "R_raw": 0.4,
    "R_behavioral": 0.1,
    "R_structural": 0.4,
    "R_canon": 0.4,
    "total_runs": 10,
    "raw_stats": {
      "unique_outputs": 5,
      "most_common_count": 4,
      "distribution": {
        "def binary_search(sorted_list, target):\n    left, right = 0, len(sorted_list) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if sorted_list[mid] == target:\n            return mid\n        elif sorted_list[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1": 4,
        "def binary_search(sorted_list, target):\n    left, right = 0, len(sorted_list) - 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if sorted_list[mid] == target:\n            return mid\n        elif sorted_list[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1": 3,
        "def binary_search(sorted_list, target):\n    low = 0\n    high = len(sorted_list) - 1\n    \n    while low <= high:\n        mid = (low + high) // 2\n        if sorted_list[mid] == target:\n            return mid\n        elif sorted_list[mid] < target:\n            low = mid + 1\n        else:\n            high = mid - 1\n            \n    return -1": 1,
        "def binary_search(sorted_list, target):\n    low, high = 0, len(sorted_list) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if sorted_list[mid] == target:\n            return mid\n        elif sorted_list[mid] < target:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1": 1,
        "def binary_search(sorted_list, target):\n    low = 0\n    high = len(sorted_list) - 1\n    \n    while low <= high:\n        mid = (low + high) // 2\n        if sorted_list[mid] == target:\n            return mid\n        elif sorted_list[mid] < target:\n            low = mid + 1\n        else:\n            high = mid - 1\n    \n    return -1": 1
      },
      "entropy": 2.0464393446710156
    },
    "behavioral_stats": {
      "unique_behaviors": 10,
      "oracle_results": [
        {
          "passed": false,
          "error": "No fibonacci function found",
          "test_results": []
        },
        {
          "passed": false,
          "error": "No fibonacci function found",
          "test_results": []
        },
        {
          "passed": false,
          "error": "No fibonacci function found",
          "test_results": []
        },
        {
          "passed": false,
          "error": "No fibonacci function found",
          "test_results": []
        },
        {
          "passed": false,
          "error": "No fibonacci function found",
          "test_results": []
        },
        {
          "passed": false,
          "error": "No fibonacci function found",
          "test_results": []
        },
        {
          "passed": false,
          "error": "No fibonacci function found",
          "test_results": []
        },
        {
          "passed": false,
          "error": "No fibonacci function found",
          "test_results": []
        },
        {
          "passed": false,
          "error": "No fibonacci function found",
          "test_results": []
        },
        {
          "passed": false,
          "error": "No fibonacci function found",
          "test_results": []
        }
      ],
      "behavioral_groups": {
        "failed_0": [
          0
        ],
        "failed_1": [
          1
        ],
        "failed_2": [
          2
        ],
        "failed_3": [
          3
        ],
        "failed_4": [
          4
        ],
        "failed_5": [
          5
        ],
        "failed_6": [
          6
        ],
        "failed_7": [
          7
        ],
        "failed_8": [
          8
        ],
        "failed_9": [
          9
        ]
      },
      "pass_rate": 0.0
    },
    "structural_stats": {
      "unique_structures": 4,
      "property_results": [
        {
          "control_flow_signature": {
            "if_statements": 2,
            "for_loops": 0,
            "while_loops": 1,
            "function_calls": [
              "len"
            ],
            "nested_depth": 3,
            "branch_patterns": [
              "if_at_depth_1",
              "if_at_depth_2"
            ]
          },
          "data_dependency_graph": {
            "dependencies": {
              "mid": [
                "left",
                "right"
              ],
              "left": [
                "mid"
              ],
              "right": [
                "mid"
              ]
            },
            "assignments": {
              "mid": "BinOp(left=BinOp(left=Name(id='left', ctx=Load()), op=Add(), right=Name(id='right', ctx=Load())), op=FloorDiv(), right=Constant(value=2))",
              "left": "BinOp(left=Name(id='mid', ctx=Load()), op=Add(), right=Constant(value=1))",
              "right": "BinOp(left=Name(id='mid', ctx=Load()), op=Sub(), right=Constant(value=1))"
            }
          },
          "execution_paths": {
            "execution_paths": [
              [
                "function_binary_search"
              ],
              [
                "function_binary_search",
                "branch"
              ],
              [
                "function_binary_search",
                "branch",
                "branch"
              ]
            ]
          },
          "function_contracts": {
            "binary_search": {
              "name": "binary_search",
              "args": [
                "sorted_list",
                "target"
              ],
              "returns": null,
              "has_return": true
            }
          },
          "complexity_class": {
            "nested_loops": 1,
            "recursive_calls": 0,
            "estimated_complexity": "O(n)"
          },
          "side_effect_profile": {
            "has_print": false,
            "has_global_access": false,
            "has_file_io": false,
            "modifies_arguments": false,
            "is_pure": true
          },
          "termination_properties": {
            "has_base_case": true,
            "has_bounded_loops": false,
            "recursive_depth": 0
          },
          "algebraic_structure": {
            "commutative_ops": [
              "Add",
              "Add"
            ],
            "associative_ops": [
              "Add",
              "Add"
            ],
            "binary_operations": [
              "Sub",
              "FloorDiv",
              "Add",
              "Add",
              "Sub"
            ]
          },
          "numerical_behavior": {
            "uses_integers": true,
            "uses_floats": false,
            "has_arithmetic": true,
            "numeric_constants": [
              0,
              1,
              2,
              1,
              1,
              1
            ]
          },
          "logical_equivalence": {
            "boolean_ops": [],
            "comparisons": [
              "LtE",
              "Eq",
              "Lt"
            ],
            "logical_patterns": []
          },
          "normalized_ast_structure": {
            "node_types": [
              "Module",
              "FunctionDef",
              "arguments",
              "arg",
              "arg",
              "Assign",
              "Tuple",
              "Name",
              "Store",
              "Name",
              "Store",
              "Store",
              "Tuple",
              "Constant",
              "BinOp",
              "Call",
              "Name",
              "Load",
              "Name",
              "Load",
              "Sub",
              "Constant",
              "Load",
              "While",
              "Compare",
              "Name",
              "Load",
              "LtE",
              "Name",
              "Load",
              "Assign",
              "Name",
              "Store",
              "BinOp",
              "BinOp",
              "Name",
              "Load",
              "Add",
              "Name",
              "Load",
              "FloorDiv",
              "Constant",
              "If",
              "Compare",
              "Subscript",
              "Name",
              "Load",
              "Name",
              "Load",
              "Load",
              "Eq",
              "Name",
              "Load",
              "Return",
              "Name",
              "Load",
              "If",
              "Compare",
              "Subscript",
              "Name",
              "Load",
              "Name",
              "Load",
              "Load",
              "Lt",
              "Name",
              "Load",
              "Assign",
              "Name",
              "Store",
              "BinOp",
              "Name",
              "Load",
              "Add",
              "Constant",
              "Assign",
              "Name",
              "Store",
              "BinOp",
              "Name",
              "Load",
              "Sub",
              "Constant",
              "Return",
              "UnaryOp",
              "USub",
              "Constant"
            ],
            "ast_depth": 8,
            "ast_hash": "1bc24f109a26cd93e357b4e2e4203159",
            "alpha_renamed_hash": "be261a4450505295910dc4ee9a9a40c3"
          },
          "operator_precedence": {
            "operator_sequence": [
              "Sub",
              "FloorDiv",
              "Add",
              "Add",
              "Sub"
            ],
            "precedence_levels": {
              "Sub": 3,
              "FloorDiv": 4,
              "Add": 3
            }
          },
          "statement_ordering": {
            "statement_types": [
              "FunctionDef",
              "Assign",
              "While",
              "Assign",
              "If",
              "Return",
              "If",
              "Assign",
              "Assign",
              "Return"
            ],
            "statement_sequence": [
              "FunctionDef_0",
              "Assign_1",
              "While_2",
              "Assign_3",
              "If_4",
              "Return_5",
              "If_6",
              "Assign_7",
              "Assign_8",
              "Return_9"
            ],
            "control_flow_order": [
              "FunctionDef",
              "While",
              "If",
              "If"
            ]
          },
          "behavioral_signature": {
            "can_execute": true,
            "io_signature_hash": "ca377392ba27f5bdaf360e84f2bd61ab",
            "side_effects_detected": [],
            "test_results": [
              [
                0,
                "Exception:TypeError",
                false
              ],
              [
                1,
                "Exception:TypeError",
                false
              ],
              [
                2,
                "Exception:TypeError",
                false
              ]
            ]
          },
          "recursion_schema": {
            "is_recursive": false,
            "base_cases": [],
            "recursive_calls": [],
            "recursion_pattern": null,
            "termination_guards": []
          }
        },
        {
          "control_flow_signature": {
            "if_statements": 2,
            "for_loops": 0,
            "while_loops": 1,
            "function_calls": [
              "len"
            ],
            "nested_depth": 3,
            "branch_patterns": [
              "if_at_depth_1",
              "if_at_depth_2"
            ]
          },
          "data_dependency_graph": {
            "dependencies": {
              "mid": [
                "left",
                "right"
              ],
              "left": [
                "mid"
              ],
              "right": [
                "mid"
              ]
            },
            "assignments": {
              "mid": "BinOp(left=BinOp(left=Name(id='left', ctx=Load()), op=Add(), right=Name(id='right', ctx=Load())), op=FloorDiv(), right=Constant(value=2))",
              "left": "BinOp(left=Name(id='mid', ctx=Load()), op=Add(), right=Constant(value=1))",
              "right": "BinOp(left=Name(id='mid', ctx=Load()), op=Sub(), right=Constant(value=1))"
            }
          },
          "execution_paths": {
            "execution_paths": [
              [
                "function_binary_search"
              ],
              [
                "function_binary_search",
                "branch"
              ],
              [
                "function_binary_search",
                "branch",
                "branch"
              ]
            ]
          },
          "function_contracts": {
            "binary_search": {
              "name": "binary_search",
              "args": [
                "sorted_list",
                "target"
              ],
              "returns": null,
              "has_return": true
            }
          },
          "complexity_class": {
            "nested_loops": 1,
            "recursive_calls": 0,
            "estimated_complexity": "O(n)"
          },
          "side_effect_profile": {
            "has_print": false,
            "has_global_access": false,
            "has_file_io": false,
            "modifies_arguments": false,
            "is_pure": true
          },
          "termination_properties": {
            "has_base_case": true,
            "has_bounded_loops": false,
            "recursive_depth": 0
          },
          "algebraic_structure": {
            "commutative_ops": [
              "Add",
              "Add"
            ],
            "associative_ops": [
              "Add",
              "Add"
            ],
            "binary_operations": [
              "Sub",
              "FloorDiv",
              "Add",
              "Add",
              "Sub"
            ]
          },
          "numerical_behavior": {
            "uses_integers": true,
            "uses_floats": false,
            "has_arithmetic": true,
            "numeric_constants": [
              0,
              1,
              2,
              1,
              1,
              1
            ]
          },
          "logical_equivalence": {
            "boolean_ops": [],
            "comparisons": [
              "LtE",
              "Eq",
              "Lt"
            ],
            "logical_patterns": []
          },
          "normalized_ast_structure": {
            "node_types": [
              "Module",
              "FunctionDef",
              "arguments",
              "arg",
              "arg",
              "Assign",
              "Tuple",
              "Name",
              "Store",
              "Name",
              "Store",
              "Store",
              "Tuple",
              "Constant",
              "BinOp",
              "Call",
              "Name",
              "Load",
              "Name",
              "Load",
              "Sub",
              "Constant",
              "Load",
              "While",
              "Compare",
              "Name",
              "Load",
              "LtE",
              "Name",
              "Load",
              "Assign",
              "Name",
              "Store",
              "BinOp",
              "BinOp",
              "Name",
              "Load",
              "Add",
              "Name",
              "Load",
              "FloorDiv",
              "Constant",
              "If",
              "Compare",
              "Subscript",
              "Name",
              "Load",
              "Name",
              "Load",
              "Load",
              "Eq",
              "Name",
              "Load",
              "Return",
              "Name",
              "Load",
              "If",
              "Compare",
              "Subscript",
              "Name",
              "Load",
              "Name",
              "Load",
              "Load",
              "Lt",
              "Name",
              "Load",
              "Assign",
              "Name",
              "Store",
              "BinOp",
              "Name",
              "Load",
              "Add",
              "Constant",
              "Assign",
              "Name",
              "Store",
              "BinOp",
              "Name",
              "Load",
              "Sub",
              "Constant",
              "Return",
              "UnaryOp",
              "USub",
              "Constant"
            ],
            "ast_depth": 8,
            "ast_hash": "1bc24f109a26cd93e357b4e2e4203159",
            "alpha_renamed_hash": "be261a4450505295910dc4ee9a9a40c3"
          },
          "operator_precedence": {
            "operator_sequence": [
              "Sub",
              "FloorDiv",
              "Add",
              "Add",
              "Sub"
            ],
            "precedence_levels": {
              "Sub": 3,
              "FloorDiv": 4,
              "Add": 3
            }
          },
          "statement_ordering": {
            "statement_types": [
              "FunctionDef",
              "Assign",
              "While",
              "Assign",
              "If",
              "Return",
              "If",
              "Assign",
              "Assign",
              "Return"
            ],
            "statement_sequence": [
              "FunctionDef_0",
              "Assign_1",
              "While_2",
              "Assign_3",
              "If_4",
              "Return_5",
              "If_6",
              "Assign_7",
              "Assign_8",
              "Return_9"
            ],
            "control_flow_order": [
              "FunctionDef",
              "While",
              "If",
              "If"
            ]
          },
          "behavioral_signature": {
            "can_execute": true,
            "io_signature_hash": "ca377392ba27f5bdaf360e84f2bd61ab",
            "side_effects_detected": [],
            "test_results": [
              [
                0,
                "Exception:TypeError",
                false
              ],
              [
                1,
                "Exception:TypeError",
                false
              ],
              [
                2,
                "Exception:TypeError",
                false
              ]
            ]
          },
          "recursion_schema": {
            "is_recursive": false,
            "base_cases": [],
            "recursive_calls": [],
            "recursion_pattern": null,
            "termination_guards": []
          }
        },
        {
          "control_flow_signature": {
            "if_statements": 2,
            "for_loops": 0,
            "while_loops": 1,
            "function_calls": [
              "len"
            ],
            "nested_depth": 3,
            "branch_patterns": [
              "if_at_depth_1",
              "if_at_depth_2"
            ]
          },
          "data_dependency_graph": {
            "dependencies": {
              "mid": [
                "left",
                "right"
              ],
              "left": [
                "mid"
              ],
              "right": [
                "mid"
              ]
            },
            "assignments": {
              "mid": "BinOp(left=BinOp(left=Name(id='left', ctx=Load()), op=Add(), right=Name(id='right', ctx=Load())), op=FloorDiv(), right=Constant(value=2))",
              "left": "BinOp(left=Name(id='mid', ctx=Load()), op=Add(), right=Constant(value=1))",
              "right": "BinOp(left=Name(id='mid', ctx=Load()), op=Sub(), right=Constant(value=1))"
            }
          },
          "execution_paths": {
            "execution_paths": [
              [
                "function_binary_search"
              ],
              [
                "function_binary_search",
                "branch"
              ],
              [
                "function_binary_search",
                "branch",
                "branch"
              ]
            ]
          },
          "function_contracts": {
            "binary_search": {
              "name": "binary_search",
              "args": [
                "sorted_list",
                "target"
              ],
              "returns": null,
              "has_return": true
            }
          },
          "complexity_class": {
            "nested_loops": 1,
            "recursive_calls": 0,
            "estimated_complexity": "O(n)"
          },
          "side_effect_profile": {
            "has_print": false,
            "has_global_access": false,
            "has_file_io": false,
            "modifies_arguments": false,
            "is_pure": true
          },
          "termination_properties": {
            "has_base_case": true,
            "has_bounded_loops": false,
            "recursive_depth": 0
          },
          "algebraic_structure": {
            "commutative_ops": [
              "Add",
              "Add"
            ],
            "associative_ops": [
              "Add",
              "Add"
            ],
            "binary_operations": [
              "Sub",
              "FloorDiv",
              "Add",
              "Add",
              "Sub"
            ]
          },
          "numerical_behavior": {
            "uses_integers": true,
            "uses_floats": false,
            "has_arithmetic": true,
            "numeric_constants": [
              0,
              1,
              2,
              1,
              1,
              1
            ]
          },
          "logical_equivalence": {
            "boolean_ops": [],
            "comparisons": [
              "LtE",
              "Eq",
              "Lt"
            ],
            "logical_patterns": []
          },
          "normalized_ast_structure": {
            "node_types": [
              "Module",
              "FunctionDef",
              "arguments",
              "arg",
              "arg",
              "Assign",
              "Tuple",
              "Name",
              "Store",
              "Name",
              "Store",
              "Store",
              "Tuple",
              "Constant",
              "BinOp",
              "Call",
              "Name",
              "Load",
              "Name",
              "Load",
              "Sub",
              "Constant",
              "Load",
              "While",
              "Compare",
              "Name",
              "Load",
              "LtE",
              "Name",
              "Load",
              "Assign",
              "Name",
              "Store",
              "BinOp",
              "BinOp",
              "Name",
              "Load",
              "Add",
              "Name",
              "Load",
              "FloorDiv",
              "Constant",
              "If",
              "Compare",
              "Subscript",
              "Name",
              "Load",
              "Name",
              "Load",
              "Load",
              "Eq",
              "Name",
              "Load",
              "Return",
              "Name",
              "Load",
              "If",
              "Compare",
              "Subscript",
              "Name",
              "Load",
              "Name",
              "Load",
              "Load",
              "Lt",
              "Name",
              "Load",
              "Assign",
              "Name",
              "Store",
              "BinOp",
              "Name",
              "Load",
              "Add",
              "Constant",
              "Assign",
              "Name",
              "Store",
              "BinOp",
              "Name",
              "Load",
              "Sub",
              "Constant",
              "Return",
              "UnaryOp",
              "USub",
              "Constant"
            ],
            "ast_depth": 8,
            "ast_hash": "1bc24f109a26cd93e357b4e2e4203159",
            "alpha_renamed_hash": "be261a4450505295910dc4ee9a9a40c3"
          },
          "operator_precedence": {
            "operator_sequence": [
              "Sub",
              "FloorDiv",
              "Add",
              "Add",
              "Sub"
            ],
            "precedence_levels": {
              "Sub": 3,
              "FloorDiv": 4,
              "Add": 3
            }
          },
          "statement_ordering": {
            "statement_types": [
              "FunctionDef",
              "Assign",
              "While",
              "Assign",
              "If",
              "Return",
              "If",
              "Assign",
              "Assign",
              "Return"
            ],
            "statement_sequence": [
              "FunctionDef_0",
              "Assign_1",
              "While_2",
              "Assign_3",
              "If_4",
              "Return_5",
              "If_6",
              "Assign_7",
              "Assign_8",
              "Return_9"
            ],
            "control_flow_order": [
              "FunctionDef",
              "While",
              "If",
              "If"
            ]
          },
          "behavioral_signature": {
            "can_execute": true,
            "io_signature_hash": "ca377392ba27f5bdaf360e84f2bd61ab",
            "side_effects_detected": [],
            "test_results": [
              [
                0,
                "Exception:TypeError",
                false
              ],
              [
                1,
                "Exception:TypeError",
                false
              ],
              [
                2,
                "Exception:TypeError",
                false
              ]
            ]
          },
          "recursion_schema": {
            "is_recursive": false,
            "base_cases": [],
            "recursive_calls": [],
            "recursion_pattern": null,
            "termination_guards": []
          }
        },
        {
          "control_flow_signature": {
            "if_statements": 2,
            "for_loops": 0,
            "while_loops": 1,
            "function_calls": [
              "len"
            ],
            "nested_depth": 3,
            "branch_patterns": [
              "if_at_depth_1",
              "if_at_depth_2"
            ]
          },
          "data_dependency_graph": {
            "dependencies": {
              "mid": [
                "left",
                "right"
              ],
              "left": [
                "mid"
              ],
              "right": [
                "mid"
              ]
            },
            "assignments": {
              "mid": "BinOp(left=Name(id='left', ctx=Load()), op=Add(), right=BinOp(left=BinOp(left=Name(id='right', ctx=Load()), op=Sub(), right=Name(id='left', ctx=Load())), op=FloorDiv(), right=Constant(value=2)))",
              "left": "BinOp(left=Name(id='mid', ctx=Load()), op=Add(), right=Constant(value=1))",
              "right": "BinOp(left=Name(id='mid', ctx=Load()), op=Sub(), right=Constant(value=1))"
            }
          },
          "execution_paths": {
            "execution_paths": [
              [
                "function_binary_search"
              ],
              [
                "function_binary_search",
                "branch"
              ],
              [
                "function_binary_search",
                "branch",
                "branch"
              ]
            ]
          },
          "function_contracts": {
            "binary_search": {
              "name": "binary_search",
              "args": [
                "sorted_list",
                "target"
              ],
              "returns": null,
              "has_return": true
            }
          },
          "complexity_class": {
            "nested_loops": 1,
            "recursive_calls": 0,
            "estimated_complexity": "O(n)"
          },
          "side_effect_profile": {
            "has_print": false,
            "has_global_access": false,
            "has_file_io": false,
            "modifies_arguments": false,
            "is_pure": true
          },
          "termination_properties": {
            "has_base_case": true,
            "has_bounded_loops": false,
            "recursive_depth": 0
          },
          "algebraic_structure": {
            "commutative_ops": [
              "Add",
              "Add"
            ],
            "associative_ops": [
              "Add",
              "Add"
            ],
            "binary_operations": [
              "Sub",
              "Add",
              "FloorDiv",
              "Sub",
              "Add",
              "Sub"
            ]
          },
          "numerical_behavior": {
            "uses_integers": true,
            "uses_floats": false,
            "has_arithmetic": true,
            "numeric_constants": [
              0,
              1,
              2,
              1,
              1,
              1
            ]
          },
          "logical_equivalence": {
            "boolean_ops": [],
            "comparisons": [
              "LtE",
              "Eq",
              "Lt"
            ],
            "logical_patterns": []
          },
          "normalized_ast_structure": {
            "node_types": [
              "Module",
              "FunctionDef",
              "arguments",
              "arg",
              "arg",
              "Assign",
              "Tuple",
              "Name",
              "Store",
              "Name",
              "Store",
              "Store",
              "Tuple",
              "Constant",
              "BinOp",
              "Call",
              "Name",
              "Load",
              "Name",
              "Load",
              "Sub",
              "Constant",
              "Load",
              "While",
              "Compare",
              "Name",
              "Load",
              "LtE",
              "Name",
              "Load",
              "Assign",
              "Name",
              "Store",
              "BinOp",
              "Name",
              "Load",
              "Add",
              "BinOp",
              "BinOp",
              "Name",
              "Load",
              "Sub",
              "Name",
              "Load",
              "FloorDiv",
              "Constant",
              "If",
              "Compare",
              "Subscript",
              "Name",
              "Load",
              "Name",
              "Load",
              "Load",
              "Eq",
              "Name",
              "Load",
              "Return",
              "Name",
              "Load",
              "If",
              "Compare",
              "Subscript",
              "Name",
              "Load",
              "Name",
              "Load",
              "Load",
              "Lt",
              "Name",
              "Load",
              "Assign",
              "Name",
              "Store",
              "BinOp",
              "Name",
              "Load",
              "Add",
              "Constant",
              "Assign",
              "Name",
              "Store",
              "BinOp",
              "Name",
              "Load",
              "Sub",
              "Constant",
              "Return",
              "UnaryOp",
              "USub",
              "Constant"
            ],
            "ast_depth": 8,
            "ast_hash": "cc9a78bee99010845b8c21c16b9dd7ac",
            "alpha_renamed_hash": "0fbab2f8e335f1820a3c37404f4e8710"
          },
          "operator_precedence": {
            "operator_sequence": [
              "Sub",
              "Add",
              "FloorDiv",
              "Sub",
              "Add",
              "Sub"
            ],
            "precedence_levels": {
              "Sub": 3,
              "Add": 3,
              "FloorDiv": 4
            }
          },
          "statement_ordering": {
            "statement_types": [
              "FunctionDef",
              "Assign",
              "While",
              "Assign",
              "If",
              "Return",
              "If",
              "Assign",
              "Assign",
              "Return"
            ],
            "statement_sequence": [
              "FunctionDef_0",
              "Assign_1",
              "While_2",
              "Assign_3",
              "If_4",
              "Return_5",
              "If_6",
              "Assign_7",
              "Assign_8",
              "Return_9"
            ],
            "control_flow_order": [
              "FunctionDef",
              "While",
              "If",
              "If"
            ]
          },
          "behavioral_signature": {
            "can_execute": true,
            "io_signature_hash": "ca377392ba27f5bdaf360e84f2bd61ab",
            "side_effects_detected": [],
            "test_results": [
              [
                0,
                "Exception:TypeError",
                false
              ],
              [
                1,
                "Exception:TypeError",
                false
              ],
              [
                2,
                "Exception:TypeError",
                false
              ]
            ]
          },
          "recursion_schema": {
            "is_recursive": false,
            "base_cases": [],
            "recursive_calls": [],
            "recursion_pattern": null,
            "termination_guards": []
          }
        },
        {
          "control_flow_signature": {
            "if_statements": 2,
            "for_loops": 0,
            "while_loops": 1,
            "function_calls": [
              "len"
            ],
            "nested_depth": 3,
            "branch_patterns": [
              "if_at_depth_1",
              "if_at_depth_2"
            ]
          },
          "data_dependency_graph": {
            "dependencies": {
              "mid": [
                "left",
                "right"
              ],
              "left": [
                "mid"
              ],
              "right": [
                "mid"
              ]
            },
            "assignments": {
              "mid": "BinOp(left=BinOp(left=Name(id='left', ctx=Load()), op=Add(), right=Name(id='right', ctx=Load())), op=FloorDiv(), right=Constant(value=2))",
              "left": "BinOp(left=Name(id='mid', ctx=Load()), op=Add(), right=Constant(value=1))",
              "right": "BinOp(left=Name(id='mid', ctx=Load()), op=Sub(), right=Constant(value=1))"
            }
          },
          "execution_paths": {
            "execution_paths": [
              [
                "function_binary_search"
              ],
              [
                "function_binary_search",
                "branch"
              ],
              [
                "function_binary_search",
                "branch",
                "branch"
              ]
            ]
          },
          "function_contracts": {
            "binary_search": {
              "name": "binary_search",
              "args": [
                "sorted_list",
                "target"
              ],
              "returns": null,
              "has_return": true
            }
          },
          "complexity_class": {
            "nested_loops": 1,
            "recursive_calls": 0,
            "estimated_complexity": "O(n)"
          },
          "side_effect_profile": {
            "has_print": false,
            "has_global_access": false,
            "has_file_io": false,
            "modifies_arguments": false,
            "is_pure": true
          },
          "termination_properties": {
            "has_base_case": true,
            "has_bounded_loops": false,
            "recursive_depth": 0
          },
          "algebraic_structure": {
            "commutative_ops": [
              "Add",
              "Add"
            ],
            "associative_ops": [
              "Add",
              "Add"
            ],
            "binary_operations": [
              "Sub",
              "FloorDiv",
              "Add",
              "Add",
              "Sub"
            ]
          },
          "numerical_behavior": {
            "uses_integers": true,
            "uses_floats": false,
            "has_arithmetic": true,
            "numeric_constants": [
              0,
              1,
              2,
              1,
              1,
              1
            ]
          },
          "logical_equivalence": {
            "boolean_ops": [],
            "comparisons": [
              "LtE",
              "Eq",
              "Lt"
            ],
            "logical_patterns": []
          },
          "normalized_ast_structure": {
            "node_types": [
              "Module",
              "FunctionDef",
              "arguments",
              "arg",
              "arg",
              "Assign",
              "Tuple",
              "Name",
              "Store",
              "Name",
              "Store",
              "Store",
              "Tuple",
              "Constant",
              "BinOp",
              "Call",
              "Name",
              "Load",
              "Name",
              "Load",
              "Sub",
              "Constant",
              "Load",
              "While",
              "Compare",
              "Name",
              "Load",
              "LtE",
              "Name",
              "Load",
              "Assign",
              "Name",
              "Store",
              "BinOp",
              "BinOp",
              "Name",
              "Load",
              "Add",
              "Name",
              "Load",
              "FloorDiv",
              "Constant",
              "If",
              "Compare",
              "Subscript",
              "Name",
              "Load",
              "Name",
              "Load",
              "Load",
              "Eq",
              "Name",
              "Load",
              "Return",
              "Name",
              "Load",
              "If",
              "Compare",
              "Subscript",
              "Name",
              "Load",
              "Name",
              "Load",
              "Load",
              "Lt",
              "Name",
              "Load",
              "Assign",
              "Name",
              "Store",
              "BinOp",
              "Name",
              "Load",
              "Add",
              "Constant",
              "Assign",
              "Name",
              "Store",
              "BinOp",
              "Name",
              "Load",
              "Sub",
              "Constant",
              "Return",
              "UnaryOp",
              "USub",
              "Constant"
            ],
            "ast_depth": 8,
            "ast_hash": "1bc24f109a26cd93e357b4e2e4203159",
            "alpha_renamed_hash": "be261a4450505295910dc4ee9a9a40c3"
          },
          "operator_precedence": {
            "operator_sequence": [
              "Sub",
              "FloorDiv",
              "Add",
              "Add",
              "Sub"
            ],
            "precedence_levels": {
              "Sub": 3,
              "FloorDiv": 4,
              "Add": 3
            }
          },
          "statement_ordering": {
            "statement_types": [
              "FunctionDef",
              "Assign",
              "While",
              "Assign",
              "If",
              "Return",
              "If",
              "Assign",
              "Assign",
              "Return"
            ],
            "statement_sequence": [
              "FunctionDef_0",
              "Assign_1",
              "While_2",
              "Assign_3",
              "If_4",
              "Return_5",
              "If_6",
              "Assign_7",
              "Assign_8",
              "Return_9"
            ],
            "control_flow_order": [
              "FunctionDef",
              "While",
              "If",
              "If"
            ]
          },
          "behavioral_signature": {
            "can_execute": true,
            "io_signature_hash": "ca377392ba27f5bdaf360e84f2bd61ab",
            "side_effects_detected": [],
            "test_results": [
              [
                0,
                "Exception:TypeError",
                false
              ],
              [
                1,
                "Exception:TypeError",
                false
              ],
              [
                2,
                "Exception:TypeError",
                false
              ]
            ]
          },
          "recursion_schema": {
            "is_recursive": false,
            "base_cases": [],
            "recursive_calls": [],
            "recursion_pattern": null,
            "termination_guards": []
          }
        },
        {
          "control_flow_signature": {
            "if_statements": 2,
            "for_loops": 0,
            "while_loops": 1,
            "function_calls": [
              "len"
            ],
            "nested_depth": 3,
            "branch_patterns": [
              "if_at_depth_1",
              "if_at_depth_2"
            ]
          },
          "data_dependency_graph": {
            "dependencies": {
              "mid": [
                "left",
                "right"
              ],
              "left": [
                "mid"
              ],
              "right": [
                "mid"
              ]
            },
            "assignments": {
              "mid": "BinOp(left=Name(id='left', ctx=Load()), op=Add(), right=BinOp(left=BinOp(left=Name(id='right', ctx=Load()), op=Sub(), right=Name(id='left', ctx=Load())), op=FloorDiv(), right=Constant(value=2)))",
              "left": "BinOp(left=Name(id='mid', ctx=Load()), op=Add(), right=Constant(value=1))",
              "right": "BinOp(left=Name(id='mid', ctx=Load()), op=Sub(), right=Constant(value=1))"
            }
          },
          "execution_paths": {
            "execution_paths": [
              [
                "function_binary_search"
              ],
              [
                "function_binary_search",
                "branch"
              ],
              [
                "function_binary_search",
                "branch",
                "branch"
              ]
            ]
          },
          "function_contracts": {
            "binary_search": {
              "name": "binary_search",
              "args": [
                "sorted_list",
                "target"
              ],
              "returns": null,
              "has_return": true
            }
          },
          "complexity_class": {
            "nested_loops": 1,
            "recursive_calls": 0,
            "estimated_complexity": "O(n)"
          },
          "side_effect_profile": {
            "has_print": false,
            "has_global_access": false,
            "has_file_io": false,
            "modifies_arguments": false,
            "is_pure": true
          },
          "termination_properties": {
            "has_base_case": true,
            "has_bounded_loops": false,
            "recursive_depth": 0
          },
          "algebraic_structure": {
            "commutative_ops": [
              "Add",
              "Add"
            ],
            "associative_ops": [
              "Add",
              "Add"
            ],
            "binary_operations": [
              "Sub",
              "Add",
              "FloorDiv",
              "Sub",
              "Add",
              "Sub"
            ]
          },
          "numerical_behavior": {
            "uses_integers": true,
            "uses_floats": false,
            "has_arithmetic": true,
            "numeric_constants": [
              0,
              1,
              2,
              1,
              1,
              1
            ]
          },
          "logical_equivalence": {
            "boolean_ops": [],
            "comparisons": [
              "LtE",
              "Eq",
              "Lt"
            ],
            "logical_patterns": []
          },
          "normalized_ast_structure": {
            "node_types": [
              "Module",
              "FunctionDef",
              "arguments",
              "arg",
              "arg",
              "Assign",
              "Tuple",
              "Name",
              "Store",
              "Name",
              "Store",
              "Store",
              "Tuple",
              "Constant",
              "BinOp",
              "Call",
              "Name",
              "Load",
              "Name",
              "Load",
              "Sub",
              "Constant",
              "Load",
              "While",
              "Compare",
              "Name",
              "Load",
              "LtE",
              "Name",
              "Load",
              "Assign",
              "Name",
              "Store",
              "BinOp",
              "Name",
              "Load",
              "Add",
              "BinOp",
              "BinOp",
              "Name",
              "Load",
              "Sub",
              "Name",
              "Load",
              "FloorDiv",
              "Constant",
              "If",
              "Compare",
              "Subscript",
              "Name",
              "Load",
              "Name",
              "Load",
              "Load",
              "Eq",
              "Name",
              "Load",
              "Return",
              "Name",
              "Load",
              "If",
              "Compare",
              "Subscript",
              "Name",
              "Load",
              "Name",
              "Load",
              "Load",
              "Lt",
              "Name",
              "Load",
              "Assign",
              "Name",
              "Store",
              "BinOp",
              "Name",
              "Load",
              "Add",
              "Constant",
              "Assign",
              "Name",
              "Store",
              "BinOp",
              "Name",
              "Load",
              "Sub",
              "Constant",
              "Return",
              "UnaryOp",
              "USub",
              "Constant"
            ],
            "ast_depth": 8,
            "ast_hash": "cc9a78bee99010845b8c21c16b9dd7ac",
            "alpha_renamed_hash": "0fbab2f8e335f1820a3c37404f4e8710"
          },
          "operator_precedence": {
            "operator_sequence": [
              "Sub",
              "Add",
              "FloorDiv",
              "Sub",
              "Add",
              "Sub"
            ],
            "precedence_levels": {
              "Sub": 3,
              "Add": 3,
              "FloorDiv": 4
            }
          },
          "statement_ordering": {
            "statement_types": [
              "FunctionDef",
              "Assign",
              "While",
              "Assign",
              "If",
              "Return",
              "If",
              "Assign",
              "Assign",
              "Return"
            ],
            "statement_sequence": [
              "FunctionDef_0",
              "Assign_1",
              "While_2",
              "Assign_3",
              "If_4",
              "Return_5",
              "If_6",
              "Assign_7",
              "Assign_8",
              "Return_9"
            ],
            "control_flow_order": [
              "FunctionDef",
              "While",
              "If",
              "If"
            ]
          },
          "behavioral_signature": {
            "can_execute": true,
            "io_signature_hash": "ca377392ba27f5bdaf360e84f2bd61ab",
            "side_effects_detected": [],
            "test_results": [
              [
                0,
                "Exception:TypeError",
                false
              ],
              [
                1,
                "Exception:TypeError",
                false
              ],
              [
                2,
                "Exception:TypeError",
                false
              ]
            ]
          },
          "recursion_schema": {
            "is_recursive": false,
            "base_cases": [],
            "recursive_calls": [],
            "recursion_pattern": null,
            "termination_guards": []
          }
        },
        {
          "control_flow_signature": {
            "if_statements": 2,
            "for_loops": 0,
            "while_loops": 1,
            "function_calls": [
              "len"
            ],
            "nested_depth": 3,
            "branch_patterns": [
              "if_at_depth_1",
              "if_at_depth_2"
            ]
          },
          "data_dependency_graph": {
            "dependencies": {
              "mid": [
                "left",
                "right"
              ],
              "left": [
                "mid"
              ],
              "right": [
                "mid"
              ]
            },
            "assignments": {
              "mid": "BinOp(left=Name(id='left', ctx=Load()), op=Add(), right=BinOp(left=BinOp(left=Name(id='right', ctx=Load()), op=Sub(), right=Name(id='left', ctx=Load())), op=FloorDiv(), right=Constant(value=2)))",
              "left": "BinOp(left=Name(id='mid', ctx=Load()), op=Add(), right=Constant(value=1))",
              "right": "BinOp(left=Name(id='mid', ctx=Load()), op=Sub(), right=Constant(value=1))"
            }
          },
          "execution_paths": {
            "execution_paths": [
              [
                "function_binary_search"
              ],
              [
                "function_binary_search",
                "branch"
              ],
              [
                "function_binary_search",
                "branch",
                "branch"
              ]
            ]
          },
          "function_contracts": {
            "binary_search": {
              "name": "binary_search",
              "args": [
                "sorted_list",
                "target"
              ],
              "returns": null,
              "has_return": true
            }
          },
          "complexity_class": {
            "nested_loops": 1,
            "recursive_calls": 0,
            "estimated_complexity": "O(n)"
          },
          "side_effect_profile": {
            "has_print": false,
            "has_global_access": false,
            "has_file_io": false,
            "modifies_arguments": false,
            "is_pure": true
          },
          "termination_properties": {
            "has_base_case": true,
            "has_bounded_loops": false,
            "recursive_depth": 0
          },
          "algebraic_structure": {
            "commutative_ops": [
              "Add",
              "Add"
            ],
            "associative_ops": [
              "Add",
              "Add"
            ],
            "binary_operations": [
              "Sub",
              "Add",
              "FloorDiv",
              "Sub",
              "Add",
              "Sub"
            ]
          },
          "numerical_behavior": {
            "uses_integers": true,
            "uses_floats": false,
            "has_arithmetic": true,
            "numeric_constants": [
              0,
              1,
              2,
              1,
              1,
              1
            ]
          },
          "logical_equivalence": {
            "boolean_ops": [],
            "comparisons": [
              "LtE",
              "Eq",
              "Lt"
            ],
            "logical_patterns": []
          },
          "normalized_ast_structure": {
            "node_types": [
              "Module",
              "FunctionDef",
              "arguments",
              "arg",
              "arg",
              "Assign",
              "Tuple",
              "Name",
              "Store",
              "Name",
              "Store",
              "Store",
              "Tuple",
              "Constant",
              "BinOp",
              "Call",
              "Name",
              "Load",
              "Name",
              "Load",
              "Sub",
              "Constant",
              "Load",
              "While",
              "Compare",
              "Name",
              "Load",
              "LtE",
              "Name",
              "Load",
              "Assign",
              "Name",
              "Store",
              "BinOp",
              "Name",
              "Load",
              "Add",
              "BinOp",
              "BinOp",
              "Name",
              "Load",
              "Sub",
              "Name",
              "Load",
              "FloorDiv",
              "Constant",
              "If",
              "Compare",
              "Subscript",
              "Name",
              "Load",
              "Name",
              "Load",
              "Load",
              "Eq",
              "Name",
              "Load",
              "Return",
              "Name",
              "Load",
              "If",
              "Compare",
              "Subscript",
              "Name",
              "Load",
              "Name",
              "Load",
              "Load",
              "Lt",
              "Name",
              "Load",
              "Assign",
              "Name",
              "Store",
              "BinOp",
              "Name",
              "Load",
              "Add",
              "Constant",
              "Assign",
              "Name",
              "Store",
              "BinOp",
              "Name",
              "Load",
              "Sub",
              "Constant",
              "Return",
              "UnaryOp",
              "USub",
              "Constant"
            ],
            "ast_depth": 8,
            "ast_hash": "cc9a78bee99010845b8c21c16b9dd7ac",
            "alpha_renamed_hash": "0fbab2f8e335f1820a3c37404f4e8710"
          },
          "operator_precedence": {
            "operator_sequence": [
              "Sub",
              "Add",
              "FloorDiv",
              "Sub",
              "Add",
              "Sub"
            ],
            "precedence_levels": {
              "Sub": 3,
              "Add": 3,
              "FloorDiv": 4
            }
          },
          "statement_ordering": {
            "statement_types": [
              "FunctionDef",
              "Assign",
              "While",
              "Assign",
              "If",
              "Return",
              "If",
              "Assign",
              "Assign",
              "Return"
            ],
            "statement_sequence": [
              "FunctionDef_0",
              "Assign_1",
              "While_2",
              "Assign_3",
              "If_4",
              "Return_5",
              "If_6",
              "Assign_7",
              "Assign_8",
              "Return_9"
            ],
            "control_flow_order": [
              "FunctionDef",
              "While",
              "If",
              "If"
            ]
          },
          "behavioral_signature": {
            "can_execute": true,
            "io_signature_hash": "ca377392ba27f5bdaf360e84f2bd61ab",
            "side_effects_detected": [],
            "test_results": [
              [
                0,
                "Exception:TypeError",
                false
              ],
              [
                1,
                "Exception:TypeError",
                false
              ],
              [
                2,
                "Exception:TypeError",
                false
              ]
            ]
          },
          "recursion_schema": {
            "is_recursive": false,
            "base_cases": [],
            "recursive_calls": [],
            "recursion_pattern": null,
            "termination_guards": []
          }
        },
        {
          "control_flow_signature": {
            "if_statements": 2,
            "for_loops": 0,
            "while_loops": 1,
            "function_calls": [
              "len"
            ],
            "nested_depth": 3,
            "branch_patterns": [
              "if_at_depth_1",
              "if_at_depth_2"
            ]
          },
          "data_dependency_graph": {
            "dependencies": {
              "low": [
                "mid"
              ],
              "high": [
                "sorted_list",
                "mid"
              ],
              "mid": [
                "low",
                "high"
              ]
            },
            "assignments": {
              "low": "BinOp(left=Name(id='mid', ctx=Load()), op=Add(), right=Constant(value=1))",
              "high": "BinOp(left=Name(id='mid', ctx=Load()), op=Sub(), right=Constant(value=1))",
              "mid": "BinOp(left=BinOp(left=Name(id='low', ctx=Load()), op=Add(), right=Name(id='high', ctx=Load())), op=FloorDiv(), right=Constant(value=2))"
            }
          },
          "execution_paths": {
            "execution_paths": [
              [
                "function_binary_search"
              ],
              [
                "function_binary_search",
                "branch"
              ],
              [
                "function_binary_search",
                "branch",
                "branch"
              ]
            ]
          },
          "function_contracts": {
            "binary_search": {
              "name": "binary_search",
              "args": [
                "sorted_list",
                "target"
              ],
              "returns": null,
              "has_return": true
            }
          },
          "complexity_class": {
            "nested_loops": 1,
            "recursive_calls": 0,
            "estimated_complexity": "O(n)"
          },
          "side_effect_profile": {
            "has_print": false,
            "has_global_access": false,
            "has_file_io": false,
            "modifies_arguments": false,
            "is_pure": true
          },
          "termination_properties": {
            "has_base_case": true,
            "has_bounded_loops": false,
            "recursive_depth": 0
          },
          "algebraic_structure": {
            "commutative_ops": [
              "Add",
              "Add"
            ],
            "associative_ops": [
              "Add",
              "Add"
            ],
            "binary_operations": [
              "Sub",
              "FloorDiv",
              "Add",
              "Add",
              "Sub"
            ]
          },
          "numerical_behavior": {
            "uses_integers": true,
            "uses_floats": false,
            "has_arithmetic": true,
            "numeric_constants": [
              0,
              1,
              2,
              1,
              1,
              1
            ]
          },
          "logical_equivalence": {
            "boolean_ops": [],
            "comparisons": [
              "LtE",
              "Eq",
              "Lt"
            ],
            "logical_patterns": []
          },
          "normalized_ast_structure": {
            "node_types": [
              "Module",
              "FunctionDef",
              "arguments",
              "arg",
              "arg",
              "Assign",
              "Name",
              "Store",
              "Constant",
              "Assign",
              "Name",
              "Store",
              "BinOp",
              "Call",
              "Name",
              "Load",
              "Name",
              "Load",
              "Sub",
              "Constant",
              "While",
              "Compare",
              "Name",
              "Load",
              "LtE",
              "Name",
              "Load",
              "Assign",
              "Name",
              "Store",
              "BinOp",
              "BinOp",
              "Name",
              "Load",
              "Add",
              "Name",
              "Load",
              "FloorDiv",
              "Constant",
              "If",
              "Compare",
              "Subscript",
              "Name",
              "Load",
              "Name",
              "Load",
              "Load",
              "Eq",
              "Name",
              "Load",
              "Return",
              "Name",
              "Load",
              "If",
              "Compare",
              "Subscript",
              "Name",
              "Load",
              "Name",
              "Load",
              "Load",
              "Lt",
              "Name",
              "Load",
              "Assign",
              "Name",
              "Store",
              "BinOp",
              "Name",
              "Load",
              "Add",
              "Constant",
              "Assign",
              "Name",
              "Store",
              "BinOp",
              "Name",
              "Load",
              "Sub",
              "Constant",
              "Return",
              "UnaryOp",
              "USub",
              "Constant"
            ],
            "ast_depth": 8,
            "ast_hash": "6528a1686ce7e576a7dd8646b6c5f7ef",
            "alpha_renamed_hash": "336455f44d34c8072900173b6cbdbc26"
          },
          "operator_precedence": {
            "operator_sequence": [
              "Sub",
              "FloorDiv",
              "Add",
              "Add",
              "Sub"
            ],
            "precedence_levels": {
              "Sub": 3,
              "FloorDiv": 4,
              "Add": 3
            }
          },
          "statement_ordering": {
            "statement_types": [
              "FunctionDef",
              "Assign",
              "Assign",
              "While",
              "Assign",
              "If",
              "Return",
              "If",
              "Assign",
              "Assign",
              "Return"
            ],
            "statement_sequence": [
              "FunctionDef_0",
              "Assign_1",
              "Assign_2",
              "While_3",
              "Assign_4",
              "If_5",
              "Return_6",
              "If_7",
              "Assign_8",
              "Assign_9",
              "Return_10"
            ],
            "control_flow_order": [
              "FunctionDef",
              "While",
              "If",
              "If"
            ]
          },
          "behavioral_signature": {
            "can_execute": true,
            "io_signature_hash": "ca377392ba27f5bdaf360e84f2bd61ab",
            "side_effects_detected": [],
            "test_results": [
              [
                0,
                "Exception:TypeError",
                false
              ],
              [
                1,
                "Exception:TypeError",
                false
              ],
              [
                2,
                "Exception:TypeError",
                false
              ]
            ]
          },
          "recursion_schema": {
            "is_recursive": false,
            "base_cases": [],
            "recursive_calls": [],
            "recursion_pattern": null,
            "termination_guards": []
          }
        },
        {
          "control_flow_signature": {
            "if_statements": 2,
            "for_loops": 0,
            "while_loops": 1,
            "function_calls": [
              "len"
            ],
            "nested_depth": 3,
            "branch_patterns": [
              "if_at_depth_1",
              "if_at_depth_2"
            ]
          },
          "data_dependency_graph": {
            "dependencies": {
              "mid": [
                "low",
                "high"
              ],
              "low": [
                "mid"
              ],
              "high": [
                "mid"
              ]
            },
            "assignments": {
              "mid": "BinOp(left=BinOp(left=Name(id='low', ctx=Load()), op=Add(), right=Name(id='high', ctx=Load())), op=FloorDiv(), right=Constant(value=2))",
              "low": "BinOp(left=Name(id='mid', ctx=Load()), op=Add(), right=Constant(value=1))",
              "high": "BinOp(left=Name(id='mid', ctx=Load()), op=Sub(), right=Constant(value=1))"
            }
          },
          "execution_paths": {
            "execution_paths": [
              [
                "function_binary_search"
              ],
              [
                "function_binary_search",
                "branch"
              ],
              [
                "function_binary_search",
                "branch",
                "branch"
              ]
            ]
          },
          "function_contracts": {
            "binary_search": {
              "name": "binary_search",
              "args": [
                "sorted_list",
                "target"
              ],
              "returns": null,
              "has_return": true
            }
          },
          "complexity_class": {
            "nested_loops": 1,
            "recursive_calls": 0,
            "estimated_complexity": "O(n)"
          },
          "side_effect_profile": {
            "has_print": false,
            "has_global_access": false,
            "has_file_io": false,
            "modifies_arguments": false,
            "is_pure": true
          },
          "termination_properties": {
            "has_base_case": true,
            "has_bounded_loops": false,
            "recursive_depth": 0
          },
          "algebraic_structure": {
            "commutative_ops": [
              "Add",
              "Add"
            ],
            "associative_ops": [
              "Add",
              "Add"
            ],
            "binary_operations": [
              "Sub",
              "FloorDiv",
              "Add",
              "Add",
              "Sub"
            ]
          },
          "numerical_behavior": {
            "uses_integers": true,
            "uses_floats": false,
            "has_arithmetic": true,
            "numeric_constants": [
              0,
              1,
              2,
              1,
              1,
              1
            ]
          },
          "logical_equivalence": {
            "boolean_ops": [],
            "comparisons": [
              "LtE",
              "Eq",
              "Lt"
            ],
            "logical_patterns": []
          },
          "normalized_ast_structure": {
            "node_types": [
              "Module",
              "FunctionDef",
              "arguments",
              "arg",
              "arg",
              "Assign",
              "Tuple",
              "Name",
              "Store",
              "Name",
              "Store",
              "Store",
              "Tuple",
              "Constant",
              "BinOp",
              "Call",
              "Name",
              "Load",
              "Name",
              "Load",
              "Sub",
              "Constant",
              "Load",
              "While",
              "Compare",
              "Name",
              "Load",
              "LtE",
              "Name",
              "Load",
              "Assign",
              "Name",
              "Store",
              "BinOp",
              "BinOp",
              "Name",
              "Load",
              "Add",
              "Name",
              "Load",
              "FloorDiv",
              "Constant",
              "If",
              "Compare",
              "Subscript",
              "Name",
              "Load",
              "Name",
              "Load",
              "Load",
              "Eq",
              "Name",
              "Load",
              "Return",
              "Name",
              "Load",
              "If",
              "Compare",
              "Subscript",
              "Name",
              "Load",
              "Name",
              "Load",
              "Load",
              "Lt",
              "Name",
              "Load",
              "Assign",
              "Name",
              "Store",
              "BinOp",
              "Name",
              "Load",
              "Add",
              "Constant",
              "Assign",
              "Name",
              "Store",
              "BinOp",
              "Name",
              "Load",
              "Sub",
              "Constant",
              "Return",
              "UnaryOp",
              "USub",
              "Constant"
            ],
            "ast_depth": 8,
            "ast_hash": "298c8e7e4ab1987a3f4abe5121b09b98",
            "alpha_renamed_hash": "be261a4450505295910dc4ee9a9a40c3"
          },
          "operator_precedence": {
            "operator_sequence": [
              "Sub",
              "FloorDiv",
              "Add",
              "Add",
              "Sub"
            ],
            "precedence_levels": {
              "Sub": 3,
              "FloorDiv": 4,
              "Add": 3
            }
          },
          "statement_ordering": {
            "statement_types": [
              "FunctionDef",
              "Assign",
              "While",
              "Assign",
              "If",
              "Return",
              "If",
              "Assign",
              "Assign",
              "Return"
            ],
            "statement_sequence": [
              "FunctionDef_0",
              "Assign_1",
              "While_2",
              "Assign_3",
              "If_4",
              "Return_5",
              "If_6",
              "Assign_7",
              "Assign_8",
              "Return_9"
            ],
            "control_flow_order": [
              "FunctionDef",
              "While",
              "If",
              "If"
            ]
          },
          "behavioral_signature": {
            "can_execute": true,
            "io_signature_hash": "ca377392ba27f5bdaf360e84f2bd61ab",
            "side_effects_detected": [],
            "test_results": [
              [
                0,
                "Exception:TypeError",
                false
              ],
              [
                1,
                "Exception:TypeError",
                false
              ],
              [
                2,
                "Exception:TypeError",
                false
              ]
            ]
          },
          "recursion_schema": {
            "is_recursive": false,
            "base_cases": [],
            "recursive_calls": [],
            "recursion_pattern": null,
            "termination_guards": []
          }
        },
        {
          "control_flow_signature": {
            "if_statements": 2,
            "for_loops": 0,
            "while_loops": 1,
            "function_calls": [
              "len"
            ],
            "nested_depth": 3,
            "branch_patterns": [
              "if_at_depth_1",
              "if_at_depth_2"
            ]
          },
          "data_dependency_graph": {
            "dependencies": {
              "low": [
                "mid"
              ],
              "high": [
                "sorted_list",
                "mid"
              ],
              "mid": [
                "low",
                "high"
              ]
            },
            "assignments": {
              "low": "BinOp(left=Name(id='mid', ctx=Load()), op=Add(), right=Constant(value=1))",
              "high": "BinOp(left=Name(id='mid', ctx=Load()), op=Sub(), right=Constant(value=1))",
              "mid": "BinOp(left=BinOp(left=Name(id='low', ctx=Load()), op=Add(), right=Name(id='high', ctx=Load())), op=FloorDiv(), right=Constant(value=2))"
            }
          },
          "execution_paths": {
            "execution_paths": [
              [
                "function_binary_search"
              ],
              [
                "function_binary_search",
                "branch"
              ],
              [
                "function_binary_search",
                "branch",
                "branch"
              ]
            ]
          },
          "function_contracts": {
            "binary_search": {
              "name": "binary_search",
              "args": [
                "sorted_list",
                "target"
              ],
              "returns": null,
              "has_return": true
            }
          },
          "complexity_class": {
            "nested_loops": 1,
            "recursive_calls": 0,
            "estimated_complexity": "O(n)"
          },
          "side_effect_profile": {
            "has_print": false,
            "has_global_access": false,
            "has_file_io": false,
            "modifies_arguments": false,
            "is_pure": true
          },
          "termination_properties": {
            "has_base_case": true,
            "has_bounded_loops": false,
            "recursive_depth": 0
          },
          "algebraic_structure": {
            "commutative_ops": [
              "Add",
              "Add"
            ],
            "associative_ops": [
              "Add",
              "Add"
            ],
            "binary_operations": [
              "Sub",
              "FloorDiv",
              "Add",
              "Add",
              "Sub"
            ]
          },
          "numerical_behavior": {
            "uses_integers": true,
            "uses_floats": false,
            "has_arithmetic": true,
            "numeric_constants": [
              0,
              1,
              2,
              1,
              1,
              1
            ]
          },
          "logical_equivalence": {
            "boolean_ops": [],
            "comparisons": [
              "LtE",
              "Eq",
              "Lt"
            ],
            "logical_patterns": []
          },
          "normalized_ast_structure": {
            "node_types": [
              "Module",
              "FunctionDef",
              "arguments",
              "arg",
              "arg",
              "Assign",
              "Name",
              "Store",
              "Constant",
              "Assign",
              "Name",
              "Store",
              "BinOp",
              "Call",
              "Name",
              "Load",
              "Name",
              "Load",
              "Sub",
              "Constant",
              "While",
              "Compare",
              "Name",
              "Load",
              "LtE",
              "Name",
              "Load",
              "Assign",
              "Name",
              "Store",
              "BinOp",
              "BinOp",
              "Name",
              "Load",
              "Add",
              "Name",
              "Load",
              "FloorDiv",
              "Constant",
              "If",
              "Compare",
              "Subscript",
              "Name",
              "Load",
              "Name",
              "Load",
              "Load",
              "Eq",
              "Name",
              "Load",
              "Return",
              "Name",
              "Load",
              "If",
              "Compare",
              "Subscript",
              "Name",
              "Load",
              "Name",
              "Load",
              "Load",
              "Lt",
              "Name",
              "Load",
              "Assign",
              "Name",
              "Store",
              "BinOp",
              "Name",
              "Load",
              "Add",
              "Constant",
              "Assign",
              "Name",
              "Store",
              "BinOp",
              "Name",
              "Load",
              "Sub",
              "Constant",
              "Return",
              "UnaryOp",
              "USub",
              "Constant"
            ],
            "ast_depth": 8,
            "ast_hash": "6528a1686ce7e576a7dd8646b6c5f7ef",
            "alpha_renamed_hash": "336455f44d34c8072900173b6cbdbc26"
          },
          "operator_precedence": {
            "operator_sequence": [
              "Sub",
              "FloorDiv",
              "Add",
              "Add",
              "Sub"
            ],
            "precedence_levels": {
              "Sub": 3,
              "FloorDiv": 4,
              "Add": 3
            }
          },
          "statement_ordering": {
            "statement_types": [
              "FunctionDef",
              "Assign",
              "Assign",
              "While",
              "Assign",
              "If",
              "Return",
              "If",
              "Assign",
              "Assign",
              "Return"
            ],
            "statement_sequence": [
              "FunctionDef_0",
              "Assign_1",
              "Assign_2",
              "While_3",
              "Assign_4",
              "If_5",
              "Return_6",
              "If_7",
              "Assign_8",
              "Assign_9",
              "Return_10"
            ],
            "control_flow_order": [
              "FunctionDef",
              "While",
              "If",
              "If"
            ]
          },
          "behavioral_signature": {
            "can_execute": true,
            "io_signature_hash": "ca377392ba27f5bdaf360e84f2bd61ab",
            "side_effects_detected": [],
            "test_results": [
              [
                0,
                "Exception:TypeError",
                false
              ],
              [
                1,
                "Exception:TypeError",
                false
              ],
              [
                2,
                "Exception:TypeError",
                false
              ]
            ]
          },
          "recursion_schema": {
            "is_recursive": false,
            "base_cases": [],
            "recursive_calls": [],
            "recursion_pattern": null,
            "termination_guards": []
          }
        }
      ],
      "structural_groups": {
        "7871268694061228915_7815187081523229080_-7402097905413716202_7519896061122465735": [
          0,
          1,
          2,
          4
        ],
        "7871268694061228915_7815187081523229080_-7402097905413716202_2446605558488957398": [
          3,
          5,
          6
        ],
        "7871268694061228915_7815187081523229080_-7402097905413716202_409132158696053003": [
          7,
          9
        ],
        "7871268694061228915_7815187081523229080_-7402097905413716202_-5259240327710047274": [
          8
        ]
      },
      "distances_to_canon": [
        0.2111111111111111,
        0.2111111111111111,
        0.2111111111111111,
        0.3,
        0.2111111111111111,
        0.3,
        0.3,
        0.13333333333333333,
        0.24444444444444444,
        0.13333333333333333
      ],
      "mean_distance": 0.22555555555555556,
      "std_distance": 0.05901454099950889
    },
    "distance_variance": {
      "distances": [
        0.2111111111111111,
        0.2111111111111111,
        0.2111111111111111,
        0.3,
        0.2111111111111111,
        0.3,
        0.3,
        0.13333333333333333,
        0.24444444444444444,
        0.13333333333333333
      ],
      "mean": 0.22555555555555556,
      "std": 0.05901454099950889,
      "min": 0.13333333333333333,
      "max": 0.3,
      "variance": 0.0034827160493827156,
      "histogram_bins": [
        2,
        0,
        0,
        0,
        4,
        0,
        1,
        0,
        0,
        3
      ],
      "histogram_edges": [
        0.13333333333333333,
        0.15,
        0.16666666666666666,
        0.18333333333333335,
        0.2,
        0.21666666666666667,
        0.23333333333333334,
        0.25,
        0.26666666666666666,
        0.2833333333333333,
        0.3
      ]
    },
    "behavioral_improvement": -0.30000000000000004,
    "structural_improvement": 0.0,
    "total_improvement": 0.0
  },
  "bell_curve_analysis": {
    "plot_path": "outputs\\analysis\\bell_curve_binary_search_temp1.5.png",
    "statistics": {
      "mean": 0.22555555555555556,
      "std": 0.05901454099950889,
      "median": 0.2111111111111111,
      "min": 0.13333333333333333,
      "max": 0.3,
      "variance": 0.0034827160493827156,
      "skewness": -0.16362323823533584,
      "kurtosis": -1.0451499307430059,
      "percentiles": {
        "25th": 0.2111111111111111,
        "50th": 0.2111111111111111,
        "75th": 0.2861111111111111,
        "90th": 0.3,
        "95th": 0.3
      }
    },
    "normality_test": {
      "statistic": 0.8652666820502759,
      "p_value": 0.08800542709024384,
      "is_normal": "True"
    },
    "sample_size": 10
  },
  "hypothesis_evaluation": {
    "hypothesis": "SKYT improves LLM code repeatability through contract-driven canonicalization",
    "supported": false,
    "evidence": {
      "raw_repeatability": 0.4,
      "behavioral_improvement": -0.30000000000000004,
      "structural_improvement": 0.0,
      "total_improvement": 0.0
    },
    "conclusion": "Hypothesis NOT SUPPORTED: No significant improvement"
  }
}