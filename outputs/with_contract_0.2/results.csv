ts,prompt_id,run_id,model,temperature,raw_output,code,canon_code,raw_hash,canon_signature,structural_ok,canonicalization_ok,contract_pass,oracle_pass,notes,attempts,last_error,status,metrics_version,contract_id
1756744223.3763459,anchor_fib_v1,anchor_fib_v1_1756744223,gpt-4o-mini,0.2,"```python
def fibonacci(n=20):
    def fib_recursive(x):
        if x <= 1:
            return x
        else:
            return fib_recursive(x - 1) + fib_recursive(x - 2)

    return [fib_recursive(i) for i in range(n)]

# Example usage
print(fibonacci())
```","def fibonacci(n=20):
    def fib_recursive(x):
        if x <= 1:
            return x
        else:
            return fib_recursive(x - 1) + fib_recursive(x - 2)

    return [fib_recursive(i) for i in range(n)]

# Example usage
print(fibonacci())","def fibonacci(n=20):
    def fib_recursive(x):
        if x <= 1:
            return x
        else:
            return fib_recursive(x - 1) + fib_recursive(x - 2)
    return [fib_recursive(i) for i in range(n)]
print(fibonacci())",05097966f6073032,9ad2e02da2b5b9c4,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,anchor_fib_v1
1756744228.1317577,anchor_fib_v1,anchor_fib_v1_1756744228,gpt-4o-mini,0.2,"```python
def fibonacci(n=20, fib_list=None):
    if fib_list is None:
        fib_list = [0, 1]
    if len(fib_list) < n:
        fib_list.append(fib_list[-1] + fib_list[-2])
        return fibonacci(n, fib_list)
    return fib_list[:n]

# Example usage
print(fibonacci())
```","def fibonacci(n=20, fib_list=None):
    if fib_list is None:
        fib_list = [0, 1]
    if len(fib_list) < n:
        fib_list.append(fib_list[-1] + fib_list[-2])
        return fibonacci(n, fib_list)
    return fib_list[:n]

# Example usage
print(fibonacci())","def fibonacci(n=20, fib_list=None):
    if fib_list is None:
        fib_list = [0, 1]
    if len(fib_list) < n:
        fib_list.append(fib_list[-1] + fib_list[-2])
        return fibonacci(n, fib_list)
    return fib_list[:n]
print(fibonacci())",528bd28faa9ca9a8,f8a5a9c9a861533f,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,anchor_fib_v1
1756744230.3129356,anchor_fib_v1,anchor_fib_v1_1756744230,gpt-4o-mini,0.2,"```python
def fibonacci(n=20):
    def fib_recursive(x):
        if x <= 1:
            return x
        else:
            return fib_recursive(x - 1) + fib_recursive(x - 2)

    return [fib_recursive(i) for i in range(n)]

# Example usage
print(fibonacci())
```","def fibonacci(n=20):
    def fib_recursive(x):
        if x <= 1:
            return x
        else:
            return fib_recursive(x - 1) + fib_recursive(x - 2)

    return [fib_recursive(i) for i in range(n)]

# Example usage
print(fibonacci())","def fibonacci(n=20):
    def fib_recursive(x):
        if x <= 1:
            return x
        else:
            return fib_recursive(x - 1) + fib_recursive(x - 2)
    return [fib_recursive(i) for i in range(n)]
print(fibonacci())",05097966f6073032,9ad2e02da2b5b9c4,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,anchor_fib_v1
1756744232.8527405,anchor_fib_v1,anchor_fib_v1_1756744232,gpt-4o-mini,0.2,"```python
def fibonacci(n=20):
    def fib_recursive(x):
        if x <= 1:
            return x
        else:
            return fib_recursive(x - 1) + fib_recursive(x - 2)

    return [fib_recursive(i) for i in range(n)]

# Example usage
print(fibonacci())
```","def fibonacci(n=20):
    def fib_recursive(x):
        if x <= 1:
            return x
        else:
            return fib_recursive(x - 1) + fib_recursive(x - 2)

    return [fib_recursive(i) for i in range(n)]

# Example usage
print(fibonacci())","def fibonacci(n=20):
    def fib_recursive(x):
        if x <= 1:
            return x
        else:
            return fib_recursive(x - 1) + fib_recursive(x - 2)
    return [fib_recursive(i) for i in range(n)]
print(fibonacci())",05097966f6073032,9ad2e02da2b5b9c4,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,anchor_fib_v1
1756744236.4712265,anchor_fib_v1,anchor_fib_v1_1756744236,gpt-4o-mini,0.2,"```python
def fibonacci(n=20, fib_list=None):
    if fib_list is None:
        fib_list = [0, 1]
    if len(fib_list) < n:
        fib_list.append(fib_list[-1] + fib_list[-2])
        return fibonacci(n, fib_list)
    return fib_list[:n]

# Example usage
print(fibonacci())
```","def fibonacci(n=20, fib_list=None):
    if fib_list is None:
        fib_list = [0, 1]
    if len(fib_list) < n:
        fib_list.append(fib_list[-1] + fib_list[-2])
        return fibonacci(n, fib_list)
    return fib_list[:n]

# Example usage
print(fibonacci())","def fibonacci(n=20, fib_list=None):
    if fib_list is None:
        fib_list = [0, 1]
    if len(fib_list) < n:
        fib_list.append(fib_list[-1] + fib_list[-2])
        return fibonacci(n, fib_list)
    return fib_list[:n]
print(fibonacci())",528bd28faa9ca9a8,f8a5a9c9a861533f,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,anchor_fib_v1
1756744291.9756074,slugify_v1,slugify_v1_1756744291,gpt-4o-mini,0.2,"```python
import unicodedata
import re

def slugify(texts):
    def create_slug(text):
        # Normalize the text to remove accents
        text = unicodedata.normalize('NFKD', text)
        # Remove non-ASCII characters
        text = re.sub(r'[^\w\s-]', '', text)
        # Replace spaces and collapse multiple spaces
        text = re.sub(r'\s+', ' ', text).strip()
        # Convert to lowercase and replace spaces with '-'
        return re.sub(r'[-\s]+', '-', text.lower())

    return [create_slug(text) for text in texts]
```","import unicodedata
import re

def slugify(texts):
    def create_slug(text):
        # Normalize the text to remove accents
        text = unicodedata.normalize('NFKD', text)
        # Remove non-ASCII characters
        text = re.sub(r'[^\w\s-]', '', text)
        # Replace spaces and collapse multiple spaces
        text = re.sub(r'\s+', ' ', text).strip()
        # Convert to lowercase and replace spaces with '-'
        return re.sub(r'[-\s]+', '-', text.lower())

    return [create_slug(text) for text in texts]","import unicodedata
import re
def slugify(texts):
    def create_slug(text):
        text = unicodedata.normalize('NFKD', text)
        text = re.sub('[^\\w\\s-]', '', text)
        text = re.sub('\\s+', ' ', text).strip()
        return re.sub('[-\\s]+', '-', text.lower())
    return [create_slug(text) for text in texts]",1174ff72ef7426ff,95d74e726c044f66,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,slugify_v1
1756744296.3868148,slugify_v1,slugify_v1_1756744296,gpt-4o-mini,0.2,"```python
import unicodedata
import re

def slugify(texts):
    def clean_text(text):
        # Normalize the text to remove accents
        text = unicodedata.normalize('NFKD', text)
        # Remove non-ASCII characters
        text = re.sub(r'[^\w\s-]', '', text)
        # Replace spaces and collapse internal whitespace
        text = re.sub(r'\s+', ' ', text).strip()
        # Convert to lowercase and replace spaces with '-'
        text = text.lower().replace(' ', '-')
        return text

    return [clean_text(text) for text in texts]
```","import unicodedata
import re

def slugify(texts):
    def clean_text(text):
        # Normalize the text to remove accents
        text = unicodedata.normalize('NFKD', text)
        # Remove non-ASCII characters
        text = re.sub(r'[^\w\s-]', '', text)
        # Replace spaces and collapse internal whitespace
        text = re.sub(r'\s+', ' ', text).strip()
        # Convert to lowercase and replace spaces with '-'
        text = text.lower().replace(' ', '-')
        return text

    return [clean_text(text) for text in texts]","import unicodedata
import re
def slugify(texts):
    def clean_text(text):
        text = unicodedata.normalize('NFKD', text)
        text = re.sub('[^\\w\\s-]', '', text)
        text = re.sub('\\s+', ' ', text).strip()
        text = text.lower().replace(' ', '-')
        return text
    return [clean_text(text) for text in texts]",38aff53b168bf0ca,bff71574bd677799,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,slugify_v1
1756744300.3138573,slugify_v1,slugify_v1_1756744300,gpt-4o-mini,0.2,"```python
import unicodedata
import re

def slugify(texts):
    def create_slug(text):
        # Normalize the text to remove accents
        text = unicodedata.normalize('NFKD', text)
        # Remove unwanted characters and collapse whitespace
        text = re.sub(r'[^a-zA-Z0-9\s-]', '', text)
        text = re.sub(r'\s+', ' ', text).strip()
        # Convert to lowercase and replace spaces with '-'
        text = text.lower().replace(' ', '-')
        return text

    return [create_slug(text) for text in texts]
```","import unicodedata
import re

def slugify(texts):
    def create_slug(text):
        # Normalize the text to remove accents
        text = unicodedata.normalize('NFKD', text)
        # Remove unwanted characters and collapse whitespace
        text = re.sub(r'[^a-zA-Z0-9\s-]', '', text)
        text = re.sub(r'\s+', ' ', text).strip()
        # Convert to lowercase and replace spaces with '-'
        text = text.lower().replace(' ', '-')
        return text

    return [create_slug(text) for text in texts]","import unicodedata
import re
def slugify(texts):
    def create_slug(text):
        text = unicodedata.normalize('NFKD', text)
        text = re.sub('[^a-zA-Z0-9\\s-]', '', text)
        text = re.sub('\\s+', ' ', text).strip()
        text = text.lower().replace(' ', '-')
        return text
    return [create_slug(text) for text in texts]",817a35f6573e39df,ba975a098a21e621,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,slugify_v1
1756744304.5553432,slugify_v1,slugify_v1_1756744304,gpt-4o-mini,0.2,"```python
import unicodedata
import re

def slugify(texts):
    def create_slug(text):
        # Normalize the text to remove accents
        text = unicodedata.normalize('NFKD', text)
        # Remove unwanted characters and replace spaces with '-'
        text = re.sub(r'[^a-zA-Z0-9\s-]', '', text)
        # Collapse internal whitespace to single spaces
        text = re.sub(r'\s+', ' ', text).strip()
        # Replace spaces with '-'
        text = text.replace(' ', '-')
        # Convert to lowercase
        return text.lower()
    
    return [create_slug(text) for text in texts]
```","import unicodedata
import re

def slugify(texts):
    def create_slug(text):
        # Normalize the text to remove accents
        text = unicodedata.normalize('NFKD', text)
        # Remove unwanted characters and replace spaces with '-'
        text = re.sub(r'[^a-zA-Z0-9\s-]', '', text)
        # Collapse internal whitespace to single spaces
        text = re.sub(r'\s+', ' ', text).strip()
        # Replace spaces with '-'
        text = text.replace(' ', '-')
        # Convert to lowercase
        return text.lower()
    
    return [create_slug(text) for text in texts]","import unicodedata
import re
def slugify(texts):
    def create_slug(text):
        text = unicodedata.normalize('NFKD', text)
        text = re.sub('[^a-zA-Z0-9\\s-]', '', text)
        text = re.sub('\\s+', ' ', text).strip()
        text = text.replace(' ', '-')
        return text.lower()
    return [create_slug(text) for text in texts]",2f0365366ed67d20,25d5cc324cdaebbd,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,slugify_v1
1756744307.2600465,slugify_v1,slugify_v1_1756744307,gpt-4o-mini,0.2,"```python
import unicodedata
import re

def slugify(texts):
    def to_slug(text):
        text = unicodedata.normalize('NFKD', text)
        text = re.sub(r'[^\w\s-]', '', text)
        text = re.sub(r'[-\s]+', '-', text).strip('-')
        return text.lower()

    return [to_slug(text) for text in texts]
```","import unicodedata
import re

def slugify(texts):
    def to_slug(text):
        text = unicodedata.normalize('NFKD', text)
        text = re.sub(r'[^\w\s-]', '', text)
        text = re.sub(r'[-\s]+', '-', text).strip('-')
        return text.lower()

    return [to_slug(text) for text in texts]","import unicodedata
import re
def slugify(texts):
    def to_slug(text):
        text = unicodedata.normalize('NFKD', text)
        text = re.sub('[^\\w\\s-]', '', text)
        text = re.sub('[-\\s]+', '-', text).strip('-')
        return text.lower()
    return [to_slug(text) for text in texts]",7624257a7acbee5d,221b9e00359eeb39,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,slugify_v1
1756744363.5921843,slugify_v2,slugify_v2_1756744363,gpt-4o-mini,0.2,"```python
import unicodedata
import re

def slugify(texts):
    def normalize_and_slugify(text):
        # Normalize to NFKD
        normalized = unicodedata.normalize('NFKD', text)
        # Remove diacritics
        no_diacritics = normalized.encode('ascii', 'ignore').decode('utf-8')
        # Strip, collapse spaces, lower, and replace spaces with '-'
        slug = re.sub(r'\s+', '-', no_diacritics.strip().lower())
        # Remove characters not in [a-z0-9-]
        slug = re.sub(r'[^a-z0-9-]', '', slug)
        return slug

    return [normalize_and_slugify(text) for text in texts]
```","import unicodedata
import re

def slugify(texts):
    def normalize_and_slugify(text):
        # Normalize to NFKD
        normalized = unicodedata.normalize('NFKD', text)
        # Remove diacritics
        no_diacritics = normalized.encode('ascii', 'ignore').decode('utf-8')
        # Strip, collapse spaces, lower, and replace spaces with '-'
        slug = re.sub(r'\s+', '-', no_diacritics.strip().lower())
        # Remove characters not in [a-z0-9-]
        slug = re.sub(r'[^a-z0-9-]', '', slug)
        return slug

    return [normalize_and_slugify(text) for text in texts]","import unicodedata
import re
def slugify(texts):
    def normalize_and_slugify(text):
        normalized = unicodedata.normalize('NFKD', text)
        no_diacritics = normalized.encode('ascii', 'ignore').decode('utf-8')
        slug = re.sub('\\s+', '-', no_diacritics.strip().lower())
        slug = re.sub('[^a-z0-9-]', '', slug)
        return slug
    return [normalize_and_slugify(text) for text in texts]",4f52894c4adeeb0d,dfc592cc1f9cf533,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,slugify_v2
1756744368.3815405,slugify_v2,slugify_v2_1756744368,gpt-4o-mini,0.2,"```python
import unicodedata
import re

def slugify(texts):
    def normalize_and_slugify(text):
        # Normalize to NFKD and remove diacritics
        normalized = unicodedata.normalize('NFKD', text)
        # Encode to ASCII and decode back to string, removing non-ASCII characters
        ascii_text = normalized.encode('ascii', 'ignore').decode('utf-8')
        # Lowercase, strip, and replace spaces with hyphens
        slug = re.sub(r'\s+', '-', ascii_text.strip().lower())
        # Remove characters not in [a-z0-9-]
        slug = re.sub(r'[^a-z0-9-]', '', slug)
        return slug

    return [normalize_and_slugify(text) for text in texts]
```","import unicodedata
import re

def slugify(texts):
    def normalize_and_slugify(text):
        # Normalize to NFKD and remove diacritics
        normalized = unicodedata.normalize('NFKD', text)
        # Encode to ASCII and decode back to string, removing non-ASCII characters
        ascii_text = normalized.encode('ascii', 'ignore').decode('utf-8')
        # Lowercase, strip, and replace spaces with hyphens
        slug = re.sub(r'\s+', '-', ascii_text.strip().lower())
        # Remove characters not in [a-z0-9-]
        slug = re.sub(r'[^a-z0-9-]', '', slug)
        return slug

    return [normalize_and_slugify(text) for text in texts]","import unicodedata
import re
def slugify(texts):
    def normalize_and_slugify(text):
        normalized = unicodedata.normalize('NFKD', text)
        ascii_text = normalized.encode('ascii', 'ignore').decode('utf-8')
        slug = re.sub('\\s+', '-', ascii_text.strip().lower())
        slug = re.sub('[^a-z0-9-]', '', slug)
        return slug
    return [normalize_and_slugify(text) for text in texts]",a9be0be4d9703843,eb2304c648f21a0e,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,slugify_v2
1756744370.7172935,slugify_v2,slugify_v2_1756744370,gpt-4o-mini,0.2,"```python
import unicodedata
import re

def slugify(texts):
    def normalize_and_slugify(text):
        # Normalize to NFKD
        normalized = unicodedata.normalize('NFKD', text)
        # Remove diacritics and unwanted characters
        cleaned = re.sub(r'[^a-zA-Z0-9\s]', '', normalized)
        # Strip, collapse spaces, lower, and replace spaces with '-'
        slug = re.sub(r'\s+', '-', cleaned.strip().lower())
        return slug

    return [normalize_and_slugify(text) for text in texts]
```","import unicodedata
import re

def slugify(texts):
    def normalize_and_slugify(text):
        # Normalize to NFKD
        normalized = unicodedata.normalize('NFKD', text)
        # Remove diacritics and unwanted characters
        cleaned = re.sub(r'[^a-zA-Z0-9\s]', '', normalized)
        # Strip, collapse spaces, lower, and replace spaces with '-'
        slug = re.sub(r'\s+', '-', cleaned.strip().lower())
        return slug

    return [normalize_and_slugify(text) for text in texts]","import unicodedata
import re
def slugify(texts):
    def normalize_and_slugify(text):
        normalized = unicodedata.normalize('NFKD', text)
        cleaned = re.sub('[^a-zA-Z0-9\\s]', '', normalized)
        slug = re.sub('\\s+', '-', cleaned.strip().lower())
        return slug
    return [normalize_and_slugify(text) for text in texts]",2da355be32872ac8,dc0e1ef3791df840,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,slugify_v2
1756744373.2713945,slugify_v2,slugify_v2_1756744373,gpt-4o-mini,0.2,"```python
import unicodedata
import re

def slugify(texts):
    def normalize_and_slugify(text):
        # Normalize to NFKD
        normalized = unicodedata.normalize('NFKD', text)
        # Remove diacritics
        no_diacritics = normalized.encode('ascii', 'ignore').decode('utf-8')
        # Strip, collapse spaces, lower, replace spaces with '-', and remove unwanted characters
        slug = re.sub(r'[^a-zA-Z0-9\s-]', '', no_diacritics)
        slug = re.sub(r'\s+', '-', slug.strip().lower())
        return slug

    return [normalize_and_slugify(text) for text in texts]
```","import unicodedata
import re

def slugify(texts):
    def normalize_and_slugify(text):
        # Normalize to NFKD
        normalized = unicodedata.normalize('NFKD', text)
        # Remove diacritics
        no_diacritics = normalized.encode('ascii', 'ignore').decode('utf-8')
        # Strip, collapse spaces, lower, replace spaces with '-', and remove unwanted characters
        slug = re.sub(r'[^a-zA-Z0-9\s-]', '', no_diacritics)
        slug = re.sub(r'\s+', '-', slug.strip().lower())
        return slug

    return [normalize_and_slugify(text) for text in texts]","import unicodedata
import re
def slugify(texts):
    def normalize_and_slugify(text):
        normalized = unicodedata.normalize('NFKD', text)
        no_diacritics = normalized.encode('ascii', 'ignore').decode('utf-8')
        slug = re.sub('[^a-zA-Z0-9\\s-]', '', no_diacritics)
        slug = re.sub('\\s+', '-', slug.strip().lower())
        return slug
    return [normalize_and_slugify(text) for text in texts]",bd48c5f2309cbc2a,ba75a1219896b3cd,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,slugify_v2
1756744375.691542,slugify_v2,slugify_v2_1756744375,gpt-4o-mini,0.2,"```python
import unicodedata
import re

def slugify(texts):
    def normalize_and_slugify(text):
        # Normalize to NFKD
        normalized = unicodedata.normalize('NFKD', text)
        # Remove diacritics and unwanted characters
        cleaned = re.sub(r'[^\w\s-]', '', normalized)
        # Strip, collapse spaces, lower, and replace spaces with '-'
        slug = re.sub(r'\s+', '-', cleaned.strip().lower())
        return slug
    
    return [normalize_and_slugify(text) for text in texts]
```","import unicodedata
import re

def slugify(texts):
    def normalize_and_slugify(text):
        # Normalize to NFKD
        normalized = unicodedata.normalize('NFKD', text)
        # Remove diacritics and unwanted characters
        cleaned = re.sub(r'[^\w\s-]', '', normalized)
        # Strip, collapse spaces, lower, and replace spaces with '-'
        slug = re.sub(r'\s+', '-', cleaned.strip().lower())
        return slug
    
    return [normalize_and_slugify(text) for text in texts]","import unicodedata
import re
def slugify(texts):
    def normalize_and_slugify(text):
        normalized = unicodedata.normalize('NFKD', text)
        cleaned = re.sub('[^\\w\\s-]', '', normalized)
        slug = re.sub('\\s+', '-', cleaned.strip().lower())
        return slug
    return [normalize_and_slugify(text) for text in texts]",cd311214e4872f4b,09fcbd5a8e62a260,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,slugify_v2
1756744423.4801812,csvjson_v1,csvjson_v1_1756744423,gpt-4o-mini,0.2,"```python
def csv_to_json(csv_text):
    lines = csv_text.strip().split('\n')
    headers = lines[0].split(',')
    result = []
    
    for line in lines[1:]:
        values = line.split(',')
        entry = {headers[i]: values[i] for i in range(len(headers))}
        result.append(entry)
    
    return result
```","def csv_to_json(csv_text):
    lines = csv_text.strip().split('\n')
    headers = lines[0].split(',')
    result = []
    
    for line in lines[1:]:
        values = line.split(',')
        entry = {headers[i]: values[i] for i in range(len(headers))}
        result.append(entry)
    
    return result","def csv_to_json(csv_text):
    lines = csv_text.strip().split('\n')
    headers = lines[0].split(',')
    result = []
    for line in lines[1:]:
        values = line.split(',')
        entry = {headers[i]: values[i] for i in range(len(headers))}
        result.append(entry)
    return result",df9e7900c2e3f3e3,27efb277124c588f,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,csvjson_v1
1756744425.7172644,csvjson_v1,csvjson_v1_1756744425,gpt-4o-mini,0.2,"```python
def csv_to_json(csv_text):
    lines = csv_text.strip().split('\n')
    headers = lines[0].split(',')
    result = []
    
    for line in lines[1:]:
        values = line.split(',')
        entry = {headers[i]: values[i] for i in range(len(headers))}
        result.append(entry)
    
    return result
```","def csv_to_json(csv_text):
    lines = csv_text.strip().split('\n')
    headers = lines[0].split(',')
    result = []
    
    for line in lines[1:]:
        values = line.split(',')
        entry = {headers[i]: values[i] for i in range(len(headers))}
        result.append(entry)
    
    return result","def csv_to_json(csv_text):
    lines = csv_text.strip().split('\n')
    headers = lines[0].split(',')
    result = []
    for line in lines[1:]:
        values = line.split(',')
        entry = {headers[i]: values[i] for i in range(len(headers))}
        result.append(entry)
    return result",df9e7900c2e3f3e3,27efb277124c588f,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,csvjson_v1
1756744428.0845046,csvjson_v1,csvjson_v1_1756744428,gpt-4o-mini,0.2,"```python
def csv_to_json(csv_text):
    lines = csv_text.strip().split('\n')
    headers = lines[0].split(',')
    result = []
    
    for line in lines[1:]:
        values = line.split(',')
        entry = {headers[i]: values[i] for i in range(len(headers))}
        result.append(entry)
    
    return result
```","def csv_to_json(csv_text):
    lines = csv_text.strip().split('\n')
    headers = lines[0].split(',')
    result = []
    
    for line in lines[1:]:
        values = line.split(',')
        entry = {headers[i]: values[i] for i in range(len(headers))}
        result.append(entry)
    
    return result","def csv_to_json(csv_text):
    lines = csv_text.strip().split('\n')
    headers = lines[0].split(',')
    result = []
    for line in lines[1:]:
        values = line.split(',')
        entry = {headers[i]: values[i] for i in range(len(headers))}
        result.append(entry)
    return result",df9e7900c2e3f3e3,27efb277124c588f,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,csvjson_v1
1756744430.2677994,csvjson_v1,csvjson_v1_1756744430,gpt-4o-mini,0.2,"```python
def csv_to_json(csv_text):
    lines = csv_text.strip().split('\n')
    headers = lines[0].split(',')
    result = []
    
    for line in lines[1:]:
        values = line.split(',')
        entry = {headers[i]: values[i] for i in range(len(headers))}
        result.append(entry)
    
    return result
```","def csv_to_json(csv_text):
    lines = csv_text.strip().split('\n')
    headers = lines[0].split(',')
    result = []
    
    for line in lines[1:]:
        values = line.split(',')
        entry = {headers[i]: values[i] for i in range(len(headers))}
        result.append(entry)
    
    return result","def csv_to_json(csv_text):
    lines = csv_text.strip().split('\n')
    headers = lines[0].split(',')
    result = []
    for line in lines[1:]:
        values = line.split(',')
        entry = {headers[i]: values[i] for i in range(len(headers))}
        result.append(entry)
    return result",df9e7900c2e3f3e3,27efb277124c588f,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,csvjson_v1
1756744432.8572114,csvjson_v1,csvjson_v1_1756744432,gpt-4o-mini,0.2,"```python
def csv_to_json(csv_text):
    lines = csv_text.strip().split('\n')
    headers = lines[0].split(',')
    result = []
    
    for line in lines[1:]:
        values = line.split(',')
        entry = {headers[i]: values[i] for i in range(len(headers))}
        result.append(entry)
    
    return result
```","def csv_to_json(csv_text):
    lines = csv_text.strip().split('\n')
    headers = lines[0].split(',')
    result = []
    
    for line in lines[1:]:
        values = line.split(',')
        entry = {headers[i]: values[i] for i in range(len(headers))}
        result.append(entry)
    
    return result","def csv_to_json(csv_text):
    lines = csv_text.strip().split('\n')
    headers = lines[0].split(',')
    result = []
    for line in lines[1:]:
        values = line.split(',')
        entry = {headers[i]: values[i] for i in range(len(headers))}
        result.append(entry)
    return result",df9e7900c2e3f3e3,27efb277124c588f,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,csvjson_v1
1756744472.8287156,csvjson_v2,csvjson_v2_1756744472,gpt-4o-mini,0.2,"```python
def csv_to_json(csv_text) -> list[dict[str, str]]:
    lines = csv_text.strip().split('\n')
    header = lines[0].split(',')
    result = []
    
    for line in lines[1:]:
        values = line.split(',')
        row_dict = {header[i]: values[i] for i in range(len(header))}
        result.append(row_dict)
    
    return result
```","def csv_to_json(csv_text) -> list[dict[str, str]]:
    lines = csv_text.strip().split('\n')
    header = lines[0].split(',')
    result = []
    
    for line in lines[1:]:
        values = line.split(',')
        row_dict = {header[i]: values[i] for i in range(len(header))}
        result.append(row_dict)
    
    return result","def csv_to_json(csv_text) -> list[dict[str, str]]:
    lines = csv_text.strip().split('\n')
    header = lines[0].split(',')
    result = []
    for line in lines[1:]:
        values = line.split(',')
        row_dict = {header[i]: values[i] for i in range(len(header))}
        result.append(row_dict)
    return result",2cb250033f5517be,50e05b819f231be6,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,csvjson_v2
1756744475.0778253,csvjson_v2,csvjson_v2_1756744475,gpt-4o-mini,0.2,"```python
def csv_to_json(csv_text):
    lines = csv_text.strip().split('\n')
    header = lines[0].split(',')
    result = []
    
    for line in lines[1:]:
        values = line.split(',')
        result.append({header[i]: values[i] for i in range(len(header))})
    
    return result
```","def csv_to_json(csv_text):
    lines = csv_text.strip().split('\n')
    header = lines[0].split(',')
    result = []
    
    for line in lines[1:]:
        values = line.split(',')
        result.append({header[i]: values[i] for i in range(len(header))})
    
    return result","def csv_to_json(csv_text):
    lines = csv_text.strip().split('\n')
    header = lines[0].split(',')
    result = []
    for line in lines[1:]:
        values = line.split(',')
        result.append({header[i]: values[i] for i in range(len(header))})
    return result",6288e42469517c59,f9a4afbca9f24b2d,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,csvjson_v2
1756744479.704175,csvjson_v2,csvjson_v2_1756744479,gpt-4o-mini,0.2,"```python
def csv_to_json(csv_text) -> list[dict[str, str]]:
    lines = csv_text.strip().split('\n')
    header = lines[0].split(',')
    result = []

    for line in lines[1:]:
        values = line.split(',')
        result.append({header[i]: values[i] for i in range(len(header))})

    return result
```","def csv_to_json(csv_text) -> list[dict[str, str]]:
    lines = csv_text.strip().split('\n')
    header = lines[0].split(',')
    result = []

    for line in lines[1:]:
        values = line.split(',')
        result.append({header[i]: values[i] for i in range(len(header))})

    return result","def csv_to_json(csv_text) -> list[dict[str, str]]:
    lines = csv_text.strip().split('\n')
    header = lines[0].split(',')
    result = []
    for line in lines[1:]:
        values = line.split(',')
        result.append({header[i]: values[i] for i in range(len(header))})
    return result",82c8457b0136b2f8,e2cfb185cc0956f6,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,csvjson_v2
1756744481.9544759,csvjson_v2,csvjson_v2_1756744481,gpt-4o-mini,0.2,"```python
def csv_to_json(csv_text):
    lines = csv_text.strip().split('\n')
    header = lines[0].split(',')
    json_list = []
    
    for line in lines[1:]:
        values = line.split(',')
        json_list.append({header[i]: values[i] for i in range(len(header))})
    
    return json_list
```","def csv_to_json(csv_text):
    lines = csv_text.strip().split('\n')
    header = lines[0].split(',')
    json_list = []
    
    for line in lines[1:]:
        values = line.split(',')
        json_list.append({header[i]: values[i] for i in range(len(header))})
    
    return json_list","def csv_to_json(csv_text):
    lines = csv_text.strip().split('\n')
    header = lines[0].split(',')
    json_list = []
    for line in lines[1:]:
        values = line.split(',')
        json_list.append({header[i]: values[i] for i in range(len(header))})
    return json_list",c127b953e3fb1c1c,a308aa9a63e66248,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,csvjson_v2
1756744484.9444766,csvjson_v2,csvjson_v2_1756744484,gpt-4o-mini,0.2,"```python
def csv_to_json(csv_text) -> list[dict[str, str]]:
    lines = csv_text.strip().split('\n')
    header = lines[0].split(',')
    result = []
    
    for line in lines[1:]:
        values = line.split(',')
        row_dict = {header[i]: values[i] for i in range(len(header))}
        result.append(row_dict)
    
    return result
```","def csv_to_json(csv_text) -> list[dict[str, str]]:
    lines = csv_text.strip().split('\n')
    header = lines[0].split(',')
    result = []
    
    for line in lines[1:]:
        values = line.split(',')
        row_dict = {header[i]: values[i] for i in range(len(header))}
        result.append(row_dict)
    
    return result","def csv_to_json(csv_text) -> list[dict[str, str]]:
    lines = csv_text.strip().split('\n')
    header = lines[0].split(',')
    result = []
    for line in lines[1:]:
        values = line.split(',')
        row_dict = {header[i]: values[i] for i in range(len(header))}
        result.append(row_dict)
    return result",2cb250033f5517be,50e05b819f231be6,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,csvjson_v2
1756744519.7202823,brackets_v1,brackets_v1_1756744519,gpt-4o-mini,0.2,"```python
def is_balanced(s):
    stack = []
    bracket_map = {')': '(', ']': '[', '}': '{'}
    open_brackets = bracket_map.values()

    for char in s:
        if char in open_brackets:
            stack.append(char)
        elif char in bracket_map:
            if not stack or stack.pop() != bracket_map[char]:
                return False

    return not stack
```","def is_balanced(s):
    stack = []
    bracket_map = {')': '(', ']': '[', '}': '{'}
    open_brackets = bracket_map.values()

    for char in s:
        if char in open_brackets:
            stack.append(char)
        elif char in bracket_map:
            if not stack or stack.pop() != bracket_map[char]:
                return False

    return not stack","def is_balanced(s):
    stack = []
    bracket_map = {')': '(', ']': '[', '}': '{'}
    open_brackets = bracket_map.values()
    for char in s:
        if char in open_brackets:
            stack.append(char)
        elif char in bracket_map:
            if not stack or stack.pop() != bracket_map[char]:
                return False
    return not stack",9734c8ce38f9fca2,fc2336850d3290b1,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,brackets_v1
1756744521.9937863,brackets_v1,brackets_v1_1756744521,gpt-4o-mini,0.2,"```python
def is_balanced(s):
    stack = []
    brackets = {')': '(', ']': '[', '}': '{'}
    
    for char in s:
        if char in brackets.values():
            stack.append(char)
        elif char in brackets.keys():
            if not stack or stack.pop() != brackets[char]:
                return False
    
    return len(stack) == 0
```","def is_balanced(s):
    stack = []
    brackets = {')': '(', ']': '[', '}': '{'}
    
    for char in s:
        if char in brackets.values():
            stack.append(char)
        elif char in brackets.keys():
            if not stack or stack.pop() != brackets[char]:
                return False
    
    return len(stack) == 0","def is_balanced(s):
    stack = []
    brackets = {')': '(', ']': '[', '}': '{'}
    for char in s:
        if char in brackets.values():
            stack.append(char)
        elif char in brackets.keys():
            if not stack or stack.pop() != brackets[char]:
                return False
    return len(stack) == 0",7dac20d60badb6f9,575ed40b22d69af4,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,brackets_v1
1756744524.552955,brackets_v1,brackets_v1_1756744524,gpt-4o-mini,0.2,"```python
def is_balanced(s):
    stack = []
    brackets = {')': '(', ']': '[', '}': '{'}
    
    for char in s:
        if char in brackets.values():
            stack.append(char)
        elif char in brackets.keys():
            if not stack or stack.pop() != brackets[char]:
                return False
                
    return not stack
```","def is_balanced(s):
    stack = []
    brackets = {')': '(', ']': '[', '}': '{'}
    
    for char in s:
        if char in brackets.values():
            stack.append(char)
        elif char in brackets.keys():
            if not stack or stack.pop() != brackets[char]:
                return False
                
    return not stack","def is_balanced(s):
    stack = []
    brackets = {')': '(', ']': '[', '}': '{'}
    for char in s:
        if char in brackets.values():
            stack.append(char)
        elif char in brackets.keys():
            if not stack or stack.pop() != brackets[char]:
                return False
    return not stack",c9606186035f84d1,08d608547462d16a,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,brackets_v1
1756744526.9706516,brackets_v1,brackets_v1_1756744526,gpt-4o-mini,0.2,"```python
def is_balanced(s):
    stack = []
    brackets = {')': '(', ']': '[', '}': '{'}
    
    for char in s:
        if char in brackets.values():
            stack.append(char)
        elif char in brackets.keys():
            if not stack or stack.pop() != brackets[char]:
                return False
    
    return len(stack) == 0
```","def is_balanced(s):
    stack = []
    brackets = {')': '(', ']': '[', '}': '{'}
    
    for char in s:
        if char in brackets.values():
            stack.append(char)
        elif char in brackets.keys():
            if not stack or stack.pop() != brackets[char]:
                return False
    
    return len(stack) == 0","def is_balanced(s):
    stack = []
    brackets = {')': '(', ']': '[', '}': '{'}
    for char in s:
        if char in brackets.values():
            stack.append(char)
        elif char in brackets.keys():
            if not stack or stack.pop() != brackets[char]:
                return False
    return len(stack) == 0",7dac20d60badb6f9,575ed40b22d69af4,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,brackets_v1
1756744529.1666486,brackets_v1,brackets_v1_1756744529,gpt-4o-mini,0.2,"```python
def is_balanced(s):
    stack = []
    mapping = {')': '(', ']': '[', '}': '{'}
    
    for char in s:
        if char in mapping.values():
            stack.append(char)
        elif char in mapping.keys():
            if stack == [] or mapping[char] != stack.pop():
                return False
    return stack == []
```","def is_balanced(s):
    stack = []
    mapping = {')': '(', ']': '[', '}': '{'}
    
    for char in s:
        if char in mapping.values():
            stack.append(char)
        elif char in mapping.keys():
            if stack == [] or mapping[char] != stack.pop():
                return False
    return stack == []","def is_balanced(s):
    stack = []
    mapping = {')': '(', ']': '[', '}': '{'}
    for char in s:
        if char in mapping.values():
            stack.append(char)
        elif char in mapping.keys():
            if stack == [] or mapping[char] != stack.pop():
                return False
    return stack == []",73aab637c40154ec,7c5f6b84f40605e0,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,brackets_v1
1756744572.9711225,brackets_v2,brackets_v2_1756744572,gpt-4o-mini,0.2,"```python
def is_balanced(s):
    stack = []
    parentheses_map = {')': '(', ']': '[', '}': '{'}
    
    for char in s:
        if char in parentheses_map.values():
            stack.append(char)
        elif char in parentheses_map.keys():
            if not stack or stack.pop() != parentheses_map[char]:
                return False
    
    return len(stack) == 0
```","def is_balanced(s):
    stack = []
    parentheses_map = {')': '(', ']': '[', '}': '{'}
    
    for char in s:
        if char in parentheses_map.values():
            stack.append(char)
        elif char in parentheses_map.keys():
            if not stack or stack.pop() != parentheses_map[char]:
                return False
    
    return len(stack) == 0","def is_balanced(s):
    stack = []
    parentheses_map = {')': '(', ']': '[', '}': '{'}
    for char in s:
        if char in parentheses_map.values():
            stack.append(char)
        elif char in parentheses_map.keys():
            if not stack or stack.pop() != parentheses_map[char]:
                return False
    return len(stack) == 0",65b0166e3e43f9db,93e13db610b6b8ef,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,brackets_v2
1756744574.9163294,brackets_v2,brackets_v2_1756744574,gpt-4o-mini,0.2,"```python
def is_balanced(s):
    stack = []
    mapping = {')': '(', '}': '{', ']': '['}
    
    for char in s:
        if char in mapping.values():
            stack.append(char)
        elif char in mapping.keys():
            if stack == [] or mapping[char] != stack.pop():
                return False
    
    return stack == []
```","def is_balanced(s):
    stack = []
    mapping = {')': '(', '}': '{', ']': '['}
    
    for char in s:
        if char in mapping.values():
            stack.append(char)
        elif char in mapping.keys():
            if stack == [] or mapping[char] != stack.pop():
                return False
    
    return stack == []","def is_balanced(s):
    stack = []
    mapping = {')': '(', '}': '{', ']': '['}
    for char in s:
        if char in mapping.values():
            stack.append(char)
        elif char in mapping.keys():
            if stack == [] or mapping[char] != stack.pop():
                return False
    return stack == []",de6e33f045255a41,9dad437465e5e8f6,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,brackets_v2
1756744577.7067606,brackets_v2,brackets_v2_1756744577,gpt-4o-mini,0.2,"```python
def is_balanced(s):
    stack = []
    brackets = {')': '(', ']': '[', '}': '{'}
    
    for char in s:
        if char in brackets.values():
            stack.append(char)
        elif char in brackets.keys():
            if not stack or stack.pop() != brackets[char]:
                return False
    
    return len(stack) == 0
```","def is_balanced(s):
    stack = []
    brackets = {')': '(', ']': '[', '}': '{'}
    
    for char in s:
        if char in brackets.values():
            stack.append(char)
        elif char in brackets.keys():
            if not stack or stack.pop() != brackets[char]:
                return False
    
    return len(stack) == 0","def is_balanced(s):
    stack = []
    brackets = {')': '(', ']': '[', '}': '{'}
    for char in s:
        if char in brackets.values():
            stack.append(char)
        elif char in brackets.keys():
            if not stack or stack.pop() != brackets[char]:
                return False
    return len(stack) == 0",7dac20d60badb6f9,575ed40b22d69af4,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,brackets_v2
1756744579.9449139,brackets_v2,brackets_v2_1756744579,gpt-4o-mini,0.2,"```python
def is_balanced(s):
    stack = []
    parentheses_map = {')': '(', ']': '[', '}': '{'}
    
    for char in s:
        if char in parentheses_map.values():
            stack.append(char)
        elif char in parentheses_map.keys():
            if not stack or stack.pop() != parentheses_map[char]:
                return False
    
    return len(stack) == 0
```","def is_balanced(s):
    stack = []
    parentheses_map = {')': '(', ']': '[', '}': '{'}
    
    for char in s:
        if char in parentheses_map.values():
            stack.append(char)
        elif char in parentheses_map.keys():
            if not stack or stack.pop() != parentheses_map[char]:
                return False
    
    return len(stack) == 0","def is_balanced(s):
    stack = []
    parentheses_map = {')': '(', ']': '[', '}': '{'}
    for char in s:
        if char in parentheses_map.values():
            stack.append(char)
        elif char in parentheses_map.keys():
            if not stack or stack.pop() != parentheses_map[char]:
                return False
    return len(stack) == 0",65b0166e3e43f9db,93e13db610b6b8ef,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,brackets_v2
1756744582.29184,brackets_v2,brackets_v2_1756744582,gpt-4o-mini,0.2,"```python
def is_balanced(s):
    stack = []
    bracket_map = {')': '(', ']': '[', '}': '{'}
    
    for char in s:
        if char in bracket_map.values():
            stack.append(char)
        elif char in bracket_map.keys():
            if not stack or stack.pop() != bracket_map[char]:
                return False
    
    return len(stack) == 0
```","def is_balanced(s):
    stack = []
    bracket_map = {')': '(', ']': '[', '}': '{'}
    
    for char in s:
        if char in bracket_map.values():
            stack.append(char)
        elif char in bracket_map.keys():
            if not stack or stack.pop() != bracket_map[char]:
                return False
    
    return len(stack) == 0","def is_balanced(s):
    stack = []
    bracket_map = {')': '(', ']': '[', '}': '{'}
    for char in s:
        if char in bracket_map.values():
            stack.append(char)
        elif char in bracket_map.keys():
            if not stack or stack.pop() != bracket_map[char]:
                return False
    return len(stack) == 0",ae09d4c4a36b722d,c98d91a2ad725f57,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,brackets_v2
