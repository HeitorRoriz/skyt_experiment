ts,prompt_id,run_id,model,temperature,raw_output,code,canon_code,raw_hash,canon_signature,structural_ok,canonicalization_ok,contract_pass,oracle_pass,notes,attempts,last_error,status,metrics_version,contract_id
1756744189.7200303,anchor_fib_v1,anchor_fib_v1_1756744189,gpt-4o-mini,0.0,"```python
def fibonacci(n=20, fib_list=None):
    if fib_list is None:
        fib_list = [0, 1]
    if len(fib_list) < n:
        fib_list.append(fib_list[-1] + fib_list[-2])
        return fibonacci(n, fib_list)
    return fib_list[:n]

# Example usage
print(fibonacci())
```","def fibonacci(n=20, fib_list=None):
    if fib_list is None:
        fib_list = [0, 1]
    if len(fib_list) < n:
        fib_list.append(fib_list[-1] + fib_list[-2])
        return fibonacci(n, fib_list)
    return fib_list[:n]

# Example usage
print(fibonacci())","def fibonacci(n=20, fib_list=None):
    if fib_list is None:
        fib_list = [0, 1]
    if len(fib_list) < n:
        fib_list.append(fib_list[-1] + fib_list[-2])
        return fibonacci(n, fib_list)
    return fib_list[:n]
print(fibonacci())",528bd28faa9ca9a8,f8a5a9c9a861533f,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,anchor_fib_v1
1756744193.0657737,anchor_fib_v1,anchor_fib_v1_1756744193,gpt-4o-mini,0.0,"```python
def fibonacci(n=20, fib_list=None):
    if fib_list is None:
        fib_list = [0, 1]
    if len(fib_list) < n:
        fib_list.append(fib_list[-1] + fib_list[-2])
        return fibonacci(n, fib_list)
    return fib_list[:n]

# Example usage
print(fibonacci())
```","def fibonacci(n=20, fib_list=None):
    if fib_list is None:
        fib_list = [0, 1]
    if len(fib_list) < n:
        fib_list.append(fib_list[-1] + fib_list[-2])
        return fibonacci(n, fib_list)
    return fib_list[:n]

# Example usage
print(fibonacci())","def fibonacci(n=20, fib_list=None):
    if fib_list is None:
        fib_list = [0, 1]
    if len(fib_list) < n:
        fib_list.append(fib_list[-1] + fib_list[-2])
        return fibonacci(n, fib_list)
    return fib_list[:n]
print(fibonacci())",528bd28faa9ca9a8,f8a5a9c9a861533f,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,anchor_fib_v1
1756744195.1932755,anchor_fib_v1,anchor_fib_v1_1756744195,gpt-4o-mini,0.0,"```python
def fibonacci(n=20, fib_list=None):
    if fib_list is None:
        fib_list = [0, 1]
    if len(fib_list) < n:
        fib_list.append(fib_list[-1] + fib_list[-2])
        return fibonacci(n, fib_list)
    return fib_list[:n]

# Example usage
print(fibonacci())
```","def fibonacci(n=20, fib_list=None):
    if fib_list is None:
        fib_list = [0, 1]
    if len(fib_list) < n:
        fib_list.append(fib_list[-1] + fib_list[-2])
        return fibonacci(n, fib_list)
    return fib_list[:n]

# Example usage
print(fibonacci())","def fibonacci(n=20, fib_list=None):
    if fib_list is None:
        fib_list = [0, 1]
    if len(fib_list) < n:
        fib_list.append(fib_list[-1] + fib_list[-2])
        return fibonacci(n, fib_list)
    return fib_list[:n]
print(fibonacci())",528bd28faa9ca9a8,f8a5a9c9a861533f,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,anchor_fib_v1
1756744197.7715557,anchor_fib_v1,anchor_fib_v1_1756744197,gpt-4o-mini,0.0,"```python
def fibonacci(n=20, fib_list=None):
    if fib_list is None:
        fib_list = [0, 1]
    if len(fib_list) < n:
        fib_list.append(fib_list[-1] + fib_list[-2])
        return fibonacci(n, fib_list)
    return fib_list[:n]

# Example usage
print(fibonacci())
```","def fibonacci(n=20, fib_list=None):
    if fib_list is None:
        fib_list = [0, 1]
    if len(fib_list) < n:
        fib_list.append(fib_list[-1] + fib_list[-2])
        return fibonacci(n, fib_list)
    return fib_list[:n]

# Example usage
print(fibonacci())","def fibonacci(n=20, fib_list=None):
    if fib_list is None:
        fib_list = [0, 1]
    if len(fib_list) < n:
        fib_list.append(fib_list[-1] + fib_list[-2])
        return fibonacci(n, fib_list)
    return fib_list[:n]
print(fibonacci())",528bd28faa9ca9a8,f8a5a9c9a861533f,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,anchor_fib_v1
1756744201.5364506,anchor_fib_v1,anchor_fib_v1_1756744201,gpt-4o-mini,0.0,"```python
def fibonacci(n=20, fib_list=None):
    if fib_list is None:
        fib_list = [0, 1]
    if len(fib_list) < n:
        fib_list.append(fib_list[-1] + fib_list[-2])
        return fibonacci(n, fib_list)
    return fib_list[:n]

# Example usage
print(fibonacci())
```","def fibonacci(n=20, fib_list=None):
    if fib_list is None:
        fib_list = [0, 1]
    if len(fib_list) < n:
        fib_list.append(fib_list[-1] + fib_list[-2])
        return fibonacci(n, fib_list)
    return fib_list[:n]

# Example usage
print(fibonacci())","def fibonacci(n=20, fib_list=None):
    if fib_list is None:
        fib_list = [0, 1]
    if len(fib_list) < n:
        fib_list.append(fib_list[-1] + fib_list[-2])
        return fibonacci(n, fib_list)
    return fib_list[:n]
print(fibonacci())",528bd28faa9ca9a8,f8a5a9c9a861533f,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,anchor_fib_v1
1756744207.0476384,anchor_fib_v1,anchor_fib_v1_1756744207,gpt-4o-mini,0.0,"```python
def fibonacci(n=20):
    def fib_recursive(x):
        if x <= 1:
            return x
        else:
            return fib_recursive(x - 1) + fib_recursive(x - 2)

    return [fib_recursive(i) for i in range(n)]

# Example usage
print(fibonacci())
```","def fibonacci(n=20):
    def fib_recursive(x):
        if x <= 1:
            return x
        else:
            return fib_recursive(x - 1) + fib_recursive(x - 2)

    return [fib_recursive(i) for i in range(n)]

# Example usage
print(fibonacci())","def fibonacci(n=20):
    def fib_recursive(x):
        if x <= 1:
            return x
        else:
            return fib_recursive(x - 1) + fib_recursive(x - 2)
    return [fib_recursive(i) for i in range(n)]
print(fibonacci())",05097966f6073032,9ad2e02da2b5b9c4,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,anchor_fib_v1
1756744209.6102753,anchor_fib_v1,anchor_fib_v1_1756744209,gpt-4o-mini,0.0,"```python
def fibonacci(n=20):
    def fib_recursive(x):
        if x <= 1:
            return x
        else:
            return fib_recursive(x - 1) + fib_recursive(x - 2)

    return [fib_recursive(i) for i in range(n)]

# Example usage
print(fibonacci())
```","def fibonacci(n=20):
    def fib_recursive(x):
        if x <= 1:
            return x
        else:
            return fib_recursive(x - 1) + fib_recursive(x - 2)

    return [fib_recursive(i) for i in range(n)]

# Example usage
print(fibonacci())","def fibonacci(n=20):
    def fib_recursive(x):
        if x <= 1:
            return x
        else:
            return fib_recursive(x - 1) + fib_recursive(x - 2)
    return [fib_recursive(i) for i in range(n)]
print(fibonacci())",05097966f6073032,9ad2e02da2b5b9c4,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,anchor_fib_v1
1756744213.6527212,anchor_fib_v1,anchor_fib_v1_1756744213,gpt-4o-mini,0.0,"```python
def fibonacci(n=20):
    def fib_recursive(x):
        if x <= 1:
            return x
        else:
            return fib_recursive(x - 1) + fib_recursive(x - 2)

    return [fib_recursive(i) for i in range(n)]

# Example usage
print(fibonacci())
```","def fibonacci(n=20):
    def fib_recursive(x):
        if x <= 1:
            return x
        else:
            return fib_recursive(x - 1) + fib_recursive(x - 2)

    return [fib_recursive(i) for i in range(n)]

# Example usage
print(fibonacci())","def fibonacci(n=20):
    def fib_recursive(x):
        if x <= 1:
            return x
        else:
            return fib_recursive(x - 1) + fib_recursive(x - 2)
    return [fib_recursive(i) for i in range(n)]
print(fibonacci())",05097966f6073032,9ad2e02da2b5b9c4,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,anchor_fib_v1
1756744215.8148196,anchor_fib_v1,anchor_fib_v1_1756744215,gpt-4o-mini,0.0,"```python
def fibonacci(n=20):
    def fib_recursive(x):
        if x <= 1:
            return x
        else:
            return fib_recursive(x - 1) + fib_recursive(x - 2)

    return [fib_recursive(i) for i in range(n)]

# Example usage:
# print(fibonacci())
```","def fibonacci(n=20):
    def fib_recursive(x):
        if x <= 1:
            return x
        else:
            return fib_recursive(x - 1) + fib_recursive(x - 2)

    return [fib_recursive(i) for i in range(n)]

# Example usage:
# print(fibonacci())","def fibonacci(n=20):
    def fib_recursive(x):
        if x <= 1:
            return x
        else:
            return fib_recursive(x - 1) + fib_recursive(x - 2)
    return [fib_recursive(i) for i in range(n)]",cf757faccdab5a5a,149c1069397e3200,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,anchor_fib_v1
1756744221.0126953,anchor_fib_v1,anchor_fib_v1_1756744221,gpt-4o-mini,0.0,"```python
def fibonacci(n=20):
    def fib_recursive(x):
        if x <= 1:
            return x
        else:
            return fib_recursive(x - 1) + fib_recursive(x - 2)

    return [fib_recursive(i) for i in range(n)]

# Example usage
print(fibonacci())
```","def fibonacci(n=20):
    def fib_recursive(x):
        if x <= 1:
            return x
        else:
            return fib_recursive(x - 1) + fib_recursive(x - 2)

    return [fib_recursive(i) for i in range(n)]

# Example usage
print(fibonacci())","def fibonacci(n=20):
    def fib_recursive(x):
        if x <= 1:
            return x
        else:
            return fib_recursive(x - 1) + fib_recursive(x - 2)
    return [fib_recursive(i) for i in range(n)]
print(fibonacci())",05097966f6073032,9ad2e02da2b5b9c4,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,anchor_fib_v1
1756744223.3753471,anchor_fib_v1,anchor_fib_v1_1756744223,gpt-4o-mini,0.2,"```python
def fibonacci(n=20):
    def fib_recursive(x):
        if x <= 1:
            return x
        else:
            return fib_recursive(x - 1) + fib_recursive(x - 2)

    return [fib_recursive(i) for i in range(n)]

# Example usage
print(fibonacci())
```","def fibonacci(n=20):
    def fib_recursive(x):
        if x <= 1:
            return x
        else:
            return fib_recursive(x - 1) + fib_recursive(x - 2)

    return [fib_recursive(i) for i in range(n)]

# Example usage
print(fibonacci())","def fibonacci(n=20):
    def fib_recursive(x):
        if x <= 1:
            return x
        else:
            return fib_recursive(x - 1) + fib_recursive(x - 2)
    return [fib_recursive(i) for i in range(n)]
print(fibonacci())",05097966f6073032,9ad2e02da2b5b9c4,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,anchor_fib_v1
1756744228.1307578,anchor_fib_v1,anchor_fib_v1_1756744228,gpt-4o-mini,0.2,"```python
def fibonacci(n=20, fib_list=None):
    if fib_list is None:
        fib_list = [0, 1]
    if len(fib_list) < n:
        fib_list.append(fib_list[-1] + fib_list[-2])
        return fibonacci(n, fib_list)
    return fib_list[:n]

# Example usage
print(fibonacci())
```","def fibonacci(n=20, fib_list=None):
    if fib_list is None:
        fib_list = [0, 1]
    if len(fib_list) < n:
        fib_list.append(fib_list[-1] + fib_list[-2])
        return fibonacci(n, fib_list)
    return fib_list[:n]

# Example usage
print(fibonacci())","def fibonacci(n=20, fib_list=None):
    if fib_list is None:
        fib_list = [0, 1]
    if len(fib_list) < n:
        fib_list.append(fib_list[-1] + fib_list[-2])
        return fibonacci(n, fib_list)
    return fib_list[:n]
print(fibonacci())",528bd28faa9ca9a8,f8a5a9c9a861533f,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,anchor_fib_v1
1756744230.311936,anchor_fib_v1,anchor_fib_v1_1756744230,gpt-4o-mini,0.2,"```python
def fibonacci(n=20):
    def fib_recursive(x):
        if x <= 1:
            return x
        else:
            return fib_recursive(x - 1) + fib_recursive(x - 2)

    return [fib_recursive(i) for i in range(n)]

# Example usage
print(fibonacci())
```","def fibonacci(n=20):
    def fib_recursive(x):
        if x <= 1:
            return x
        else:
            return fib_recursive(x - 1) + fib_recursive(x - 2)

    return [fib_recursive(i) for i in range(n)]

# Example usage
print(fibonacci())","def fibonacci(n=20):
    def fib_recursive(x):
        if x <= 1:
            return x
        else:
            return fib_recursive(x - 1) + fib_recursive(x - 2)
    return [fib_recursive(i) for i in range(n)]
print(fibonacci())",05097966f6073032,9ad2e02da2b5b9c4,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,anchor_fib_v1
1756744232.85174,anchor_fib_v1,anchor_fib_v1_1756744232,gpt-4o-mini,0.2,"```python
def fibonacci(n=20):
    def fib_recursive(x):
        if x <= 1:
            return x
        else:
            return fib_recursive(x - 1) + fib_recursive(x - 2)

    return [fib_recursive(i) for i in range(n)]

# Example usage
print(fibonacci())
```","def fibonacci(n=20):
    def fib_recursive(x):
        if x <= 1:
            return x
        else:
            return fib_recursive(x - 1) + fib_recursive(x - 2)

    return [fib_recursive(i) for i in range(n)]

# Example usage
print(fibonacci())","def fibonacci(n=20):
    def fib_recursive(x):
        if x <= 1:
            return x
        else:
            return fib_recursive(x - 1) + fib_recursive(x - 2)
    return [fib_recursive(i) for i in range(n)]
print(fibonacci())",05097966f6073032,9ad2e02da2b5b9c4,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,anchor_fib_v1
1756744236.4702263,anchor_fib_v1,anchor_fib_v1_1756744236,gpt-4o-mini,0.2,"```python
def fibonacci(n=20, fib_list=None):
    if fib_list is None:
        fib_list = [0, 1]
    if len(fib_list) < n:
        fib_list.append(fib_list[-1] + fib_list[-2])
        return fibonacci(n, fib_list)
    return fib_list[:n]

# Example usage
print(fibonacci())
```","def fibonacci(n=20, fib_list=None):
    if fib_list is None:
        fib_list = [0, 1]
    if len(fib_list) < n:
        fib_list.append(fib_list[-1] + fib_list[-2])
        return fibonacci(n, fib_list)
    return fib_list[:n]

# Example usage
print(fibonacci())","def fibonacci(n=20, fib_list=None):
    if fib_list is None:
        fib_list = [0, 1]
    if len(fib_list) < n:
        fib_list.append(fib_list[-1] + fib_list[-2])
        return fibonacci(n, fib_list)
    return fib_list[:n]
print(fibonacci())",528bd28faa9ca9a8,f8a5a9c9a861533f,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,anchor_fib_v1
1756744238.3867328,anchor_fib_v1,anchor_fib_v1_1756744238,gpt-4o-mini,0.2,"```python
def fibonacci(n=20):
    def fib_recursive(x):
        if x <= 1:
            return x
        else:
            return fib_recursive(x - 1) + fib_recursive(x - 2)

    return [fib_recursive(i) for i in range(n)]

# Example usage
print(fibonacci())
```","def fibonacci(n=20):
    def fib_recursive(x):
        if x <= 1:
            return x
        else:
            return fib_recursive(x - 1) + fib_recursive(x - 2)

    return [fib_recursive(i) for i in range(n)]

# Example usage
print(fibonacci())","def fibonacci(n=20):
    def fib_recursive(x):
        if x <= 1:
            return x
        else:
            return fib_recursive(x - 1) + fib_recursive(x - 2)
    return [fib_recursive(i) for i in range(n)]
print(fibonacci())",05097966f6073032,9ad2e02da2b5b9c4,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,anchor_fib_v1
1756744240.55095,anchor_fib_v1,anchor_fib_v1_1756744240,gpt-4o-mini,0.2,"```python
def fibonacci(n=20):
    def fib_recursive(x):
        if x <= 1:
            return x
        else:
            return fib_recursive(x - 1) + fib_recursive(x - 2)

    return [fib_recursive(i) for i in range(n)]

# Example usage
print(fibonacci())
```","def fibonacci(n=20):
    def fib_recursive(x):
        if x <= 1:
            return x
        else:
            return fib_recursive(x - 1) + fib_recursive(x - 2)

    return [fib_recursive(i) for i in range(n)]

# Example usage
print(fibonacci())","def fibonacci(n=20):
    def fib_recursive(x):
        if x <= 1:
            return x
        else:
            return fib_recursive(x - 1) + fib_recursive(x - 2)
    return [fib_recursive(i) for i in range(n)]
print(fibonacci())",05097966f6073032,9ad2e02da2b5b9c4,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,anchor_fib_v1
1756744245.8327239,anchor_fib_v1,anchor_fib_v1_1756744245,gpt-4o-mini,0.2,"```python
def fibonacci(n, memo={0: 0, 1: 1}):
    if n not in memo:
        memo[n] = fibonacci(n - 1, memo) + fibonacci(n - 2, memo)
    return memo[n]

def generate_fibonacci_list(count):
    return [fibonacci(i) for i in range(count)]

def fibonacci():
    return generate_fibonacci_list(20)
```","def fibonacci(n, memo={0: 0, 1: 1}):
    if n not in memo:
        memo[n] = fibonacci(n - 1, memo) + fibonacci(n - 2, memo)
    return memo[n]

def generate_fibonacci_list(count):
    return [fibonacci(i) for i in range(count)]

def fibonacci():
    return generate_fibonacci_list(20)","def fibonacci(n, memo={0: 0, 1: 1}):
    if n not in memo:
        memo[n] = fibonacci(n - 1, memo) + fibonacci(n - 2, memo)
    return memo[n]
def generate_fibonacci_list(count):
    return [fibonacci(i) for i in range(count)]
def fibonacci():
    return generate_fibonacci_list(20)",5d0c40db7fc28a81,e1d6663e09ce3c68,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,anchor_fib_v1
1756744247.933573,anchor_fib_v1,anchor_fib_v1_1756744247,gpt-4o-mini,0.2,"```python
def fibonacci(n=20):
    def fib_helper(x):
        if x <= 1:
            return x
        else:
            return fib_helper(x - 1) + fib_helper(x - 2)

    return [fib_helper(i) for i in range(n)]

# Example usage
print(fibonacci())
```","def fibonacci(n=20):
    def fib_helper(x):
        if x <= 1:
            return x
        else:
            return fib_helper(x - 1) + fib_helper(x - 2)

    return [fib_helper(i) for i in range(n)]

# Example usage
print(fibonacci())","def fibonacci(n=20):
    def fib_helper(x):
        if x <= 1:
            return x
        else:
            return fib_helper(x - 1) + fib_helper(x - 2)
    return [fib_helper(i) for i in range(n)]
print(fibonacci())",7a6a9c2b4f391f4e,25f7db9d157caf33,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,anchor_fib_v1
1756744250.5691707,anchor_fib_v1,anchor_fib_v1_1756744250,gpt-4o-mini,0.2,"```python
def fibonacci(n=20):
    def fib_recursive(x):
        if x <= 1:
            return x
        else:
            return fib_recursive(x - 1) + fib_recursive(x - 2)

    return [fib_recursive(i) for i in range(n)]

# Example usage
print(fibonacci())
```","def fibonacci(n=20):
    def fib_recursive(x):
        if x <= 1:
            return x
        else:
            return fib_recursive(x - 1) + fib_recursive(x - 2)

    return [fib_recursive(i) for i in range(n)]

# Example usage
print(fibonacci())","def fibonacci(n=20):
    def fib_recursive(x):
        if x <= 1:
            return x
        else:
            return fib_recursive(x - 1) + fib_recursive(x - 2)
    return [fib_recursive(i) for i in range(n)]
print(fibonacci())",05097966f6073032,9ad2e02da2b5b9c4,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,anchor_fib_v1
1756744254.2031345,slugify_v1,slugify_v1_1756744254,gpt-4o-mini,0.0,"```python
import unicodedata
import re

def slugify(texts):
    def create_slug(text):
        # Normalize the text to remove accents
        text = unicodedata.normalize('NFKD', text)
        # Remove non-ASCII characters
        text = re.sub(r'[^\w\s-]', '', text)
        # Replace spaces and collapse internal whitespace
        text = re.sub(r'\s+', ' ', text).strip()
        # Convert to lowercase and replace spaces with '-'
        return re.sub(r'[-\s]+', '-', text.lower())

    return [create_slug(text) for text in texts]
```","import unicodedata
import re

def slugify(texts):
    def create_slug(text):
        # Normalize the text to remove accents
        text = unicodedata.normalize('NFKD', text)
        # Remove non-ASCII characters
        text = re.sub(r'[^\w\s-]', '', text)
        # Replace spaces and collapse internal whitespace
        text = re.sub(r'\s+', ' ', text).strip()
        # Convert to lowercase and replace spaces with '-'
        return re.sub(r'[-\s]+', '-', text.lower())

    return [create_slug(text) for text in texts]","import unicodedata
import re
def slugify(texts):
    def create_slug(text):
        text = unicodedata.normalize('NFKD', text)
        text = re.sub('[^\\w\\s-]', '', text)
        text = re.sub('\\s+', ' ', text).strip()
        return re.sub('[-\\s]+', '-', text.lower())
    return [create_slug(text) for text in texts]",98a95589ffe78484,95d74e726c044f66,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,slugify_v1
1756744258.1069455,slugify_v1,slugify_v1_1756744258,gpt-4o-mini,0.0,"```python
import unicodedata
import re

def slugify(texts):
    def create_slug(text):
        # Normalize the text to remove accents
        text = unicodedata.normalize('NFKD', text)
        # Remove non-ASCII characters
        text = re.sub(r'[^\w\s-]', '', text)
        # Replace spaces and collapse multiple spaces
        text = re.sub(r'\s+', ' ', text).strip()
        # Convert to lowercase and replace spaces with '-'
        return re.sub(r'[-\s]+', '-', text.lower())
    
    return [create_slug(text) for text in texts]
```","import unicodedata
import re

def slugify(texts):
    def create_slug(text):
        # Normalize the text to remove accents
        text = unicodedata.normalize('NFKD', text)
        # Remove non-ASCII characters
        text = re.sub(r'[^\w\s-]', '', text)
        # Replace spaces and collapse multiple spaces
        text = re.sub(r'\s+', ' ', text).strip()
        # Convert to lowercase and replace spaces with '-'
        return re.sub(r'[-\s]+', '-', text.lower())
    
    return [create_slug(text) for text in texts]","import unicodedata
import re
def slugify(texts):
    def create_slug(text):
        text = unicodedata.normalize('NFKD', text)
        text = re.sub('[^\\w\\s-]', '', text)
        text = re.sub('\\s+', ' ', text).strip()
        return re.sub('[-\\s]+', '-', text.lower())
    return [create_slug(text) for text in texts]",84def82912d6f8b1,95d74e726c044f66,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,slugify_v1
1756744261.8439405,slugify_v1,slugify_v1_1756744261,gpt-4o-mini,0.0,"```python
import unicodedata
import re

def slugify(texts):
    def create_slug(text):
        # Normalize the text to remove accents
        text = unicodedata.normalize('NFKD', text)
        # Remove non-ASCII characters
        text = re.sub(r'[^\w\s-]', '', text)
        # Replace spaces and collapse internal whitespace
        text = re.sub(r'\s+', ' ', text).strip()
        # Convert to lowercase and replace spaces with '-'
        return re.sub(r'[-\s]+', '-', text.lower())
    
    return [create_slug(text) for text in texts]
```","import unicodedata
import re

def slugify(texts):
    def create_slug(text):
        # Normalize the text to remove accents
        text = unicodedata.normalize('NFKD', text)
        # Remove non-ASCII characters
        text = re.sub(r'[^\w\s-]', '', text)
        # Replace spaces and collapse internal whitespace
        text = re.sub(r'\s+', ' ', text).strip()
        # Convert to lowercase and replace spaces with '-'
        return re.sub(r'[-\s]+', '-', text.lower())
    
    return [create_slug(text) for text in texts]","import unicodedata
import re
def slugify(texts):
    def create_slug(text):
        text = unicodedata.normalize('NFKD', text)
        text = re.sub('[^\\w\\s-]', '', text)
        text = re.sub('\\s+', ' ', text).strip()
        return re.sub('[-\\s]+', '-', text.lower())
    return [create_slug(text) for text in texts]",84760151ac6e0773,95d74e726c044f66,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,slugify_v1
1756744266.1925006,slugify_v1,slugify_v1_1756744266,gpt-4o-mini,0.0,"```python
import unicodedata
import re

def slugify(texts):
    def create_slug(text):
        # Normalize the text to remove accents
        text = unicodedata.normalize('NFKD', text)
        # Remove unwanted characters and replace spaces with '-'
        text = re.sub(r'[^a-zA-Z0-9\s-]', '', text)
        # Collapse internal whitespace to single spaces
        text = re.sub(r'\s+', ' ', text).strip()
        # Replace spaces with '-'
        text = text.replace(' ', '-')
        # Convert to lowercase
        return text.lower()

    return [create_slug(text) for text in texts]
```","import unicodedata
import re

def slugify(texts):
    def create_slug(text):
        # Normalize the text to remove accents
        text = unicodedata.normalize('NFKD', text)
        # Remove unwanted characters and replace spaces with '-'
        text = re.sub(r'[^a-zA-Z0-9\s-]', '', text)
        # Collapse internal whitespace to single spaces
        text = re.sub(r'\s+', ' ', text).strip()
        # Replace spaces with '-'
        text = text.replace(' ', '-')
        # Convert to lowercase
        return text.lower()

    return [create_slug(text) for text in texts]","import unicodedata
import re
def slugify(texts):
    def create_slug(text):
        text = unicodedata.normalize('NFKD', text)
        text = re.sub('[^a-zA-Z0-9\\s-]', '', text)
        text = re.sub('\\s+', ' ', text).strip()
        text = text.replace(' ', '-')
        return text.lower()
    return [create_slug(text) for text in texts]",9c4e61054c223927,25d5cc324cdaebbd,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,slugify_v1
1756744270.19162,slugify_v1,slugify_v1_1756744270,gpt-4o-mini,0.0,"```python
import unicodedata
import re

def slugify(texts):
    def create_slug(text):
        # Normalize the text to remove accents
        text = unicodedata.normalize('NFKD', text)
        # Remove non-ASCII characters
        text = re.sub(r'[^\w\s-]', '', text)
        # Replace spaces and collapse internal whitespace
        text = re.sub(r'\s+', ' ', text).strip()
        # Convert to lowercase and replace spaces with '-'
        return re.sub(r'[-\s]+', '-', text.lower())
    
    return [create_slug(text) for text in texts]
```","import unicodedata
import re

def slugify(texts):
    def create_slug(text):
        # Normalize the text to remove accents
        text = unicodedata.normalize('NFKD', text)
        # Remove non-ASCII characters
        text = re.sub(r'[^\w\s-]', '', text)
        # Replace spaces and collapse internal whitespace
        text = re.sub(r'\s+', ' ', text).strip()
        # Convert to lowercase and replace spaces with '-'
        return re.sub(r'[-\s]+', '-', text.lower())
    
    return [create_slug(text) for text in texts]","import unicodedata
import re
def slugify(texts):
    def create_slug(text):
        text = unicodedata.normalize('NFKD', text)
        text = re.sub('[^\\w\\s-]', '', text)
        text = re.sub('\\s+', ' ', text).strip()
        return re.sub('[-\\s]+', '-', text.lower())
    return [create_slug(text) for text in texts]",84760151ac6e0773,95d74e726c044f66,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,slugify_v1
1756744273.6973639,slugify_v1,slugify_v1_1756744273,gpt-4o-mini,0.0,"```python
import unicodedata
import re

def slugify(texts):
    def slugify_text(text):
        # Normalize the text to remove accents
        text = unicodedata.normalize('NFKD', text)
        # Remove non-ASCII characters
        text = re.sub(r'[^\w\s-]', '', text)
        # Replace spaces and collapse internal whitespace
        text = re.sub(r'\s+', ' ', text).strip()
        # Convert to lowercase and replace spaces with '-'
        text = text.lower().replace(' ', '-')
        return text

    return [slugify_text(text) for text in texts]
```","import unicodedata
import re

def slugify(texts):
    def slugify_text(text):
        # Normalize the text to remove accents
        text = unicodedata.normalize('NFKD', text)
        # Remove non-ASCII characters
        text = re.sub(r'[^\w\s-]', '', text)
        # Replace spaces and collapse internal whitespace
        text = re.sub(r'\s+', ' ', text).strip()
        # Convert to lowercase and replace spaces with '-'
        text = text.lower().replace(' ', '-')
        return text

    return [slugify_text(text) for text in texts]","import unicodedata
import re
def slugify(texts):
    def slugify_text(text):
        text = unicodedata.normalize('NFKD', text)
        text = re.sub('[^\\w\\s-]', '', text)
        text = re.sub('\\s+', ' ', text).strip()
        text = text.lower().replace(' ', '-')
        return text
    return [slugify_text(text) for text in texts]",79998f15a93a1972,768e4953afc60d4f,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,slugify_v1
1756744276.839473,slugify_v1,slugify_v1_1756744276,gpt-4o-mini,0.0,"```python
import unicodedata
import re

def slugify(texts):
    def slugify_text(text):
        # Normalize the text to remove accents
        text = unicodedata.normalize('NFKD', text)
        # Remove non-ASCII characters
        text = re.sub(r'[^\w\s-]', '', text)
        # Replace spaces and collapse internal whitespace
        text = re.sub(r'\s+', ' ', text).strip()
        # Convert to lowercase and replace spaces with '-'
        return text.lower().replace(' ', '-')
    
    return [slugify_text(text) for text in texts]
```","import unicodedata
import re

def slugify(texts):
    def slugify_text(text):
        # Normalize the text to remove accents
        text = unicodedata.normalize('NFKD', text)
        # Remove non-ASCII characters
        text = re.sub(r'[^\w\s-]', '', text)
        # Replace spaces and collapse internal whitespace
        text = re.sub(r'\s+', ' ', text).strip()
        # Convert to lowercase and replace spaces with '-'
        return text.lower().replace(' ', '-')
    
    return [slugify_text(text) for text in texts]","import unicodedata
import re
def slugify(texts):
    def slugify_text(text):
        text = unicodedata.normalize('NFKD', text)
        text = re.sub('[^\\w\\s-]', '', text)
        text = re.sub('\\s+', ' ', text).strip()
        return text.lower().replace(' ', '-')
    return [slugify_text(text) for text in texts]",52ab25c1068af8f2,61966c47cfd6af22,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,slugify_v1
1756744280.807265,slugify_v1,slugify_v1_1756744280,gpt-4o-mini,0.0,"```python
import unicodedata
import re

def slugify(texts):
    def slugify_text(text):
        # Normalize the text to remove accents
        text = unicodedata.normalize('NFKD', text)
        # Remove non-ASCII characters
        text = re.sub(r'[^\w\s-]', '', text)
        # Replace spaces and collapse internal whitespace
        text = re.sub(r'\s+', ' ', text).strip()
        # Convert to lowercase and replace spaces with '-'
        return re.sub(r'\s+', '-', text.lower())
    
    return [slugify_text(text) for text in texts]
```","import unicodedata
import re

def slugify(texts):
    def slugify_text(text):
        # Normalize the text to remove accents
        text = unicodedata.normalize('NFKD', text)
        # Remove non-ASCII characters
        text = re.sub(r'[^\w\s-]', '', text)
        # Replace spaces and collapse internal whitespace
        text = re.sub(r'\s+', ' ', text).strip()
        # Convert to lowercase and replace spaces with '-'
        return re.sub(r'\s+', '-', text.lower())
    
    return [slugify_text(text) for text in texts]","import unicodedata
import re
def slugify(texts):
    def slugify_text(text):
        text = unicodedata.normalize('NFKD', text)
        text = re.sub('[^\\w\\s-]', '', text)
        text = re.sub('\\s+', ' ', text).strip()
        return re.sub('\\s+', '-', text.lower())
    return [slugify_text(text) for text in texts]",cb58fadc09b526c9,d5746b78fbb38430,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,slugify_v1
1756744283.5561154,slugify_v1,slugify_v1_1756744283,gpt-4o-mini,0.0,"```python
import unicodedata
import re

def slugify(texts):
    def slugify_text(text):
        # Normalize the text to remove accents
        text = unicodedata.normalize('NFKD', text)
        # Remove non-ASCII characters
        text = re.sub(r'[^\w\s-]', '', text)
        # Replace spaces and collapse internal whitespace
        text = re.sub(r'\s+', ' ', text).strip()
        # Convert to lowercase and replace spaces with '-'
        return re.sub(r'[-\s]+', '-', text.lower())
    
    return [slugify_text(text) for text in texts]
```","import unicodedata
import re

def slugify(texts):
    def slugify_text(text):
        # Normalize the text to remove accents
        text = unicodedata.normalize('NFKD', text)
        # Remove non-ASCII characters
        text = re.sub(r'[^\w\s-]', '', text)
        # Replace spaces and collapse internal whitespace
        text = re.sub(r'\s+', ' ', text).strip()
        # Convert to lowercase and replace spaces with '-'
        return re.sub(r'[-\s]+', '-', text.lower())
    
    return [slugify_text(text) for text in texts]","import unicodedata
import re
def slugify(texts):
    def slugify_text(text):
        text = unicodedata.normalize('NFKD', text)
        text = re.sub('[^\\w\\s-]', '', text)
        text = re.sub('\\s+', ' ', text).strip()
        return re.sub('[-\\s]+', '-', text.lower())
    return [slugify_text(text) for text in texts]",d83912cda6cfa43f,50a837613cde9c51,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,slugify_v1
1756744287.7457118,slugify_v1,slugify_v1_1756744287,gpt-4o-mini,0.0,"```python
import unicodedata
import re

def slugify(texts):
    def slugify_text(text):
        # Normalize the text to remove accents
        text = unicodedata.normalize('NFKD', text)
        # Remove non-ASCII characters
        text = re.sub(r'[^\w\s-]', '', text)
        # Replace spaces and collapse internal whitespace
        text = re.sub(r'\s+', ' ', text).strip()
        # Convert to lowercase and replace spaces with '-'
        return re.sub(r'[-\s]+', '-', text.lower())
    
    return [slugify_text(text) for text in texts]
```","import unicodedata
import re

def slugify(texts):
    def slugify_text(text):
        # Normalize the text to remove accents
        text = unicodedata.normalize('NFKD', text)
        # Remove non-ASCII characters
        text = re.sub(r'[^\w\s-]', '', text)
        # Replace spaces and collapse internal whitespace
        text = re.sub(r'\s+', ' ', text).strip()
        # Convert to lowercase and replace spaces with '-'
        return re.sub(r'[-\s]+', '-', text.lower())
    
    return [slugify_text(text) for text in texts]","import unicodedata
import re
def slugify(texts):
    def slugify_text(text):
        text = unicodedata.normalize('NFKD', text)
        text = re.sub('[^\\w\\s-]', '', text)
        text = re.sub('\\s+', ' ', text).strip()
        return re.sub('[-\\s]+', '-', text.lower())
    return [slugify_text(text) for text in texts]",d83912cda6cfa43f,50a837613cde9c51,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,slugify_v1
1756744291.974607,slugify_v1,slugify_v1_1756744291,gpt-4o-mini,0.2,"```python
import unicodedata
import re

def slugify(texts):
    def create_slug(text):
        # Normalize the text to remove accents
        text = unicodedata.normalize('NFKD', text)
        # Remove non-ASCII characters
        text = re.sub(r'[^\w\s-]', '', text)
        # Replace spaces and collapse multiple spaces
        text = re.sub(r'\s+', ' ', text).strip()
        # Convert to lowercase and replace spaces with '-'
        return re.sub(r'[-\s]+', '-', text.lower())

    return [create_slug(text) for text in texts]
```","import unicodedata
import re

def slugify(texts):
    def create_slug(text):
        # Normalize the text to remove accents
        text = unicodedata.normalize('NFKD', text)
        # Remove non-ASCII characters
        text = re.sub(r'[^\w\s-]', '', text)
        # Replace spaces and collapse multiple spaces
        text = re.sub(r'\s+', ' ', text).strip()
        # Convert to lowercase and replace spaces with '-'
        return re.sub(r'[-\s]+', '-', text.lower())

    return [create_slug(text) for text in texts]","import unicodedata
import re
def slugify(texts):
    def create_slug(text):
        text = unicodedata.normalize('NFKD', text)
        text = re.sub('[^\\w\\s-]', '', text)
        text = re.sub('\\s+', ' ', text).strip()
        return re.sub('[-\\s]+', '-', text.lower())
    return [create_slug(text) for text in texts]",1174ff72ef7426ff,95d74e726c044f66,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,slugify_v1
1756744296.3858151,slugify_v1,slugify_v1_1756744296,gpt-4o-mini,0.2,"```python
import unicodedata
import re

def slugify(texts):
    def clean_text(text):
        # Normalize the text to remove accents
        text = unicodedata.normalize('NFKD', text)
        # Remove non-ASCII characters
        text = re.sub(r'[^\w\s-]', '', text)
        # Replace spaces and collapse internal whitespace
        text = re.sub(r'\s+', ' ', text).strip()
        # Convert to lowercase and replace spaces with '-'
        text = text.lower().replace(' ', '-')
        return text

    return [clean_text(text) for text in texts]
```","import unicodedata
import re

def slugify(texts):
    def clean_text(text):
        # Normalize the text to remove accents
        text = unicodedata.normalize('NFKD', text)
        # Remove non-ASCII characters
        text = re.sub(r'[^\w\s-]', '', text)
        # Replace spaces and collapse internal whitespace
        text = re.sub(r'\s+', ' ', text).strip()
        # Convert to lowercase and replace spaces with '-'
        text = text.lower().replace(' ', '-')
        return text

    return [clean_text(text) for text in texts]","import unicodedata
import re
def slugify(texts):
    def clean_text(text):
        text = unicodedata.normalize('NFKD', text)
        text = re.sub('[^\\w\\s-]', '', text)
        text = re.sub('\\s+', ' ', text).strip()
        text = text.lower().replace(' ', '-')
        return text
    return [clean_text(text) for text in texts]",38aff53b168bf0ca,bff71574bd677799,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,slugify_v1
1756744300.3128579,slugify_v1,slugify_v1_1756744300,gpt-4o-mini,0.2,"```python
import unicodedata
import re

def slugify(texts):
    def create_slug(text):
        # Normalize the text to remove accents
        text = unicodedata.normalize('NFKD', text)
        # Remove unwanted characters and collapse whitespace
        text = re.sub(r'[^a-zA-Z0-9\s-]', '', text)
        text = re.sub(r'\s+', ' ', text).strip()
        # Convert to lowercase and replace spaces with '-'
        text = text.lower().replace(' ', '-')
        return text

    return [create_slug(text) for text in texts]
```","import unicodedata
import re

def slugify(texts):
    def create_slug(text):
        # Normalize the text to remove accents
        text = unicodedata.normalize('NFKD', text)
        # Remove unwanted characters and collapse whitespace
        text = re.sub(r'[^a-zA-Z0-9\s-]', '', text)
        text = re.sub(r'\s+', ' ', text).strip()
        # Convert to lowercase and replace spaces with '-'
        text = text.lower().replace(' ', '-')
        return text

    return [create_slug(text) for text in texts]","import unicodedata
import re
def slugify(texts):
    def create_slug(text):
        text = unicodedata.normalize('NFKD', text)
        text = re.sub('[^a-zA-Z0-9\\s-]', '', text)
        text = re.sub('\\s+', ' ', text).strip()
        text = text.lower().replace(' ', '-')
        return text
    return [create_slug(text) for text in texts]",817a35f6573e39df,ba975a098a21e621,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,slugify_v1
1756744304.554343,slugify_v1,slugify_v1_1756744304,gpt-4o-mini,0.2,"```python
import unicodedata
import re

def slugify(texts):
    def create_slug(text):
        # Normalize the text to remove accents
        text = unicodedata.normalize('NFKD', text)
        # Remove unwanted characters and replace spaces with '-'
        text = re.sub(r'[^a-zA-Z0-9\s-]', '', text)
        # Collapse internal whitespace to single spaces
        text = re.sub(r'\s+', ' ', text).strip()
        # Replace spaces with '-'
        text = text.replace(' ', '-')
        # Convert to lowercase
        return text.lower()
    
    return [create_slug(text) for text in texts]
```","import unicodedata
import re

def slugify(texts):
    def create_slug(text):
        # Normalize the text to remove accents
        text = unicodedata.normalize('NFKD', text)
        # Remove unwanted characters and replace spaces with '-'
        text = re.sub(r'[^a-zA-Z0-9\s-]', '', text)
        # Collapse internal whitespace to single spaces
        text = re.sub(r'\s+', ' ', text).strip()
        # Replace spaces with '-'
        text = text.replace(' ', '-')
        # Convert to lowercase
        return text.lower()
    
    return [create_slug(text) for text in texts]","import unicodedata
import re
def slugify(texts):
    def create_slug(text):
        text = unicodedata.normalize('NFKD', text)
        text = re.sub('[^a-zA-Z0-9\\s-]', '', text)
        text = re.sub('\\s+', ' ', text).strip()
        text = text.replace(' ', '-')
        return text.lower()
    return [create_slug(text) for text in texts]",2f0365366ed67d20,25d5cc324cdaebbd,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,slugify_v1
1756744307.2590463,slugify_v1,slugify_v1_1756744307,gpt-4o-mini,0.2,"```python
import unicodedata
import re

def slugify(texts):
    def to_slug(text):
        text = unicodedata.normalize('NFKD', text)
        text = re.sub(r'[^\w\s-]', '', text)
        text = re.sub(r'[-\s]+', '-', text).strip('-')
        return text.lower()

    return [to_slug(text) for text in texts]
```","import unicodedata
import re

def slugify(texts):
    def to_slug(text):
        text = unicodedata.normalize('NFKD', text)
        text = re.sub(r'[^\w\s-]', '', text)
        text = re.sub(r'[-\s]+', '-', text).strip('-')
        return text.lower()

    return [to_slug(text) for text in texts]","import unicodedata
import re
def slugify(texts):
    def to_slug(text):
        text = unicodedata.normalize('NFKD', text)
        text = re.sub('[^\\w\\s-]', '', text)
        text = re.sub('[-\\s]+', '-', text).strip('-')
        return text.lower()
    return [to_slug(text) for text in texts]",7624257a7acbee5d,221b9e00359eeb39,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,slugify_v1
1756744310.1534872,slugify_v1,slugify_v1_1756744310,gpt-4o-mini,0.2,"```python
import unicodedata
import re

def slugify(texts):
    def create_slug(text):
        # Normalize the text to remove accents
        text = unicodedata.normalize('NFKD', text)
        # Remove unwanted characters and trim
        text = re.sub(r'[^\w\s-]', '', text).strip()
        # Replace spaces and collapse internal whitespace
        text = re.sub(r'[-\s]+', '-', text)
        # Convert to lowercase
        return text.lower()
    
    return [create_slug(text) for text in texts]
```","import unicodedata
import re

def slugify(texts):
    def create_slug(text):
        # Normalize the text to remove accents
        text = unicodedata.normalize('NFKD', text)
        # Remove unwanted characters and trim
        text = re.sub(r'[^\w\s-]', '', text).strip()
        # Replace spaces and collapse internal whitespace
        text = re.sub(r'[-\s]+', '-', text)
        # Convert to lowercase
        return text.lower()
    
    return [create_slug(text) for text in texts]","import unicodedata
import re
def slugify(texts):
    def create_slug(text):
        text = unicodedata.normalize('NFKD', text)
        text = re.sub('[^\\w\\s-]', '', text).strip()
        text = re.sub('[-\\s]+', '-', text)
        return text.lower()
    return [create_slug(text) for text in texts]",88fc4bbda6d0115e,bcabd4ffd486a1a2,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,slugify_v1
1756744313.4546218,slugify_v1,slugify_v1_1756744313,gpt-4o-mini,0.2,"```python
import unicodedata
import re

def slugify(texts):
    def slugify_single(text):
        # Normalize and remove accents
        text = unicodedata.normalize('NFKD', text)
        text = text.encode('ascii', 'ignore').decode('utf-8')
        # Trim and collapse whitespace
        text = re.sub(r'\s+', ' ', text).strip()
        # Replace spaces with '-'
        text = text.lower().replace(' ', '-')
        # Keep only letters, numbers, and '-'
        text = re.sub(r'[^a-z0-9-]', '', text)
        return text
    
    return [slugify_single(text) for text in texts]
```","import unicodedata
import re

def slugify(texts):
    def slugify_single(text):
        # Normalize and remove accents
        text = unicodedata.normalize('NFKD', text)
        text = text.encode('ascii', 'ignore').decode('utf-8')
        # Trim and collapse whitespace
        text = re.sub(r'\s+', ' ', text).strip()
        # Replace spaces with '-'
        text = text.lower().replace(' ', '-')
        # Keep only letters, numbers, and '-'
        text = re.sub(r'[^a-z0-9-]', '', text)
        return text
    
    return [slugify_single(text) for text in texts]","import unicodedata
import re
def slugify(texts):
    def slugify_single(text):
        text = unicodedata.normalize('NFKD', text)
        text = text.encode('ascii', 'ignore').decode('utf-8')
        text = re.sub('\\s+', ' ', text).strip()
        text = text.lower().replace(' ', '-')
        text = re.sub('[^a-z0-9-]', '', text)
        return text
    return [slugify_single(text) for text in texts]",2eaeb08788aa5031,628f4cb9bfacc1c0,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,slugify_v1
1756744316.3811183,slugify_v1,slugify_v1_1756744316,gpt-4o-mini,0.2,"```python
import unicodedata
import re

def slugify(texts):
    def slugify_single(text):
        # Normalize and remove accents
        text = unicodedata.normalize('NFKD', text)
        text = text.encode('ascii', 'ignore').decode('utf-8')
        # Trim, collapse whitespace, and convert to lowercase
        text = re.sub(r'\s+', ' ', text).strip().lower()
        # Replace spaces with '-' and keep only valid characters
        text = re.sub(r'[^a-z0-9 -]', '', text)
        text = text.replace(' ', '-')
        return text

    return [slugify_single(text) for text in texts]
```","import unicodedata
import re

def slugify(texts):
    def slugify_single(text):
        # Normalize and remove accents
        text = unicodedata.normalize('NFKD', text)
        text = text.encode('ascii', 'ignore').decode('utf-8')
        # Trim, collapse whitespace, and convert to lowercase
        text = re.sub(r'\s+', ' ', text).strip().lower()
        # Replace spaces with '-' and keep only valid characters
        text = re.sub(r'[^a-z0-9 -]', '', text)
        text = text.replace(' ', '-')
        return text

    return [slugify_single(text) for text in texts]","import unicodedata
import re
def slugify(texts):
    def slugify_single(text):
        text = unicodedata.normalize('NFKD', text)
        text = text.encode('ascii', 'ignore').decode('utf-8')
        text = re.sub('\\s+', ' ', text).strip().lower()
        text = re.sub('[^a-z0-9 -]', '', text)
        text = text.replace(' ', '-')
        return text
    return [slugify_single(text) for text in texts]",fcd984902f5c17e2,460a64b1c147fc67,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,slugify_v1
1756744319.7300491,slugify_v1,slugify_v1_1756744319,gpt-4o-mini,0.2,"```python
import unicodedata
import re

def slugify(texts):
    def slugify_text(text):
        # Normalize the text to remove accents
        text = unicodedata.normalize('NFKD', text)
        # Remove non-ASCII characters
        text = re.sub(r'[^\w\s-]', '', text)
        # Replace spaces and collapse internal whitespace
        text = re.sub(r'\s+', ' ', text).strip()
        # Convert to lowercase and replace spaces with '-'
        return re.sub(r'\s+', '-', text.lower())
    
    return [slugify_text(text) for text in texts]
```","import unicodedata
import re

def slugify(texts):
    def slugify_text(text):
        # Normalize the text to remove accents
        text = unicodedata.normalize('NFKD', text)
        # Remove non-ASCII characters
        text = re.sub(r'[^\w\s-]', '', text)
        # Replace spaces and collapse internal whitespace
        text = re.sub(r'\s+', ' ', text).strip()
        # Convert to lowercase and replace spaces with '-'
        return re.sub(r'\s+', '-', text.lower())
    
    return [slugify_text(text) for text in texts]","import unicodedata
import re
def slugify(texts):
    def slugify_text(text):
        text = unicodedata.normalize('NFKD', text)
        text = re.sub('[^\\w\\s-]', '', text)
        text = re.sub('\\s+', ' ', text).strip()
        return re.sub('\\s+', '-', text.lower())
    return [slugify_text(text) for text in texts]",cb58fadc09b526c9,d5746b78fbb38430,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,slugify_v1
1756744323.9407294,slugify_v1,slugify_v1_1756744323,gpt-4o-mini,0.2,"```python
import unicodedata
import re

def slugify(texts):
    def slugify_text(text):
        # Normalize the text to remove accents
        text = unicodedata.normalize('NFKD', text)
        # Remove non-ASCII characters
        text = re.sub(r'[^\w\s-]', '', text)
        # Replace spaces and collapse whitespace
        text = re.sub(r'\s+', ' ', text).strip()
        # Convert to lowercase and replace spaces with '-'
        return re.sub(r'[-\s]+', '-', text.lower())

    return [slugify_text(text) for text in texts]
```","import unicodedata
import re

def slugify(texts):
    def slugify_text(text):
        # Normalize the text to remove accents
        text = unicodedata.normalize('NFKD', text)
        # Remove non-ASCII characters
        text = re.sub(r'[^\w\s-]', '', text)
        # Replace spaces and collapse whitespace
        text = re.sub(r'\s+', ' ', text).strip()
        # Convert to lowercase and replace spaces with '-'
        return re.sub(r'[-\s]+', '-', text.lower())

    return [slugify_text(text) for text in texts]","import unicodedata
import re
def slugify(texts):
    def slugify_text(text):
        text = unicodedata.normalize('NFKD', text)
        text = re.sub('[^\\w\\s-]', '', text)
        text = re.sub('\\s+', ' ', text).strip()
        return re.sub('[-\\s]+', '-', text.lower())
    return [slugify_text(text) for text in texts]",9e15c2f1e9b289a5,50a837613cde9c51,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,slugify_v1
1756744327.1524103,slugify_v2,slugify_v2_1756744327,gpt-4o-mini,0.0,"```python
import unicodedata
import re

def slugify(texts):
    def normalize_and_slugify(text):
        # Normalize to NFKD
        normalized = unicodedata.normalize('NFKD', text)
        # Remove diacritics
        no_diacritics = normalized.encode('ascii', 'ignore').decode('utf-8')
        # Strip, collapse spaces, lower, and replace spaces with '-'
        slug = re.sub(r'\s+', '-', no_diacritics.strip().lower())
        # Remove characters not in [a-z0-9-]
        slug = re.sub(r'[^a-z0-9-]', '', slug)
        return slug

    return [normalize_and_slugify(text) for text in texts]
```","import unicodedata
import re

def slugify(texts):
    def normalize_and_slugify(text):
        # Normalize to NFKD
        normalized = unicodedata.normalize('NFKD', text)
        # Remove diacritics
        no_diacritics = normalized.encode('ascii', 'ignore').decode('utf-8')
        # Strip, collapse spaces, lower, and replace spaces with '-'
        slug = re.sub(r'\s+', '-', no_diacritics.strip().lower())
        # Remove characters not in [a-z0-9-]
        slug = re.sub(r'[^a-z0-9-]', '', slug)
        return slug

    return [normalize_and_slugify(text) for text in texts]","import unicodedata
import re
def slugify(texts):
    def normalize_and_slugify(text):
        normalized = unicodedata.normalize('NFKD', text)
        no_diacritics = normalized.encode('ascii', 'ignore').decode('utf-8')
        slug = re.sub('\\s+', '-', no_diacritics.strip().lower())
        slug = re.sub('[^a-z0-9-]', '', slug)
        return slug
    return [normalize_and_slugify(text) for text in texts]",4f52894c4adeeb0d,dfc592cc1f9cf533,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,slugify_v2
1756744330.2574556,slugify_v2,slugify_v2_1756744330,gpt-4o-mini,0.0,"```python
import unicodedata
import re

def slugify(texts):
    def normalize_and_slugify(text):
        # Normalize to NFKD
        normalized = unicodedata.normalize('NFKD', text)
        # Remove diacritics
        no_diacritics = normalized.encode('ascii', 'ignore').decode('utf-8')
        # Strip, collapse spaces, lower, and replace spaces with '-'
        slug = re.sub(r'\s+', '-', no_diacritics.strip().lower())
        # Remove characters not in [a-z0-9-]
        slug = re.sub(r'[^a-z0-9-]', '', slug)
        return slug

    return [normalize_and_slugify(text) for text in texts]
```","import unicodedata
import re

def slugify(texts):
    def normalize_and_slugify(text):
        # Normalize to NFKD
        normalized = unicodedata.normalize('NFKD', text)
        # Remove diacritics
        no_diacritics = normalized.encode('ascii', 'ignore').decode('utf-8')
        # Strip, collapse spaces, lower, and replace spaces with '-'
        slug = re.sub(r'\s+', '-', no_diacritics.strip().lower())
        # Remove characters not in [a-z0-9-]
        slug = re.sub(r'[^a-z0-9-]', '', slug)
        return slug

    return [normalize_and_slugify(text) for text in texts]","import unicodedata
import re
def slugify(texts):
    def normalize_and_slugify(text):
        normalized = unicodedata.normalize('NFKD', text)
        no_diacritics = normalized.encode('ascii', 'ignore').decode('utf-8')
        slug = re.sub('\\s+', '-', no_diacritics.strip().lower())
        slug = re.sub('[^a-z0-9-]', '', slug)
        return slug
    return [normalize_and_slugify(text) for text in texts]",4f52894c4adeeb0d,dfc592cc1f9cf533,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,slugify_v2
1756744333.512191,slugify_v2,slugify_v2_1756744333,gpt-4o-mini,0.0,"```python
import unicodedata
import re

def slugify(texts):
    def normalize_and_slugify(text):
        # Normalize to NFKD
        normalized = unicodedata.normalize('NFKD', text)
        # Remove diacritics
        no_diacritics = normalized.encode('ascii', 'ignore').decode('utf-8')
        # Strip, collapse spaces, lower, and replace spaces with '-'
        slug = re.sub(r'\s+', '-', no_diacritics.strip().lower())
        # Remove characters not in [a-z0-9-]
        slug = re.sub(r'[^a-z0-9-]', '', slug)
        return slug

    return [normalize_and_slugify(text) for text in texts]
```","import unicodedata
import re

def slugify(texts):
    def normalize_and_slugify(text):
        # Normalize to NFKD
        normalized = unicodedata.normalize('NFKD', text)
        # Remove diacritics
        no_diacritics = normalized.encode('ascii', 'ignore').decode('utf-8')
        # Strip, collapse spaces, lower, and replace spaces with '-'
        slug = re.sub(r'\s+', '-', no_diacritics.strip().lower())
        # Remove characters not in [a-z0-9-]
        slug = re.sub(r'[^a-z0-9-]', '', slug)
        return slug

    return [normalize_and_slugify(text) for text in texts]","import unicodedata
import re
def slugify(texts):
    def normalize_and_slugify(text):
        normalized = unicodedata.normalize('NFKD', text)
        no_diacritics = normalized.encode('ascii', 'ignore').decode('utf-8')
        slug = re.sub('\\s+', '-', no_diacritics.strip().lower())
        slug = re.sub('[^a-z0-9-]', '', slug)
        return slug
    return [normalize_and_slugify(text) for text in texts]",4f52894c4adeeb0d,dfc592cc1f9cf533,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,slugify_v2
1756744337.1099446,slugify_v2,slugify_v2_1756744337,gpt-4o-mini,0.0,"```python
import unicodedata
import re

def slugify(texts):
    def normalize_and_slugify(text):
        # Normalize to NFKD
        normalized = unicodedata.normalize('NFKD', text)
        # Remove diacritics
        no_diacritics = normalized.encode('ascii', 'ignore').decode('utf-8')
        # Strip, collapse spaces, lower, and replace spaces with '-'
        slug = re.sub(r'\s+', '-', no_diacritics.strip().lower())
        # Remove characters not in [a-z0-9-]
        slug = re.sub(r'[^a-z0-9-]', '', slug)
        return slug

    return [normalize_and_slugify(text) for text in texts]
```","import unicodedata
import re

def slugify(texts):
    def normalize_and_slugify(text):
        # Normalize to NFKD
        normalized = unicodedata.normalize('NFKD', text)
        # Remove diacritics
        no_diacritics = normalized.encode('ascii', 'ignore').decode('utf-8')
        # Strip, collapse spaces, lower, and replace spaces with '-'
        slug = re.sub(r'\s+', '-', no_diacritics.strip().lower())
        # Remove characters not in [a-z0-9-]
        slug = re.sub(r'[^a-z0-9-]', '', slug)
        return slug

    return [normalize_and_slugify(text) for text in texts]","import unicodedata
import re
def slugify(texts):
    def normalize_and_slugify(text):
        normalized = unicodedata.normalize('NFKD', text)
        no_diacritics = normalized.encode('ascii', 'ignore').decode('utf-8')
        slug = re.sub('\\s+', '-', no_diacritics.strip().lower())
        slug = re.sub('[^a-z0-9-]', '', slug)
        return slug
    return [normalize_and_slugify(text) for text in texts]",4f52894c4adeeb0d,dfc592cc1f9cf533,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,slugify_v2
1756744340.426687,slugify_v2,slugify_v2_1756744340,gpt-4o-mini,0.0,"```python
import unicodedata
import re

def slugify(texts):
    def normalize_and_slugify(text):
        # Normalize to NFKD
        normalized = unicodedata.normalize('NFKD', text)
        # Remove diacritics
        no_diacritics = normalized.encode('ascii', 'ignore').decode('utf-8')
        # Strip, collapse spaces, lower, and replace spaces with '-'
        slug = re.sub(r'\s+', '-', no_diacritics.strip().lower())
        # Remove characters not in [a-z0-9-]
        slug = re.sub(r'[^a-z0-9-]', '', slug)
        return slug

    return [normalize_and_slugify(text) for text in texts]
```","import unicodedata
import re

def slugify(texts):
    def normalize_and_slugify(text):
        # Normalize to NFKD
        normalized = unicodedata.normalize('NFKD', text)
        # Remove diacritics
        no_diacritics = normalized.encode('ascii', 'ignore').decode('utf-8')
        # Strip, collapse spaces, lower, and replace spaces with '-'
        slug = re.sub(r'\s+', '-', no_diacritics.strip().lower())
        # Remove characters not in [a-z0-9-]
        slug = re.sub(r'[^a-z0-9-]', '', slug)
        return slug

    return [normalize_and_slugify(text) for text in texts]","import unicodedata
import re
def slugify(texts):
    def normalize_and_slugify(text):
        normalized = unicodedata.normalize('NFKD', text)
        no_diacritics = normalized.encode('ascii', 'ignore').decode('utf-8')
        slug = re.sub('\\s+', '-', no_diacritics.strip().lower())
        slug = re.sub('[^a-z0-9-]', '', slug)
        return slug
    return [normalize_and_slugify(text) for text in texts]",4f52894c4adeeb0d,dfc592cc1f9cf533,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,slugify_v2
1756744345.8162467,slugify_v2,slugify_v2_1756744345,gpt-4o-mini,0.0,"```python
import unicodedata
import re

def slugify(texts):
    def normalize_and_slugify(text):
        # Normalize to NFKD
        normalized = unicodedata.normalize('NFKD', text)
        # Remove diacritics
        no_diacritics = normalized.encode('ascii', 'ignore').decode('utf-8')
        # Strip, collapse spaces, lower, and replace spaces with '-'
        slug = re.sub(r'\s+', '-', no_diacritics.strip().lower())
        # Remove characters not in [a-z0-9-]
        slug = re.sub(r'[^a-z0-9-]', '', slug)
        return slug

    return [normalize_and_slugify(text) for text in texts]
```","import unicodedata
import re

def slugify(texts):
    def normalize_and_slugify(text):
        # Normalize to NFKD
        normalized = unicodedata.normalize('NFKD', text)
        # Remove diacritics
        no_diacritics = normalized.encode('ascii', 'ignore').decode('utf-8')
        # Strip, collapse spaces, lower, and replace spaces with '-'
        slug = re.sub(r'\s+', '-', no_diacritics.strip().lower())
        # Remove characters not in [a-z0-9-]
        slug = re.sub(r'[^a-z0-9-]', '', slug)
        return slug

    return [normalize_and_slugify(text) for text in texts]","import unicodedata
import re
def slugify(texts):
    def normalize_and_slugify(text):
        normalized = unicodedata.normalize('NFKD', text)
        no_diacritics = normalized.encode('ascii', 'ignore').decode('utf-8')
        slug = re.sub('\\s+', '-', no_diacritics.strip().lower())
        slug = re.sub('[^a-z0-9-]', '', slug)
        return slug
    return [normalize_and_slugify(text) for text in texts]",4f52894c4adeeb0d,dfc592cc1f9cf533,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,slugify_v2
1756744349.5417297,slugify_v2,slugify_v2_1756744349,gpt-4o-mini,0.0,"```python
import unicodedata
import re

def slugify(texts):
    def normalize_and_slugify(text):
        # Normalize to NFKD
        normalized = unicodedata.normalize('NFKD', text)
        # Remove diacritics
        no_diacritics = normalized.encode('ascii', 'ignore').decode('utf-8')
        # Strip, collapse spaces, lower, and replace spaces with '-'
        slug = re.sub(r'\s+', '-', no_diacritics.strip().lower())
        # Remove characters not in [a-z0-9-]
        slug = re.sub(r'[^a-z0-9-]', '', slug)
        return slug

    return [normalize_and_slugify(text) for text in texts]
```","import unicodedata
import re

def slugify(texts):
    def normalize_and_slugify(text):
        # Normalize to NFKD
        normalized = unicodedata.normalize('NFKD', text)
        # Remove diacritics
        no_diacritics = normalized.encode('ascii', 'ignore').decode('utf-8')
        # Strip, collapse spaces, lower, and replace spaces with '-'
        slug = re.sub(r'\s+', '-', no_diacritics.strip().lower())
        # Remove characters not in [a-z0-9-]
        slug = re.sub(r'[^a-z0-9-]', '', slug)
        return slug

    return [normalize_and_slugify(text) for text in texts]","import unicodedata
import re
def slugify(texts):
    def normalize_and_slugify(text):
        normalized = unicodedata.normalize('NFKD', text)
        no_diacritics = normalized.encode('ascii', 'ignore').decode('utf-8')
        slug = re.sub('\\s+', '-', no_diacritics.strip().lower())
        slug = re.sub('[^a-z0-9-]', '', slug)
        return slug
    return [normalize_and_slugify(text) for text in texts]",4f52894c4adeeb0d,dfc592cc1f9cf533,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,slugify_v2
1756744352.836379,slugify_v2,slugify_v2_1756744352,gpt-4o-mini,0.0,"```python
import unicodedata
import re

def slugify(texts):
    def normalize_and_slugify(text):
        # Normalize to NFKD
        normalized = unicodedata.normalize('NFKD', text)
        # Remove diacritics
        no_diacritics = normalized.encode('ascii', 'ignore').decode('utf-8')
        # Strip, collapse spaces, lower, and replace spaces with '-'
        slug = re.sub(r'\s+', '-', no_diacritics.strip().lower())
        # Remove characters not in [a-z0-9-]
        slug = re.sub(r'[^a-z0-9-]', '', slug)
        return slug

    return [normalize_and_slugify(text) for text in texts]
```","import unicodedata
import re

def slugify(texts):
    def normalize_and_slugify(text):
        # Normalize to NFKD
        normalized = unicodedata.normalize('NFKD', text)
        # Remove diacritics
        no_diacritics = normalized.encode('ascii', 'ignore').decode('utf-8')
        # Strip, collapse spaces, lower, and replace spaces with '-'
        slug = re.sub(r'\s+', '-', no_diacritics.strip().lower())
        # Remove characters not in [a-z0-9-]
        slug = re.sub(r'[^a-z0-9-]', '', slug)
        return slug

    return [normalize_and_slugify(text) for text in texts]","import unicodedata
import re
def slugify(texts):
    def normalize_and_slugify(text):
        normalized = unicodedata.normalize('NFKD', text)
        no_diacritics = normalized.encode('ascii', 'ignore').decode('utf-8')
        slug = re.sub('\\s+', '-', no_diacritics.strip().lower())
        slug = re.sub('[^a-z0-9-]', '', slug)
        return slug
    return [normalize_and_slugify(text) for text in texts]",4f52894c4adeeb0d,dfc592cc1f9cf533,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,slugify_v2
1756744356.3098965,slugify_v2,slugify_v2_1756744356,gpt-4o-mini,0.0,"```python
import unicodedata
import re

def slugify(texts):
    def normalize_and_slugify(text):
        # Normalize to NFKD
        normalized = unicodedata.normalize('NFKD', text)
        # Remove diacritics
        no_diacritics = normalized.encode('ascii', 'ignore').decode('utf-8')
        # Strip, collapse spaces, lower, and replace spaces with '-'
        slug = re.sub(r'\s+', '-', no_diacritics.strip().lower())
        # Remove characters not in [a-z0-9-]
        slug = re.sub(r'[^a-z0-9-]', '', slug)
        return slug

    return [normalize_and_slugify(text) for text in texts]
```","import unicodedata
import re

def slugify(texts):
    def normalize_and_slugify(text):
        # Normalize to NFKD
        normalized = unicodedata.normalize('NFKD', text)
        # Remove diacritics
        no_diacritics = normalized.encode('ascii', 'ignore').decode('utf-8')
        # Strip, collapse spaces, lower, and replace spaces with '-'
        slug = re.sub(r'\s+', '-', no_diacritics.strip().lower())
        # Remove characters not in [a-z0-9-]
        slug = re.sub(r'[^a-z0-9-]', '', slug)
        return slug

    return [normalize_and_slugify(text) for text in texts]","import unicodedata
import re
def slugify(texts):
    def normalize_and_slugify(text):
        normalized = unicodedata.normalize('NFKD', text)
        no_diacritics = normalized.encode('ascii', 'ignore').decode('utf-8')
        slug = re.sub('\\s+', '-', no_diacritics.strip().lower())
        slug = re.sub('[^a-z0-9-]', '', slug)
        return slug
    return [normalize_and_slugify(text) for text in texts]",4f52894c4adeeb0d,dfc592cc1f9cf533,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,slugify_v2
1756744360.7912033,slugify_v2,slugify_v2_1756744360,gpt-4o-mini,0.0,"```python
import unicodedata
import re

def slugify(texts):
    def normalize_and_slugify(text):
        # Normalize to NFKD
        normalized = unicodedata.normalize('NFKD', text)
        # Remove diacritics
        no_diacritics = normalized.encode('ascii', 'ignore').decode('utf-8')
        # Strip, collapse spaces, lower, and replace spaces with '-'
        slug = re.sub(r'\s+', '-', no_diacritics.strip().lower())
        # Remove characters not in [a-z0-9-]
        slug = re.sub(r'[^a-z0-9-]', '', slug)
        return slug

    return [normalize_and_slugify(text) for text in texts]
```","import unicodedata
import re

def slugify(texts):
    def normalize_and_slugify(text):
        # Normalize to NFKD
        normalized = unicodedata.normalize('NFKD', text)
        # Remove diacritics
        no_diacritics = normalized.encode('ascii', 'ignore').decode('utf-8')
        # Strip, collapse spaces, lower, and replace spaces with '-'
        slug = re.sub(r'\s+', '-', no_diacritics.strip().lower())
        # Remove characters not in [a-z0-9-]
        slug = re.sub(r'[^a-z0-9-]', '', slug)
        return slug

    return [normalize_and_slugify(text) for text in texts]","import unicodedata
import re
def slugify(texts):
    def normalize_and_slugify(text):
        normalized = unicodedata.normalize('NFKD', text)
        no_diacritics = normalized.encode('ascii', 'ignore').decode('utf-8')
        slug = re.sub('\\s+', '-', no_diacritics.strip().lower())
        slug = re.sub('[^a-z0-9-]', '', slug)
        return slug
    return [normalize_and_slugify(text) for text in texts]",4f52894c4adeeb0d,dfc592cc1f9cf533,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,slugify_v2
1756744363.5911841,slugify_v2,slugify_v2_1756744363,gpt-4o-mini,0.2,"```python
import unicodedata
import re

def slugify(texts):
    def normalize_and_slugify(text):
        # Normalize to NFKD
        normalized = unicodedata.normalize('NFKD', text)
        # Remove diacritics
        no_diacritics = normalized.encode('ascii', 'ignore').decode('utf-8')
        # Strip, collapse spaces, lower, and replace spaces with '-'
        slug = re.sub(r'\s+', '-', no_diacritics.strip().lower())
        # Remove characters not in [a-z0-9-]
        slug = re.sub(r'[^a-z0-9-]', '', slug)
        return slug

    return [normalize_and_slugify(text) for text in texts]
```","import unicodedata
import re

def slugify(texts):
    def normalize_and_slugify(text):
        # Normalize to NFKD
        normalized = unicodedata.normalize('NFKD', text)
        # Remove diacritics
        no_diacritics = normalized.encode('ascii', 'ignore').decode('utf-8')
        # Strip, collapse spaces, lower, and replace spaces with '-'
        slug = re.sub(r'\s+', '-', no_diacritics.strip().lower())
        # Remove characters not in [a-z0-9-]
        slug = re.sub(r'[^a-z0-9-]', '', slug)
        return slug

    return [normalize_and_slugify(text) for text in texts]","import unicodedata
import re
def slugify(texts):
    def normalize_and_slugify(text):
        normalized = unicodedata.normalize('NFKD', text)
        no_diacritics = normalized.encode('ascii', 'ignore').decode('utf-8')
        slug = re.sub('\\s+', '-', no_diacritics.strip().lower())
        slug = re.sub('[^a-z0-9-]', '', slug)
        return slug
    return [normalize_and_slugify(text) for text in texts]",4f52894c4adeeb0d,dfc592cc1f9cf533,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,slugify_v2
1756744368.38054,slugify_v2,slugify_v2_1756744368,gpt-4o-mini,0.2,"```python
import unicodedata
import re

def slugify(texts):
    def normalize_and_slugify(text):
        # Normalize to NFKD and remove diacritics
        normalized = unicodedata.normalize('NFKD', text)
        # Encode to ASCII and decode back to string, removing non-ASCII characters
        ascii_text = normalized.encode('ascii', 'ignore').decode('utf-8')
        # Lowercase, strip, and replace spaces with hyphens
        slug = re.sub(r'\s+', '-', ascii_text.strip().lower())
        # Remove characters not in [a-z0-9-]
        slug = re.sub(r'[^a-z0-9-]', '', slug)
        return slug

    return [normalize_and_slugify(text) for text in texts]
```","import unicodedata
import re

def slugify(texts):
    def normalize_and_slugify(text):
        # Normalize to NFKD and remove diacritics
        normalized = unicodedata.normalize('NFKD', text)
        # Encode to ASCII and decode back to string, removing non-ASCII characters
        ascii_text = normalized.encode('ascii', 'ignore').decode('utf-8')
        # Lowercase, strip, and replace spaces with hyphens
        slug = re.sub(r'\s+', '-', ascii_text.strip().lower())
        # Remove characters not in [a-z0-9-]
        slug = re.sub(r'[^a-z0-9-]', '', slug)
        return slug

    return [normalize_and_slugify(text) for text in texts]","import unicodedata
import re
def slugify(texts):
    def normalize_and_slugify(text):
        normalized = unicodedata.normalize('NFKD', text)
        ascii_text = normalized.encode('ascii', 'ignore').decode('utf-8')
        slug = re.sub('\\s+', '-', ascii_text.strip().lower())
        slug = re.sub('[^a-z0-9-]', '', slug)
        return slug
    return [normalize_and_slugify(text) for text in texts]",a9be0be4d9703843,eb2304c648f21a0e,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,slugify_v2
1756744370.7162933,slugify_v2,slugify_v2_1756744370,gpt-4o-mini,0.2,"```python
import unicodedata
import re

def slugify(texts):
    def normalize_and_slugify(text):
        # Normalize to NFKD
        normalized = unicodedata.normalize('NFKD', text)
        # Remove diacritics and unwanted characters
        cleaned = re.sub(r'[^a-zA-Z0-9\s]', '', normalized)
        # Strip, collapse spaces, lower, and replace spaces with '-'
        slug = re.sub(r'\s+', '-', cleaned.strip().lower())
        return slug

    return [normalize_and_slugify(text) for text in texts]
```","import unicodedata
import re

def slugify(texts):
    def normalize_and_slugify(text):
        # Normalize to NFKD
        normalized = unicodedata.normalize('NFKD', text)
        # Remove diacritics and unwanted characters
        cleaned = re.sub(r'[^a-zA-Z0-9\s]', '', normalized)
        # Strip, collapse spaces, lower, and replace spaces with '-'
        slug = re.sub(r'\s+', '-', cleaned.strip().lower())
        return slug

    return [normalize_and_slugify(text) for text in texts]","import unicodedata
import re
def slugify(texts):
    def normalize_and_slugify(text):
        normalized = unicodedata.normalize('NFKD', text)
        cleaned = re.sub('[^a-zA-Z0-9\\s]', '', normalized)
        slug = re.sub('\\s+', '-', cleaned.strip().lower())
        return slug
    return [normalize_and_slugify(text) for text in texts]",2da355be32872ac8,dc0e1ef3791df840,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,slugify_v2
1756744373.2703946,slugify_v2,slugify_v2_1756744373,gpt-4o-mini,0.2,"```python
import unicodedata
import re

def slugify(texts):
    def normalize_and_slugify(text):
        # Normalize to NFKD
        normalized = unicodedata.normalize('NFKD', text)
        # Remove diacritics
        no_diacritics = normalized.encode('ascii', 'ignore').decode('utf-8')
        # Strip, collapse spaces, lower, replace spaces with '-', and remove unwanted characters
        slug = re.sub(r'[^a-zA-Z0-9\s-]', '', no_diacritics)
        slug = re.sub(r'\s+', '-', slug.strip().lower())
        return slug

    return [normalize_and_slugify(text) for text in texts]
```","import unicodedata
import re

def slugify(texts):
    def normalize_and_slugify(text):
        # Normalize to NFKD
        normalized = unicodedata.normalize('NFKD', text)
        # Remove diacritics
        no_diacritics = normalized.encode('ascii', 'ignore').decode('utf-8')
        # Strip, collapse spaces, lower, replace spaces with '-', and remove unwanted characters
        slug = re.sub(r'[^a-zA-Z0-9\s-]', '', no_diacritics)
        slug = re.sub(r'\s+', '-', slug.strip().lower())
        return slug

    return [normalize_and_slugify(text) for text in texts]","import unicodedata
import re
def slugify(texts):
    def normalize_and_slugify(text):
        normalized = unicodedata.normalize('NFKD', text)
        no_diacritics = normalized.encode('ascii', 'ignore').decode('utf-8')
        slug = re.sub('[^a-zA-Z0-9\\s-]', '', no_diacritics)
        slug = re.sub('\\s+', '-', slug.strip().lower())
        return slug
    return [normalize_and_slugify(text) for text in texts]",bd48c5f2309cbc2a,ba75a1219896b3cd,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,slugify_v2
1756744375.6905427,slugify_v2,slugify_v2_1756744375,gpt-4o-mini,0.2,"```python
import unicodedata
import re

def slugify(texts):
    def normalize_and_slugify(text):
        # Normalize to NFKD
        normalized = unicodedata.normalize('NFKD', text)
        # Remove diacritics and unwanted characters
        cleaned = re.sub(r'[^\w\s-]', '', normalized)
        # Strip, collapse spaces, lower, and replace spaces with '-'
        slug = re.sub(r'\s+', '-', cleaned.strip().lower())
        return slug
    
    return [normalize_and_slugify(text) for text in texts]
```","import unicodedata
import re

def slugify(texts):
    def normalize_and_slugify(text):
        # Normalize to NFKD
        normalized = unicodedata.normalize('NFKD', text)
        # Remove diacritics and unwanted characters
        cleaned = re.sub(r'[^\w\s-]', '', normalized)
        # Strip, collapse spaces, lower, and replace spaces with '-'
        slug = re.sub(r'\s+', '-', cleaned.strip().lower())
        return slug
    
    return [normalize_and_slugify(text) for text in texts]","import unicodedata
import re
def slugify(texts):
    def normalize_and_slugify(text):
        normalized = unicodedata.normalize('NFKD', text)
        cleaned = re.sub('[^\\w\\s-]', '', normalized)
        slug = re.sub('\\s+', '-', cleaned.strip().lower())
        return slug
    return [normalize_and_slugify(text) for text in texts]",cd311214e4872f4b,09fcbd5a8e62a260,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,slugify_v2
1756744379.3006964,slugify_v2,slugify_v2_1756744379,gpt-4o-mini,0.2,"```python
import unicodedata
import re

def slugify(texts):
    def normalize_and_slugify(text):
        # Normalize to NFKD and remove accents
        normalized = unicodedata.normalize('NFKD', text)
        # Remove diacritics
        no_diacritics = normalized.encode('ascii', 'ignore').decode('utf-8')
        # Strip, collapse spaces, lower, and replace spaces with '-'
        slug = re.sub(r'\s+', '-', no_diacritics.strip().lower())
        # Remove characters not in [a-z0-9-]
        slug = re.sub(r'[^a-z0-9-]', '', slug)
        return slug

    return [normalize_and_slugify(text) for text in texts]
```","import unicodedata
import re

def slugify(texts):
    def normalize_and_slugify(text):
        # Normalize to NFKD and remove accents
        normalized = unicodedata.normalize('NFKD', text)
        # Remove diacritics
        no_diacritics = normalized.encode('ascii', 'ignore').decode('utf-8')
        # Strip, collapse spaces, lower, and replace spaces with '-'
        slug = re.sub(r'\s+', '-', no_diacritics.strip().lower())
        # Remove characters not in [a-z0-9-]
        slug = re.sub(r'[^a-z0-9-]', '', slug)
        return slug

    return [normalize_and_slugify(text) for text in texts]","import unicodedata
import re
def slugify(texts):
    def normalize_and_slugify(text):
        normalized = unicodedata.normalize('NFKD', text)
        no_diacritics = normalized.encode('ascii', 'ignore').decode('utf-8')
        slug = re.sub('\\s+', '-', no_diacritics.strip().lower())
        slug = re.sub('[^a-z0-9-]', '', slug)
        return slug
    return [normalize_and_slugify(text) for text in texts]",b64cab59af6f2a7c,dfc592cc1f9cf533,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,slugify_v2
1756744382.8043494,slugify_v2,slugify_v2_1756744382,gpt-4o-mini,0.2,"```python
import unicodedata
import re

def slugify(texts):
    def normalize_and_slugify(text):
        # Normalize to NFKD
        text = unicodedata.normalize('NFKD', text)
        # Remove diacritics
        text = ''.join(c for c in text if unicodedata.category(c) != 'Mn')
        # Strip, collapse spaces, lower, and replace spaces with '-'
        text = re.sub(r'\s+', '-', text.strip().lower())
        # Remove characters not in [a-z0-9-]
        text = re.sub(r'[^a-z0-9-]', '', text)
        return text

    return [normalize_and_slugify(text) for text in texts]
```","import unicodedata
import re

def slugify(texts):
    def normalize_and_slugify(text):
        # Normalize to NFKD
        text = unicodedata.normalize('NFKD', text)
        # Remove diacritics
        text = ''.join(c for c in text if unicodedata.category(c) != 'Mn')
        # Strip, collapse spaces, lower, and replace spaces with '-'
        text = re.sub(r'\s+', '-', text.strip().lower())
        # Remove characters not in [a-z0-9-]
        text = re.sub(r'[^a-z0-9-]', '', text)
        return text

    return [normalize_and_slugify(text) for text in texts]","import unicodedata
import re
def slugify(texts):
    def normalize_and_slugify(text):
        text = unicodedata.normalize('NFKD', text)
        text = ''.join((c for c in text if unicodedata.category(c) != 'Mn'))
        text = re.sub('\\s+', '-', text.strip().lower())
        text = re.sub('[^a-z0-9-]', '', text)
        return text
    return [normalize_and_slugify(text) for text in texts]",72c3a731519ea1ed,e306dbaece24865e,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,slugify_v2
1756744387.68347,slugify_v2,slugify_v2_1756744387,gpt-4o-mini,0.2,"```python
import unicodedata
import re

def slugify(texts):
    def normalize_and_slugify(text):
        # Normalize to NFKD
        normalized = unicodedata.normalize('NFKD', text)
        # Remove diacritics
        no_diacritics = normalized.encode('ascii', 'ignore').decode('utf-8')
        # Strip, collapse spaces, lower, and replace spaces with '-'
        slug = re.sub(r'\s+', '-', no_diacritics.strip().lower())
        # Remove characters not in [a-z0-9-]
        slug = re.sub(r'[^a-z0-9-]', '', slug)
        return slug

    return [normalize_and_slugify(text) for text in texts]
```","import unicodedata
import re

def slugify(texts):
    def normalize_and_slugify(text):
        # Normalize to NFKD
        normalized = unicodedata.normalize('NFKD', text)
        # Remove diacritics
        no_diacritics = normalized.encode('ascii', 'ignore').decode('utf-8')
        # Strip, collapse spaces, lower, and replace spaces with '-'
        slug = re.sub(r'\s+', '-', no_diacritics.strip().lower())
        # Remove characters not in [a-z0-9-]
        slug = re.sub(r'[^a-z0-9-]', '', slug)
        return slug

    return [normalize_and_slugify(text) for text in texts]","import unicodedata
import re
def slugify(texts):
    def normalize_and_slugify(text):
        normalized = unicodedata.normalize('NFKD', text)
        no_diacritics = normalized.encode('ascii', 'ignore').decode('utf-8')
        slug = re.sub('\\s+', '-', no_diacritics.strip().lower())
        slug = re.sub('[^a-z0-9-]', '', slug)
        return slug
    return [normalize_and_slugify(text) for text in texts]",4f52894c4adeeb0d,dfc592cc1f9cf533,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,slugify_v2
1756744391.41776,slugify_v2,slugify_v2_1756744391,gpt-4o-mini,0.2,"```python
import unicodedata
import re

def slugify(texts):
    slugs = []
    for text in texts:
        # Normalize and remove accents
        normalized = unicodedata.normalize('NFKD', text)
        # Remove diacritics
        no_diacritics = normalized.encode('ascii', 'ignore').decode('utf-8')
        # Strip, collapse spaces, lower, and replace spaces with '-'
        slug = re.sub(r'\s+', '-', no_diacritics.strip().lower())
        # Remove characters not in [a-z0-9-]
        slug = re.sub(r'[^a-z0-9-]', '', slug)
        slugs.append(slug)
    return slugs
```","import unicodedata
import re

def slugify(texts):
    slugs = []
    for text in texts:
        # Normalize and remove accents
        normalized = unicodedata.normalize('NFKD', text)
        # Remove diacritics
        no_diacritics = normalized.encode('ascii', 'ignore').decode('utf-8')
        # Strip, collapse spaces, lower, and replace spaces with '-'
        slug = re.sub(r'\s+', '-', no_diacritics.strip().lower())
        # Remove characters not in [a-z0-9-]
        slug = re.sub(r'[^a-z0-9-]', '', slug)
        slugs.append(slug)
    return slugs","import unicodedata
import re
def slugify(texts):
    slugs = []
    for text in texts:
        normalized = unicodedata.normalize('NFKD', text)
        no_diacritics = normalized.encode('ascii', 'ignore').decode('utf-8')
        slug = re.sub('\\s+', '-', no_diacritics.strip().lower())
        slug = re.sub('[^a-z0-9-]', '', slug)
        slugs.append(slug)
    return slugs",6d54c7641e384063,e7e0da8e08e9c010,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,slugify_v2
1756744395.3866782,slugify_v2,slugify_v2_1756744395,gpt-4o-mini,0.2,"```python
import unicodedata
import re

def slugify(texts):
    def normalize_and_slugify(text):
        # Normalize to NFKD
        normalized = unicodedata.normalize('NFKD', text)
        # Remove diacritics
        no_diacritics = normalized.encode('ascii', 'ignore').decode('utf-8')
        # Strip, collapse spaces, lower, replace spaces with '-', and remove unwanted characters
        slug = re.sub(r'[^a-zA-Z0-9\s-]', '', no_diacritics)
        slug = re.sub(r'\s+', '-', slug.strip().lower())
        return slug

    return [normalize_and_slugify(text) for text in texts]
```","import unicodedata
import re

def slugify(texts):
    def normalize_and_slugify(text):
        # Normalize to NFKD
        normalized = unicodedata.normalize('NFKD', text)
        # Remove diacritics
        no_diacritics = normalized.encode('ascii', 'ignore').decode('utf-8')
        # Strip, collapse spaces, lower, replace spaces with '-', and remove unwanted characters
        slug = re.sub(r'[^a-zA-Z0-9\s-]', '', no_diacritics)
        slug = re.sub(r'\s+', '-', slug.strip().lower())
        return slug

    return [normalize_and_slugify(text) for text in texts]","import unicodedata
import re
def slugify(texts):
    def normalize_and_slugify(text):
        normalized = unicodedata.normalize('NFKD', text)
        no_diacritics = normalized.encode('ascii', 'ignore').decode('utf-8')
        slug = re.sub('[^a-zA-Z0-9\\s-]', '', no_diacritics)
        slug = re.sub('\\s+', '-', slug.strip().lower())
        return slug
    return [normalize_and_slugify(text) for text in texts]",bd48c5f2309cbc2a,ba75a1219896b3cd,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,slugify_v2
1756744397.9209938,csvjson_v1,csvjson_v1_1756744397,gpt-4o-mini,0.0,"```python
def csv_to_json(csv_text):
    lines = csv_text.strip().split('\n')
    headers = lines[0].split(',')
    result = []
    
    for line in lines[1:]:
        values = line.split(',')
        entry = {headers[i]: values[i] for i in range(len(headers))}
        result.append(entry)
    
    return result
```","def csv_to_json(csv_text):
    lines = csv_text.strip().split('\n')
    headers = lines[0].split(',')
    result = []
    
    for line in lines[1:]:
        values = line.split(',')
        entry = {headers[i]: values[i] for i in range(len(headers))}
        result.append(entry)
    
    return result","def csv_to_json(csv_text):
    lines = csv_text.strip().split('\n')
    headers = lines[0].split(',')
    result = []
    for line in lines[1:]:
        values = line.split(',')
        entry = {headers[i]: values[i] for i in range(len(headers))}
        result.append(entry)
    return result",df9e7900c2e3f3e3,27efb277124c588f,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,csvjson_v1
1756744399.8513932,csvjson_v1,csvjson_v1_1756744399,gpt-4o-mini,0.0,"```python
def csv_to_json(csv_text):
    lines = csv_text.strip().split('\n')
    headers = lines[0].split(',')
    result = []
    
    for line in lines[1:]:
        values = line.split(',')
        entry = {headers[i]: values[i] for i in range(len(headers))}
        result.append(entry)
    
    return result
```","def csv_to_json(csv_text):
    lines = csv_text.strip().split('\n')
    headers = lines[0].split(',')
    result = []
    
    for line in lines[1:]:
        values = line.split(',')
        entry = {headers[i]: values[i] for i in range(len(headers))}
        result.append(entry)
    
    return result","def csv_to_json(csv_text):
    lines = csv_text.strip().split('\n')
    headers = lines[0].split(',')
    result = []
    for line in lines[1:]:
        values = line.split(',')
        entry = {headers[i]: values[i] for i in range(len(headers))}
        result.append(entry)
    return result",df9e7900c2e3f3e3,27efb277124c588f,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,csvjson_v1
1756744402.3880835,csvjson_v1,csvjson_v1_1756744402,gpt-4o-mini,0.0,"```python
def csv_to_json(csv_text):
    lines = csv_text.strip().split('\n')
    headers = lines[0].split(',')
    result = []
    
    for line in lines[1:]:
        values = line.split(',')
        entry = {headers[i]: values[i] for i in range(len(headers))}
        result.append(entry)
    
    return result
```","def csv_to_json(csv_text):
    lines = csv_text.strip().split('\n')
    headers = lines[0].split(',')
    result = []
    
    for line in lines[1:]:
        values = line.split(',')
        entry = {headers[i]: values[i] for i in range(len(headers))}
        result.append(entry)
    
    return result","def csv_to_json(csv_text):
    lines = csv_text.strip().split('\n')
    headers = lines[0].split(',')
    result = []
    for line in lines[1:]:
        values = line.split(',')
        entry = {headers[i]: values[i] for i in range(len(headers))}
        result.append(entry)
    return result",df9e7900c2e3f3e3,27efb277124c588f,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,csvjson_v1
1756744404.5443907,csvjson_v1,csvjson_v1_1756744404,gpt-4o-mini,0.0,"```python
def csv_to_json(csv_text):
    lines = csv_text.strip().split('\n')
    headers = lines[0].split(',')
    result = []
    
    for line in lines[1:]:
        values = line.split(',')
        entry = {headers[i]: values[i] for i in range(len(headers))}
        result.append(entry)
    
    return result
```","def csv_to_json(csv_text):
    lines = csv_text.strip().split('\n')
    headers = lines[0].split(',')
    result = []
    
    for line in lines[1:]:
        values = line.split(',')
        entry = {headers[i]: values[i] for i in range(len(headers))}
        result.append(entry)
    
    return result","def csv_to_json(csv_text):
    lines = csv_text.strip().split('\n')
    headers = lines[0].split(',')
    result = []
    for line in lines[1:]:
        values = line.split(',')
        entry = {headers[i]: values[i] for i in range(len(headers))}
        result.append(entry)
    return result",df9e7900c2e3f3e3,27efb277124c588f,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,csvjson_v1
1756744406.7828522,csvjson_v1,csvjson_v1_1756744406,gpt-4o-mini,0.0,"```python
def csv_to_json(csv_text):
    lines = csv_text.strip().split('\n')
    headers = lines[0].split(',')
    result = []
    
    for line in lines[1:]:
        values = line.split(',')
        entry = {headers[i]: values[i] for i in range(len(headers))}
        result.append(entry)
    
    return result
```","def csv_to_json(csv_text):
    lines = csv_text.strip().split('\n')
    headers = lines[0].split(',')
    result = []
    
    for line in lines[1:]:
        values = line.split(',')
        entry = {headers[i]: values[i] for i in range(len(headers))}
        result.append(entry)
    
    return result","def csv_to_json(csv_text):
    lines = csv_text.strip().split('\n')
    headers = lines[0].split(',')
    result = []
    for line in lines[1:]:
        values = line.split(',')
        entry = {headers[i]: values[i] for i in range(len(headers))}
        result.append(entry)
    return result",df9e7900c2e3f3e3,27efb277124c588f,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,csvjson_v1
1756744409.6423755,csvjson_v1,csvjson_v1_1756744409,gpt-4o-mini,0.0,"```python
def csv_to_json(csv_text):
    lines = csv_text.strip().split('\n')
    headers = lines[0].split(',')
    result = []
    
    for line in lines[1:]:
        values = line.split(',')
        entry = {headers[i]: values[i] for i in range(len(headers))}
        result.append(entry)
    
    return result
```","def csv_to_json(csv_text):
    lines = csv_text.strip().split('\n')
    headers = lines[0].split(',')
    result = []
    
    for line in lines[1:]:
        values = line.split(',')
        entry = {headers[i]: values[i] for i in range(len(headers))}
        result.append(entry)
    
    return result","def csv_to_json(csv_text):
    lines = csv_text.strip().split('\n')
    headers = lines[0].split(',')
    result = []
    for line in lines[1:]:
        values = line.split(',')
        entry = {headers[i]: values[i] for i in range(len(headers))}
        result.append(entry)
    return result",df9e7900c2e3f3e3,27efb277124c588f,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,csvjson_v1
1756744411.5684528,csvjson_v1,csvjson_v1_1756744411,gpt-4o-mini,0.0,"```python
def csv_to_json(csv_text):
    lines = csv_text.strip().split('\n')
    headers = lines[0].split(',')
    result = []
    
    for line in lines[1:]:
        values = line.split(',')
        entry = {headers[i]: values[i] for i in range(len(headers))}
        result.append(entry)
    
    return result
```","def csv_to_json(csv_text):
    lines = csv_text.strip().split('\n')
    headers = lines[0].split(',')
    result = []
    
    for line in lines[1:]:
        values = line.split(',')
        entry = {headers[i]: values[i] for i in range(len(headers))}
        result.append(entry)
    
    return result","def csv_to_json(csv_text):
    lines = csv_text.strip().split('\n')
    headers = lines[0].split(',')
    result = []
    for line in lines[1:]:
        values = line.split(',')
        entry = {headers[i]: values[i] for i in range(len(headers))}
        result.append(entry)
    return result",df9e7900c2e3f3e3,27efb277124c588f,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,csvjson_v1
1756744414.3247178,csvjson_v1,csvjson_v1_1756744414,gpt-4o-mini,0.0,"```python
def csv_to_json(csv_text):
    lines = csv_text.strip().split('\n')
    headers = lines[0].split(',')
    result = []
    
    for line in lines[1:]:
        values = line.split(',')
        entry = {headers[i]: values[i] for i in range(len(headers))}
        result.append(entry)
    
    return result
```","def csv_to_json(csv_text):
    lines = csv_text.strip().split('\n')
    headers = lines[0].split(',')
    result = []
    
    for line in lines[1:]:
        values = line.split(',')
        entry = {headers[i]: values[i] for i in range(len(headers))}
        result.append(entry)
    
    return result","def csv_to_json(csv_text):
    lines = csv_text.strip().split('\n')
    headers = lines[0].split(',')
    result = []
    for line in lines[1:]:
        values = line.split(',')
        entry = {headers[i]: values[i] for i in range(len(headers))}
        result.append(entry)
    return result",df9e7900c2e3f3e3,27efb277124c588f,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,csvjson_v1
1756744417.4057143,csvjson_v1,csvjson_v1_1756744417,gpt-4o-mini,0.0,"```python
def csv_to_json(csv_text):
    lines = csv_text.strip().split('\n')
    headers = lines[0].split(',')
    result = []
    
    for line in lines[1:]:
        values = line.split(',')
        entry = {headers[i]: values[i] for i in range(len(headers))}
        result.append(entry)
    
    return result
```","def csv_to_json(csv_text):
    lines = csv_text.strip().split('\n')
    headers = lines[0].split(',')
    result = []
    
    for line in lines[1:]:
        values = line.split(',')
        entry = {headers[i]: values[i] for i in range(len(headers))}
        result.append(entry)
    
    return result","def csv_to_json(csv_text):
    lines = csv_text.strip().split('\n')
    headers = lines[0].split(',')
    result = []
    for line in lines[1:]:
        values = line.split(',')
        entry = {headers[i]: values[i] for i in range(len(headers))}
        result.append(entry)
    return result",df9e7900c2e3f3e3,27efb277124c588f,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,csvjson_v1
1756744420.9610198,csvjson_v1,csvjson_v1_1756744420,gpt-4o-mini,0.0,"```python
def csv_to_json(csv_text):
    lines = csv_text.strip().split('\n')
    header = lines[0].split(',')
    result = []
    
    for line in lines[1:]:
        values = line.split(',')
        entry = {header[i]: values[i] for i in range(len(header))}
        result.append(entry)
    
    return result
```","def csv_to_json(csv_text):
    lines = csv_text.strip().split('\n')
    header = lines[0].split(',')
    result = []
    
    for line in lines[1:]:
        values = line.split(',')
        entry = {header[i]: values[i] for i in range(len(header))}
        result.append(entry)
    
    return result","def csv_to_json(csv_text):
    lines = csv_text.strip().split('\n')
    header = lines[0].split(',')
    result = []
    for line in lines[1:]:
        values = line.split(',')
        entry = {header[i]: values[i] for i in range(len(header))}
        result.append(entry)
    return result",55ff6860d2b9a2e5,04e8c77398dd1370,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,csvjson_v1
1756744423.4791813,csvjson_v1,csvjson_v1_1756744423,gpt-4o-mini,0.2,"```python
def csv_to_json(csv_text):
    lines = csv_text.strip().split('\n')
    headers = lines[0].split(',')
    result = []
    
    for line in lines[1:]:
        values = line.split(',')
        entry = {headers[i]: values[i] for i in range(len(headers))}
        result.append(entry)
    
    return result
```","def csv_to_json(csv_text):
    lines = csv_text.strip().split('\n')
    headers = lines[0].split(',')
    result = []
    
    for line in lines[1:]:
        values = line.split(',')
        entry = {headers[i]: values[i] for i in range(len(headers))}
        result.append(entry)
    
    return result","def csv_to_json(csv_text):
    lines = csv_text.strip().split('\n')
    headers = lines[0].split(',')
    result = []
    for line in lines[1:]:
        values = line.split(',')
        entry = {headers[i]: values[i] for i in range(len(headers))}
        result.append(entry)
    return result",df9e7900c2e3f3e3,27efb277124c588f,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,csvjson_v1
1756744425.7162626,csvjson_v1,csvjson_v1_1756744425,gpt-4o-mini,0.2,"```python
def csv_to_json(csv_text):
    lines = csv_text.strip().split('\n')
    headers = lines[0].split(',')
    result = []
    
    for line in lines[1:]:
        values = line.split(',')
        entry = {headers[i]: values[i] for i in range(len(headers))}
        result.append(entry)
    
    return result
```","def csv_to_json(csv_text):
    lines = csv_text.strip().split('\n')
    headers = lines[0].split(',')
    result = []
    
    for line in lines[1:]:
        values = line.split(',')
        entry = {headers[i]: values[i] for i in range(len(headers))}
        result.append(entry)
    
    return result","def csv_to_json(csv_text):
    lines = csv_text.strip().split('\n')
    headers = lines[0].split(',')
    result = []
    for line in lines[1:]:
        values = line.split(',')
        entry = {headers[i]: values[i] for i in range(len(headers))}
        result.append(entry)
    return result",df9e7900c2e3f3e3,27efb277124c588f,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,csvjson_v1
1756744428.0835054,csvjson_v1,csvjson_v1_1756744428,gpt-4o-mini,0.2,"```python
def csv_to_json(csv_text):
    lines = csv_text.strip().split('\n')
    headers = lines[0].split(',')
    result = []
    
    for line in lines[1:]:
        values = line.split(',')
        entry = {headers[i]: values[i] for i in range(len(headers))}
        result.append(entry)
    
    return result
```","def csv_to_json(csv_text):
    lines = csv_text.strip().split('\n')
    headers = lines[0].split(',')
    result = []
    
    for line in lines[1:]:
        values = line.split(',')
        entry = {headers[i]: values[i] for i in range(len(headers))}
        result.append(entry)
    
    return result","def csv_to_json(csv_text):
    lines = csv_text.strip().split('\n')
    headers = lines[0].split(',')
    result = []
    for line in lines[1:]:
        values = line.split(',')
        entry = {headers[i]: values[i] for i in range(len(headers))}
        result.append(entry)
    return result",df9e7900c2e3f3e3,27efb277124c588f,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,csvjson_v1
1756744430.2657979,csvjson_v1,csvjson_v1_1756744430,gpt-4o-mini,0.2,"```python
def csv_to_json(csv_text):
    lines = csv_text.strip().split('\n')
    headers = lines[0].split(',')
    result = []
    
    for line in lines[1:]:
        values = line.split(',')
        entry = {headers[i]: values[i] for i in range(len(headers))}
        result.append(entry)
    
    return result
```","def csv_to_json(csv_text):
    lines = csv_text.strip().split('\n')
    headers = lines[0].split(',')
    result = []
    
    for line in lines[1:]:
        values = line.split(',')
        entry = {headers[i]: values[i] for i in range(len(headers))}
        result.append(entry)
    
    return result","def csv_to_json(csv_text):
    lines = csv_text.strip().split('\n')
    headers = lines[0].split(',')
    result = []
    for line in lines[1:]:
        values = line.split(',')
        entry = {headers[i]: values[i] for i in range(len(headers))}
        result.append(entry)
    return result",df9e7900c2e3f3e3,27efb277124c588f,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,csvjson_v1
1756744432.8561602,csvjson_v1,csvjson_v1_1756744432,gpt-4o-mini,0.2,"```python
def csv_to_json(csv_text):
    lines = csv_text.strip().split('\n')
    headers = lines[0].split(',')
    result = []
    
    for line in lines[1:]:
        values = line.split(',')
        entry = {headers[i]: values[i] for i in range(len(headers))}
        result.append(entry)
    
    return result
```","def csv_to_json(csv_text):
    lines = csv_text.strip().split('\n')
    headers = lines[0].split(',')
    result = []
    
    for line in lines[1:]:
        values = line.split(',')
        entry = {headers[i]: values[i] for i in range(len(headers))}
        result.append(entry)
    
    return result","def csv_to_json(csv_text):
    lines = csv_text.strip().split('\n')
    headers = lines[0].split(',')
    result = []
    for line in lines[1:]:
        values = line.split(',')
        entry = {headers[i]: values[i] for i in range(len(headers))}
        result.append(entry)
    return result",df9e7900c2e3f3e3,27efb277124c588f,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,csvjson_v1
1756744435.2654843,csvjson_v1,csvjson_v1_1756744435,gpt-4o-mini,0.2,"```python
def csv_to_json(csv_text):
    lines = csv_text.strip().split('\n')
    headers = lines[0].split(',')
    result = []
    
    for line in lines[1:]:
        values = line.split(',')
        entry = {headers[i]: values[i] for i in range(len(headers))}
        result.append(entry)
    
    return result
```","def csv_to_json(csv_text):
    lines = csv_text.strip().split('\n')
    headers = lines[0].split(',')
    result = []
    
    for line in lines[1:]:
        values = line.split(',')
        entry = {headers[i]: values[i] for i in range(len(headers))}
        result.append(entry)
    
    return result","def csv_to_json(csv_text):
    lines = csv_text.strip().split('\n')
    headers = lines[0].split(',')
    result = []
    for line in lines[1:]:
        values = line.split(',')
        entry = {headers[i]: values[i] for i in range(len(headers))}
        result.append(entry)
    return result",df9e7900c2e3f3e3,27efb277124c588f,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,csvjson_v1
1756744437.246717,csvjson_v1,csvjson_v1_1756744437,gpt-4o-mini,0.2,"```python
def csv_to_json(csv_text):
    lines = csv_text.strip().split('\n')
    headers = lines[0].split(',')
    result = []
    
    for line in lines[1:]:
        values = line.split(',')
        entry = {headers[i]: values[i] for i in range(len(headers))}
        result.append(entry)
    
    return result
```","def csv_to_json(csv_text):
    lines = csv_text.strip().split('\n')
    headers = lines[0].split(',')
    result = []
    
    for line in lines[1:]:
        values = line.split(',')
        entry = {headers[i]: values[i] for i in range(len(headers))}
        result.append(entry)
    
    return result","def csv_to_json(csv_text):
    lines = csv_text.strip().split('\n')
    headers = lines[0].split(',')
    result = []
    for line in lines[1:]:
        values = line.split(',')
        entry = {headers[i]: values[i] for i in range(len(headers))}
        result.append(entry)
    return result",df9e7900c2e3f3e3,27efb277124c588f,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,csvjson_v1
1756744440.492271,csvjson_v1,csvjson_v1_1756744440,gpt-4o-mini,0.2,"```python
def csv_to_json(csv_text):
    lines = csv_text.strip().split('\n')
    header = lines[0].split(',')
    result = []
    
    for line in lines[1:]:
        values = line.split(',')
        entry = {header[i]: values[i] for i in range(len(header))}
        result.append(entry)
    
    return result
```","def csv_to_json(csv_text):
    lines = csv_text.strip().split('\n')
    header = lines[0].split(',')
    result = []
    
    for line in lines[1:]:
        values = line.split(',')
        entry = {header[i]: values[i] for i in range(len(header))}
        result.append(entry)
    
    return result","def csv_to_json(csv_text):
    lines = csv_text.strip().split('\n')
    header = lines[0].split(',')
    result = []
    for line in lines[1:]:
        values = line.split(',')
        entry = {header[i]: values[i] for i in range(len(header))}
        result.append(entry)
    return result",55ff6860d2b9a2e5,04e8c77398dd1370,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,csvjson_v1
1756744443.5473208,csvjson_v1,csvjson_v1_1756744443,gpt-4o-mini,0.2,"```python
def csv_to_json(csv_text):
    lines = csv_text.strip().split('\n')
    headers = lines[0].split(',')
    result = []
    
    for line in lines[1:]:
        values = line.split(',')
        entry = {headers[i]: values[i] for i in range(len(headers))}
        result.append(entry)
    
    return result
```","def csv_to_json(csv_text):
    lines = csv_text.strip().split('\n')
    headers = lines[0].split(',')
    result = []
    
    for line in lines[1:]:
        values = line.split(',')
        entry = {headers[i]: values[i] for i in range(len(headers))}
        result.append(entry)
    
    return result","def csv_to_json(csv_text):
    lines = csv_text.strip().split('\n')
    headers = lines[0].split(',')
    result = []
    for line in lines[1:]:
        values = line.split(',')
        entry = {headers[i]: values[i] for i in range(len(headers))}
        result.append(entry)
    return result",df9e7900c2e3f3e3,27efb277124c588f,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,csvjson_v1
1756744446.4596393,csvjson_v1,csvjson_v1_1756744446,gpt-4o-mini,0.2,"```python
def csv_to_json(csv_text):
    lines = csv_text.strip().split('\n')
    headers = lines[0].split(',')
    result = []
    
    for line in lines[1:]:
        values = line.split(',')
        entry = {headers[i]: values[i] for i in range(len(headers))}
        result.append(entry)
    
    return result
```","def csv_to_json(csv_text):
    lines = csv_text.strip().split('\n')
    headers = lines[0].split(',')
    result = []
    
    for line in lines[1:]:
        values = line.split(',')
        entry = {headers[i]: values[i] for i in range(len(headers))}
        result.append(entry)
    
    return result","def csv_to_json(csv_text):
    lines = csv_text.strip().split('\n')
    headers = lines[0].split(',')
    result = []
    for line in lines[1:]:
        values = line.split(',')
        entry = {headers[i]: values[i] for i in range(len(headers))}
        result.append(entry)
    return result",df9e7900c2e3f3e3,27efb277124c588f,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,csvjson_v1
1756744449.045014,csvjson_v2,csvjson_v2_1756744449,gpt-4o-mini,0.0,"```python
def csv_to_json(csv_text) -> list[dict[str, str]]:
    lines = csv_text.strip().split('\n')
    header = lines[0].split(',')
    result = []
    
    for line in lines[1:]:
        values = line.split(',')
        row_dict = {header[i]: values[i] for i in range(len(header))}
        result.append(row_dict)
    
    return result
```","def csv_to_json(csv_text) -> list[dict[str, str]]:
    lines = csv_text.strip().split('\n')
    header = lines[0].split(',')
    result = []
    
    for line in lines[1:]:
        values = line.split(',')
        row_dict = {header[i]: values[i] for i in range(len(header))}
        result.append(row_dict)
    
    return result","def csv_to_json(csv_text) -> list[dict[str, str]]:
    lines = csv_text.strip().split('\n')
    header = lines[0].split(',')
    result = []
    for line in lines[1:]:
        values = line.split(',')
        row_dict = {header[i]: values[i] for i in range(len(header))}
        result.append(row_dict)
    return result",2cb250033f5517be,50e05b819f231be6,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,csvjson_v2
1756744451.4346485,csvjson_v2,csvjson_v2_1756744451,gpt-4o-mini,0.0,"```python
def csv_to_json(csv_text) -> list[dict[str, str]]:
    lines = csv_text.strip().split('\n')
    header = lines[0].split(',')
    result = []
    
    for line in lines[1:]:
        values = line.split(',')
        row_dict = {header[i]: values[i] for i in range(len(header))}
        result.append(row_dict)
    
    return result
```","def csv_to_json(csv_text) -> list[dict[str, str]]:
    lines = csv_text.strip().split('\n')
    header = lines[0].split(',')
    result = []
    
    for line in lines[1:]:
        values = line.split(',')
        row_dict = {header[i]: values[i] for i in range(len(header))}
        result.append(row_dict)
    
    return result","def csv_to_json(csv_text) -> list[dict[str, str]]:
    lines = csv_text.strip().split('\n')
    header = lines[0].split(',')
    result = []
    for line in lines[1:]:
        values = line.split(',')
        row_dict = {header[i]: values[i] for i in range(len(header))}
        result.append(row_dict)
    return result",2cb250033f5517be,50e05b819f231be6,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,csvjson_v2
1756744453.8448272,csvjson_v2,csvjson_v2_1756744453,gpt-4o-mini,0.0,"```python
def csv_to_json(csv_text: str) -> list[dict[str, str]]:
    lines = csv_text.strip().split('\n')
    header = lines[0].split(',')
    result = []
    
    for line in lines[1:]:
        values = line.split(',')
        result.append(dict(zip(header, values)))
    
    return result
```","def csv_to_json(csv_text: str) -> list[dict[str, str]]:
    lines = csv_text.strip().split('\n')
    header = lines[0].split(',')
    result = []
    
    for line in lines[1:]:
        values = line.split(',')
        result.append(dict(zip(header, values)))
    
    return result","def csv_to_json(csv_text: str) -> list[dict[str, str]]:
    lines = csv_text.strip().split('\n')
    header = lines[0].split(',')
    result = []
    for line in lines[1:]:
        values = line.split(',')
        result.append(dict(zip(header, values)))
    return result",6fa0a6ec58ed3c52,50737639196c691a,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,csvjson_v2
1756744456.5914752,csvjson_v2,csvjson_v2_1756744456,gpt-4o-mini,0.0,"```python
def csv_to_json(csv_text):
    lines = csv_text.strip().split('\n')
    header = lines[0].split(',')
    result = []
    
    for line in lines[1:]:
        values = line.split(',')
        result.append({header[i]: values[i] for i in range(len(header))})
    
    return result
```","def csv_to_json(csv_text):
    lines = csv_text.strip().split('\n')
    header = lines[0].split(',')
    result = []
    
    for line in lines[1:]:
        values = line.split(',')
        result.append({header[i]: values[i] for i in range(len(header))})
    
    return result","def csv_to_json(csv_text):
    lines = csv_text.strip().split('\n')
    header = lines[0].split(',')
    result = []
    for line in lines[1:]:
        values = line.split(',')
        result.append({header[i]: values[i] for i in range(len(header))})
    return result",6288e42469517c59,f9a4afbca9f24b2d,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,csvjson_v2
1756744461.085643,csvjson_v2,csvjson_v2_1756744461,gpt-4o-mini,0.0,"```python
def csv_to_json(csv_text) -> list[dict[str, str]]:
    lines = csv_text.strip().split('\n')
    header = lines[0].split(',')
    result = []
    
    for line in lines[1:]:
        values = line.split(',')
        row_dict = {header[i]: values[i] for i in range(len(header))}
        result.append(row_dict)
    
    return result
```","def csv_to_json(csv_text) -> list[dict[str, str]]:
    lines = csv_text.strip().split('\n')
    header = lines[0].split(',')
    result = []
    
    for line in lines[1:]:
        values = line.split(',')
        row_dict = {header[i]: values[i] for i in range(len(header))}
        result.append(row_dict)
    
    return result","def csv_to_json(csv_text) -> list[dict[str, str]]:
    lines = csv_text.strip().split('\n')
    header = lines[0].split(',')
    result = []
    for line in lines[1:]:
        values = line.split(',')
        row_dict = {header[i]: values[i] for i in range(len(header))}
        result.append(row_dict)
    return result",2cb250033f5517be,50e05b819f231be6,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,csvjson_v2
1756744463.4186974,csvjson_v2,csvjson_v2_1756744463,gpt-4o-mini,0.0,"```python
import csv
import json
from typing import List, Dict

def csv_to_json(csv_text: str) -> List[Dict[str, str]]:
    reader = csv.DictReader(csv_text.splitlines())
    return [row for row in reader]
```","import csv
import json
from typing import List, Dict

def csv_to_json(csv_text: str) -> List[Dict[str, str]]:
    reader = csv.DictReader(csv_text.splitlines())
    return [row for row in reader]","import csv
import json
from typing import List, Dict
def csv_to_json(csv_text: str) -> List[Dict[str, str]]:
    reader = csv.DictReader(csv_text.splitlines())
    return [row for row in reader]",13e4ddc58edbff5d,b38f3891ccff4945,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,csvjson_v2
1756744465.032899,csvjson_v2,csvjson_v2_1756744465,gpt-4o-mini,0.0,"```python
import csv
import json
from typing import List, Dict

def csv_to_json(csv_text: str) -> List[Dict[str, str]]:
    reader = csv.DictReader(csv_text.splitlines())
    return [row for row in reader]
```","import csv
import json
from typing import List, Dict

def csv_to_json(csv_text: str) -> List[Dict[str, str]]:
    reader = csv.DictReader(csv_text.splitlines())
    return [row for row in reader]","import csv
import json
from typing import List, Dict
def csv_to_json(csv_text: str) -> List[Dict[str, str]]:
    reader = csv.DictReader(csv_text.splitlines())
    return [row for row in reader]",13e4ddc58edbff5d,b38f3891ccff4945,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,csvjson_v2
1756744466.8599017,csvjson_v2,csvjson_v2_1756744466,gpt-4o-mini,0.0,"```python
import csv
import json
from typing import List, Dict

def csv_to_json(csv_text: str) -> List[Dict[str, str]]:
    reader = csv.DictReader(csv_text.splitlines())
    return [row for row in reader]
```","import csv
import json
from typing import List, Dict

def csv_to_json(csv_text: str) -> List[Dict[str, str]]:
    reader = csv.DictReader(csv_text.splitlines())
    return [row for row in reader]","import csv
import json
from typing import List, Dict
def csv_to_json(csv_text: str) -> List[Dict[str, str]]:
    reader = csv.DictReader(csv_text.splitlines())
    return [row for row in reader]",13e4ddc58edbff5d,b38f3891ccff4945,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,csvjson_v2
1756744468.9059608,csvjson_v2,csvjson_v2_1756744468,gpt-4o-mini,0.0,"```python
import csv
import json
from typing import List, Dict

def csv_to_json(csv_text: str) -> List[Dict[str, str]]:
    reader = csv.DictReader(csv_text.splitlines())
    return [row for row in reader]
```","import csv
import json
from typing import List, Dict

def csv_to_json(csv_text: str) -> List[Dict[str, str]]:
    reader = csv.DictReader(csv_text.splitlines())
    return [row for row in reader]","import csv
import json
from typing import List, Dict
def csv_to_json(csv_text: str) -> List[Dict[str, str]]:
    reader = csv.DictReader(csv_text.splitlines())
    return [row for row in reader]",13e4ddc58edbff5d,b38f3891ccff4945,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,csvjson_v2
1756744470.717825,csvjson_v2,csvjson_v2_1756744470,gpt-4o-mini,0.0,"```python
import csv
import json
from typing import List, Dict

def csv_to_json(csv_text: str) -> List[Dict[str, str]]:
    reader = csv.DictReader(csv_text.splitlines())
    return [row for row in reader]
```","import csv
import json
from typing import List, Dict

def csv_to_json(csv_text: str) -> List[Dict[str, str]]:
    reader = csv.DictReader(csv_text.splitlines())
    return [row for row in reader]","import csv
import json
from typing import List, Dict
def csv_to_json(csv_text: str) -> List[Dict[str, str]]:
    reader = csv.DictReader(csv_text.splitlines())
    return [row for row in reader]",13e4ddc58edbff5d,b38f3891ccff4945,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,csvjson_v2
1756744472.8277156,csvjson_v2,csvjson_v2_1756744472,gpt-4o-mini,0.2,"```python
def csv_to_json(csv_text) -> list[dict[str, str]]:
    lines = csv_text.strip().split('\n')
    header = lines[0].split(',')
    result = []
    
    for line in lines[1:]:
        values = line.split(',')
        row_dict = {header[i]: values[i] for i in range(len(header))}
        result.append(row_dict)
    
    return result
```","def csv_to_json(csv_text) -> list[dict[str, str]]:
    lines = csv_text.strip().split('\n')
    header = lines[0].split(',')
    result = []
    
    for line in lines[1:]:
        values = line.split(',')
        row_dict = {header[i]: values[i] for i in range(len(header))}
        result.append(row_dict)
    
    return result","def csv_to_json(csv_text) -> list[dict[str, str]]:
    lines = csv_text.strip().split('\n')
    header = lines[0].split(',')
    result = []
    for line in lines[1:]:
        values = line.split(',')
        row_dict = {header[i]: values[i] for i in range(len(header))}
        result.append(row_dict)
    return result",2cb250033f5517be,50e05b819f231be6,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,csvjson_v2
1756744475.0768251,csvjson_v2,csvjson_v2_1756744475,gpt-4o-mini,0.2,"```python
def csv_to_json(csv_text):
    lines = csv_text.strip().split('\n')
    header = lines[0].split(',')
    result = []
    
    for line in lines[1:]:
        values = line.split(',')
        result.append({header[i]: values[i] for i in range(len(header))})
    
    return result
```","def csv_to_json(csv_text):
    lines = csv_text.strip().split('\n')
    header = lines[0].split(',')
    result = []
    
    for line in lines[1:]:
        values = line.split(',')
        result.append({header[i]: values[i] for i in range(len(header))})
    
    return result","def csv_to_json(csv_text):
    lines = csv_text.strip().split('\n')
    header = lines[0].split(',')
    result = []
    for line in lines[1:]:
        values = line.split(',')
        result.append({header[i]: values[i] for i in range(len(header))})
    return result",6288e42469517c59,f9a4afbca9f24b2d,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,csvjson_v2
1756744479.7033484,csvjson_v2,csvjson_v2_1756744479,gpt-4o-mini,0.2,"```python
def csv_to_json(csv_text) -> list[dict[str, str]]:
    lines = csv_text.strip().split('\n')
    header = lines[0].split(',')
    result = []

    for line in lines[1:]:
        values = line.split(',')
        result.append({header[i]: values[i] for i in range(len(header))})

    return result
```","def csv_to_json(csv_text) -> list[dict[str, str]]:
    lines = csv_text.strip().split('\n')
    header = lines[0].split(',')
    result = []

    for line in lines[1:]:
        values = line.split(',')
        result.append({header[i]: values[i] for i in range(len(header))})

    return result","def csv_to_json(csv_text) -> list[dict[str, str]]:
    lines = csv_text.strip().split('\n')
    header = lines[0].split(',')
    result = []
    for line in lines[1:]:
        values = line.split(',')
        result.append({header[i]: values[i] for i in range(len(header))})
    return result",82c8457b0136b2f8,e2cfb185cc0956f6,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,csvjson_v2
1756744481.953475,csvjson_v2,csvjson_v2_1756744481,gpt-4o-mini,0.2,"```python
def csv_to_json(csv_text):
    lines = csv_text.strip().split('\n')
    header = lines[0].split(',')
    json_list = []
    
    for line in lines[1:]:
        values = line.split(',')
        json_list.append({header[i]: values[i] for i in range(len(header))})
    
    return json_list
```","def csv_to_json(csv_text):
    lines = csv_text.strip().split('\n')
    header = lines[0].split(',')
    json_list = []
    
    for line in lines[1:]:
        values = line.split(',')
        json_list.append({header[i]: values[i] for i in range(len(header))})
    
    return json_list","def csv_to_json(csv_text):
    lines = csv_text.strip().split('\n')
    header = lines[0].split(',')
    json_list = []
    for line in lines[1:]:
        values = line.split(',')
        json_list.append({header[i]: values[i] for i in range(len(header))})
    return json_list",c127b953e3fb1c1c,a308aa9a63e66248,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,csvjson_v2
1756744484.9434757,csvjson_v2,csvjson_v2_1756744484,gpt-4o-mini,0.2,"```python
def csv_to_json(csv_text) -> list[dict[str, str]]:
    lines = csv_text.strip().split('\n')
    header = lines[0].split(',')
    result = []
    
    for line in lines[1:]:
        values = line.split(',')
        row_dict = {header[i]: values[i] for i in range(len(header))}
        result.append(row_dict)
    
    return result
```","def csv_to_json(csv_text) -> list[dict[str, str]]:
    lines = csv_text.strip().split('\n')
    header = lines[0].split(',')
    result = []
    
    for line in lines[1:]:
        values = line.split(',')
        row_dict = {header[i]: values[i] for i in range(len(header))}
        result.append(row_dict)
    
    return result","def csv_to_json(csv_text) -> list[dict[str, str]]:
    lines = csv_text.strip().split('\n')
    header = lines[0].split(',')
    result = []
    for line in lines[1:]:
        values = line.split(',')
        row_dict = {header[i]: values[i] for i in range(len(header))}
        result.append(row_dict)
    return result",2cb250033f5517be,50e05b819f231be6,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,csvjson_v2
1756744487.0240052,csvjson_v2,csvjson_v2_1756744487,gpt-4o-mini,0.2,"```python
import csv
import json
from typing import List, Dict

def csv_to_json(csv_text: str) -> List[Dict[str, str]]:
    reader = csv.DictReader(csv_text.splitlines())
    return [row for row in reader]
```","import csv
import json
from typing import List, Dict

def csv_to_json(csv_text: str) -> List[Dict[str, str]]:
    reader = csv.DictReader(csv_text.splitlines())
    return [row for row in reader]","import csv
import json
from typing import List, Dict
def csv_to_json(csv_text: str) -> List[Dict[str, str]]:
    reader = csv.DictReader(csv_text.splitlines())
    return [row for row in reader]",13e4ddc58edbff5d,b38f3891ccff4945,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,csvjson_v2
1756744489.087314,csvjson_v2,csvjson_v2_1756744489,gpt-4o-mini,0.2,"```python
import csv
import json
from typing import List, Dict

def csv_to_json(csv_text: str) -> List[Dict[str, str]]:
    reader = csv.DictReader(csv_text.splitlines())
    return [row for row in reader]
```","import csv
import json
from typing import List, Dict

def csv_to_json(csv_text: str) -> List[Dict[str, str]]:
    reader = csv.DictReader(csv_text.splitlines())
    return [row for row in reader]","import csv
import json
from typing import List, Dict
def csv_to_json(csv_text: str) -> List[Dict[str, str]]:
    reader = csv.DictReader(csv_text.splitlines())
    return [row for row in reader]",13e4ddc58edbff5d,b38f3891ccff4945,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,csvjson_v2
1756744490.8963988,csvjson_v2,csvjson_v2_1756744490,gpt-4o-mini,0.2,"```python
import csv
import json
from typing import List, Dict

def csv_to_json(csv_text: str) -> List[Dict[str, str]]:
    reader = csv.DictReader(csv_text.splitlines())
    return [row for row in reader]
```","import csv
import json
from typing import List, Dict

def csv_to_json(csv_text: str) -> List[Dict[str, str]]:
    reader = csv.DictReader(csv_text.splitlines())
    return [row for row in reader]","import csv
import json
from typing import List, Dict
def csv_to_json(csv_text: str) -> List[Dict[str, str]]:
    reader = csv.DictReader(csv_text.splitlines())
    return [row for row in reader]",13e4ddc58edbff5d,b38f3891ccff4945,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,csvjson_v2
1756744492.8178341,csvjson_v2,csvjson_v2_1756744492,gpt-4o-mini,0.2,"```python
import csv
import json
from typing import List, Dict

def csv_to_json(csv_text: str) -> List[Dict[str, str]]:
    reader = csv.DictReader(csv_text.splitlines())
    return [row for row in reader]
```","import csv
import json
from typing import List, Dict

def csv_to_json(csv_text: str) -> List[Dict[str, str]]:
    reader = csv.DictReader(csv_text.splitlines())
    return [row for row in reader]","import csv
import json
from typing import List, Dict
def csv_to_json(csv_text: str) -> List[Dict[str, str]]:
    reader = csv.DictReader(csv_text.splitlines())
    return [row for row in reader]",13e4ddc58edbff5d,b38f3891ccff4945,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,csvjson_v2
1756744494.3474004,csvjson_v2,csvjson_v2_1756744494,gpt-4o-mini,0.2,"```python
import csv
import json
from typing import List, Dict

def csv_to_json(csv_text: str) -> List[Dict[str, str]]:
    reader = csv.DictReader(csv_text.splitlines())
    return [row for row in reader]
```","import csv
import json
from typing import List, Dict

def csv_to_json(csv_text: str) -> List[Dict[str, str]]:
    reader = csv.DictReader(csv_text.splitlines())
    return [row for row in reader]","import csv
import json
from typing import List, Dict
def csv_to_json(csv_text: str) -> List[Dict[str, str]]:
    reader = csv.DictReader(csv_text.splitlines())
    return [row for row in reader]",13e4ddc58edbff5d,b38f3891ccff4945,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,csvjson_v2
1756744496.3190238,brackets_v1,brackets_v1_1756744496,gpt-4o-mini,0.0,"```python
def is_balanced(s):
    stack = []
    brackets = {')': '(', ']': '[', '}': '{'}
    
    for char in s:
        if char in brackets.values():
            stack.append(char)
        elif char in brackets.keys():
            if not stack or stack.pop() != brackets[char]:
                return False
    
    return len(stack) == 0
```","def is_balanced(s):
    stack = []
    brackets = {')': '(', ']': '[', '}': '{'}
    
    for char in s:
        if char in brackets.values():
            stack.append(char)
        elif char in brackets.keys():
            if not stack or stack.pop() != brackets[char]:
                return False
    
    return len(stack) == 0","def is_balanced(s):
    stack = []
    brackets = {')': '(', ']': '[', '}': '{'}
    for char in s:
        if char in brackets.values():
            stack.append(char)
        elif char in brackets.keys():
            if not stack or stack.pop() != brackets[char]:
                return False
    return len(stack) == 0",7dac20d60badb6f9,575ed40b22d69af4,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,brackets_v1
1756744498.5218394,brackets_v1,brackets_v1_1756744498,gpt-4o-mini,0.0,"```python
def is_balanced(s):
    stack = []
    brackets = {')': '(', ']': '[', '}': '{'}
    
    for char in s:
        if char in brackets.values():
            stack.append(char)
        elif char in brackets.keys():
            if not stack or stack.pop() != brackets[char]:
                return False
    
    return len(stack) == 0
```","def is_balanced(s):
    stack = []
    brackets = {')': '(', ']': '[', '}': '{'}
    
    for char in s:
        if char in brackets.values():
            stack.append(char)
        elif char in brackets.keys():
            if not stack or stack.pop() != brackets[char]:
                return False
    
    return len(stack) == 0","def is_balanced(s):
    stack = []
    brackets = {')': '(', ']': '[', '}': '{'}
    for char in s:
        if char in brackets.values():
            stack.append(char)
        elif char in brackets.keys():
            if not stack or stack.pop() != brackets[char]:
                return False
    return len(stack) == 0",7dac20d60badb6f9,575ed40b22d69af4,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,brackets_v1
1756744501.2297246,brackets_v1,brackets_v1_1756744501,gpt-4o-mini,0.0,"```python
def is_balanced(s):
    stack = []
    brackets = {')': '(', ']': '[', '}': '{'}
    
    for char in s:
        if char in brackets.values():
            stack.append(char)
        elif char in brackets.keys():
            if not stack or stack.pop() != brackets[char]:
                return False
    
    return not stack
```","def is_balanced(s):
    stack = []
    brackets = {')': '(', ']': '[', '}': '{'}
    
    for char in s:
        if char in brackets.values():
            stack.append(char)
        elif char in brackets.keys():
            if not stack or stack.pop() != brackets[char]:
                return False
    
    return not stack","def is_balanced(s):
    stack = []
    brackets = {')': '(', ']': '[', '}': '{'}
    for char in s:
        if char in brackets.values():
            stack.append(char)
        elif char in brackets.keys():
            if not stack or stack.pop() != brackets[char]:
                return False
    return not stack",96dae3f02a200e18,08d608547462d16a,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,brackets_v1
1756744503.5523539,brackets_v1,brackets_v1_1756744503,gpt-4o-mini,0.0,"```python
def is_balanced(s):
    stack = []
    brackets = {')': '(', ']': '[', '}': '{'}
    
    for char in s:
        if char in brackets.values():
            stack.append(char)
        elif char in brackets.keys():
            if not stack or stack.pop() != brackets[char]:
                return False
    
    return len(stack) == 0
```","def is_balanced(s):
    stack = []
    brackets = {')': '(', ']': '[', '}': '{'}
    
    for char in s:
        if char in brackets.values():
            stack.append(char)
        elif char in brackets.keys():
            if not stack or stack.pop() != brackets[char]:
                return False
    
    return len(stack) == 0","def is_balanced(s):
    stack = []
    brackets = {')': '(', ']': '[', '}': '{'}
    for char in s:
        if char in brackets.values():
            stack.append(char)
        elif char in brackets.keys():
            if not stack or stack.pop() != brackets[char]:
                return False
    return len(stack) == 0",7dac20d60badb6f9,575ed40b22d69af4,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,brackets_v1
1756744505.875597,brackets_v1,brackets_v1_1756744505,gpt-4o-mini,0.0,"```python
def is_balanced(s):
    stack = []
    brackets = {')': '(', ']': '[', '}': '{'}
    
    for char in s:
        if char in brackets.values():
            stack.append(char)
        elif char in brackets.keys():
            if not stack or stack.pop() != brackets[char]:
                return False
    
    return len(stack) == 0
```","def is_balanced(s):
    stack = []
    brackets = {')': '(', ']': '[', '}': '{'}
    
    for char in s:
        if char in brackets.values():
            stack.append(char)
        elif char in brackets.keys():
            if not stack or stack.pop() != brackets[char]:
                return False
    
    return len(stack) == 0","def is_balanced(s):
    stack = []
    brackets = {')': '(', ']': '[', '}': '{'}
    for char in s:
        if char in brackets.values():
            stack.append(char)
        elif char in brackets.keys():
            if not stack or stack.pop() != brackets[char]:
                return False
    return len(stack) == 0",7dac20d60badb6f9,575ed40b22d69af4,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,brackets_v1
1756744507.9100425,brackets_v1,brackets_v1_1756744507,gpt-4o-mini,0.0,"```python
def is_balanced(s):
    stack = []
    brackets = {')': '(', ']': '[', '}': '{'}
    
    for char in s:
        if char in brackets.values():
            stack.append(char)
        elif char in brackets.keys():
            if not stack or stack.pop() != brackets[char]:
                return False
    
    return not stack
```","def is_balanced(s):
    stack = []
    brackets = {')': '(', ']': '[', '}': '{'}
    
    for char in s:
        if char in brackets.values():
            stack.append(char)
        elif char in brackets.keys():
            if not stack or stack.pop() != brackets[char]:
                return False
    
    return not stack","def is_balanced(s):
    stack = []
    brackets = {')': '(', ']': '[', '}': '{'}
    for char in s:
        if char in brackets.values():
            stack.append(char)
        elif char in brackets.keys():
            if not stack or stack.pop() != brackets[char]:
                return False
    return not stack",96dae3f02a200e18,08d608547462d16a,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,brackets_v1
1756744509.9513235,brackets_v1,brackets_v1_1756744509,gpt-4o-mini,0.0,"```python
def is_balanced(s):
    stack = []
    brackets = {')': '(', ']': '[', '}': '{'}
    
    for char in s:
        if char in brackets.values():
            stack.append(char)
        elif char in brackets.keys():
            if not stack or stack.pop() != brackets[char]:
                return False
    
    return not stack
```","def is_balanced(s):
    stack = []
    brackets = {')': '(', ']': '[', '}': '{'}
    
    for char in s:
        if char in brackets.values():
            stack.append(char)
        elif char in brackets.keys():
            if not stack or stack.pop() != brackets[char]:
                return False
    
    return not stack","def is_balanced(s):
    stack = []
    brackets = {')': '(', ']': '[', '}': '{'}
    for char in s:
        if char in brackets.values():
            stack.append(char)
        elif char in brackets.keys():
            if not stack or stack.pop() != brackets[char]:
                return False
    return not stack",96dae3f02a200e18,08d608547462d16a,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,brackets_v1
1756744511.9432757,brackets_v1,brackets_v1_1756744511,gpt-4o-mini,0.0,"```python
def is_balanced(s):
    stack = []
    brackets = {')': '(', ']': '[', '}': '{'}
    
    for char in s:
        if char in brackets.values():
            stack.append(char)
        elif char in brackets.keys():
            if not stack or stack.pop() != brackets[char]:
                return False
    
    return not stack
```","def is_balanced(s):
    stack = []
    brackets = {')': '(', ']': '[', '}': '{'}
    
    for char in s:
        if char in brackets.values():
            stack.append(char)
        elif char in brackets.keys():
            if not stack or stack.pop() != brackets[char]:
                return False
    
    return not stack","def is_balanced(s):
    stack = []
    brackets = {')': '(', ']': '[', '}': '{'}
    for char in s:
        if char in brackets.values():
            stack.append(char)
        elif char in brackets.keys():
            if not stack or stack.pop() != brackets[char]:
                return False
    return not stack",96dae3f02a200e18,08d608547462d16a,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,brackets_v1
1756744514.5223818,brackets_v1,brackets_v1_1756744514,gpt-4o-mini,0.0,"```python
def is_balanced(s):
    stack = []
    brackets = {')': '(', ']': '[', '}': '{'}
    
    for char in s:
        if char in brackets.values():
            stack.append(char)
        elif char in brackets.keys():
            if not stack or stack.pop() != brackets[char]:
                return False
    return not stack
```","def is_balanced(s):
    stack = []
    brackets = {')': '(', ']': '[', '}': '{'}
    
    for char in s:
        if char in brackets.values():
            stack.append(char)
        elif char in brackets.keys():
            if not stack or stack.pop() != brackets[char]:
                return False
    return not stack","def is_balanced(s):
    stack = []
    brackets = {')': '(', ']': '[', '}': '{'}
    for char in s:
        if char in brackets.values():
            stack.append(char)
        elif char in brackets.keys():
            if not stack or stack.pop() != brackets[char]:
                return False
    return not stack",8b4b6e51b08ed4c1,08d608547462d16a,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,brackets_v1
1756744517.2151117,brackets_v1,brackets_v1_1756744517,gpt-4o-mini,0.0,"```python
def is_balanced(s):
    stack = []
    brackets = {')': '(', ']': '[', '}': '{'}
    
    for char in s:
        if char in brackets.values():
            stack.append(char)
        elif char in brackets.keys():
            if not stack or stack.pop() != brackets[char]:
                return False
    
    return not stack
```","def is_balanced(s):
    stack = []
    brackets = {')': '(', ']': '[', '}': '{'}
    
    for char in s:
        if char in brackets.values():
            stack.append(char)
        elif char in brackets.keys():
            if not stack or stack.pop() != brackets[char]:
                return False
    
    return not stack","def is_balanced(s):
    stack = []
    brackets = {')': '(', ']': '[', '}': '{'}
    for char in s:
        if char in brackets.values():
            stack.append(char)
        elif char in brackets.keys():
            if not stack or stack.pop() != brackets[char]:
                return False
    return not stack",96dae3f02a200e18,08d608547462d16a,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,brackets_v1
1756744519.7193224,brackets_v1,brackets_v1_1756744519,gpt-4o-mini,0.2,"```python
def is_balanced(s):
    stack = []
    bracket_map = {')': '(', ']': '[', '}': '{'}
    open_brackets = bracket_map.values()

    for char in s:
        if char in open_brackets:
            stack.append(char)
        elif char in bracket_map:
            if not stack or stack.pop() != bracket_map[char]:
                return False

    return not stack
```","def is_balanced(s):
    stack = []
    bracket_map = {')': '(', ']': '[', '}': '{'}
    open_brackets = bracket_map.values()

    for char in s:
        if char in open_brackets:
            stack.append(char)
        elif char in bracket_map:
            if not stack or stack.pop() != bracket_map[char]:
                return False

    return not stack","def is_balanced(s):
    stack = []
    bracket_map = {')': '(', ']': '[', '}': '{'}
    open_brackets = bracket_map.values()
    for char in s:
        if char in open_brackets:
            stack.append(char)
        elif char in bracket_map:
            if not stack or stack.pop() != bracket_map[char]:
                return False
    return not stack",9734c8ce38f9fca2,fc2336850d3290b1,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,brackets_v1
1756744521.992823,brackets_v1,brackets_v1_1756744521,gpt-4o-mini,0.2,"```python
def is_balanced(s):
    stack = []
    brackets = {')': '(', ']': '[', '}': '{'}
    
    for char in s:
        if char in brackets.values():
            stack.append(char)
        elif char in brackets.keys():
            if not stack or stack.pop() != brackets[char]:
                return False
    
    return len(stack) == 0
```","def is_balanced(s):
    stack = []
    brackets = {')': '(', ']': '[', '}': '{'}
    
    for char in s:
        if char in brackets.values():
            stack.append(char)
        elif char in brackets.keys():
            if not stack or stack.pop() != brackets[char]:
                return False
    
    return len(stack) == 0","def is_balanced(s):
    stack = []
    brackets = {')': '(', ']': '[', '}': '{'}
    for char in s:
        if char in brackets.values():
            stack.append(char)
        elif char in brackets.keys():
            if not stack or stack.pop() != brackets[char]:
                return False
    return len(stack) == 0",7dac20d60badb6f9,575ed40b22d69af4,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,brackets_v1
1756744524.5519557,brackets_v1,brackets_v1_1756744524,gpt-4o-mini,0.2,"```python
def is_balanced(s):
    stack = []
    brackets = {')': '(', ']': '[', '}': '{'}
    
    for char in s:
        if char in brackets.values():
            stack.append(char)
        elif char in brackets.keys():
            if not stack or stack.pop() != brackets[char]:
                return False
                
    return not stack
```","def is_balanced(s):
    stack = []
    brackets = {')': '(', ']': '[', '}': '{'}
    
    for char in s:
        if char in brackets.values():
            stack.append(char)
        elif char in brackets.keys():
            if not stack or stack.pop() != brackets[char]:
                return False
                
    return not stack","def is_balanced(s):
    stack = []
    brackets = {')': '(', ']': '[', '}': '{'}
    for char in s:
        if char in brackets.values():
            stack.append(char)
        elif char in brackets.keys():
            if not stack or stack.pop() != brackets[char]:
                return False
    return not stack",c9606186035f84d1,08d608547462d16a,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,brackets_v1
1756744526.96965,brackets_v1,brackets_v1_1756744526,gpt-4o-mini,0.2,"```python
def is_balanced(s):
    stack = []
    brackets = {')': '(', ']': '[', '}': '{'}
    
    for char in s:
        if char in brackets.values():
            stack.append(char)
        elif char in brackets.keys():
            if not stack or stack.pop() != brackets[char]:
                return False
    
    return len(stack) == 0
```","def is_balanced(s):
    stack = []
    brackets = {')': '(', ']': '[', '}': '{'}
    
    for char in s:
        if char in brackets.values():
            stack.append(char)
        elif char in brackets.keys():
            if not stack or stack.pop() != brackets[char]:
                return False
    
    return len(stack) == 0","def is_balanced(s):
    stack = []
    brackets = {')': '(', ']': '[', '}': '{'}
    for char in s:
        if char in brackets.values():
            stack.append(char)
        elif char in brackets.keys():
            if not stack or stack.pop() != brackets[char]:
                return False
    return len(stack) == 0",7dac20d60badb6f9,575ed40b22d69af4,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,brackets_v1
1756744529.165649,brackets_v1,brackets_v1_1756744529,gpt-4o-mini,0.2,"```python
def is_balanced(s):
    stack = []
    mapping = {')': '(', ']': '[', '}': '{'}
    
    for char in s:
        if char in mapping.values():
            stack.append(char)
        elif char in mapping.keys():
            if stack == [] or mapping[char] != stack.pop():
                return False
    return stack == []
```","def is_balanced(s):
    stack = []
    mapping = {')': '(', ']': '[', '}': '{'}
    
    for char in s:
        if char in mapping.values():
            stack.append(char)
        elif char in mapping.keys():
            if stack == [] or mapping[char] != stack.pop():
                return False
    return stack == []","def is_balanced(s):
    stack = []
    mapping = {')': '(', ']': '[', '}': '{'}
    for char in s:
        if char in mapping.values():
            stack.append(char)
        elif char in mapping.keys():
            if stack == [] or mapping[char] != stack.pop():
                return False
    return stack == []",73aab637c40154ec,7c5f6b84f40605e0,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,brackets_v1
1756744532.046414,brackets_v1,brackets_v1_1756744532,gpt-4o-mini,0.2,"```python
def is_balanced(s):
    stack = []
    brackets = {')': '(', ']': '[', '}': '{'}
    
    for char in s:
        if char in brackets.values():
            stack.append(char)
        elif char in brackets.keys():
            if not stack or stack.pop() != brackets[char]:
                return False
                
    return not stack
```","def is_balanced(s):
    stack = []
    brackets = {')': '(', ']': '[', '}': '{'}
    
    for char in s:
        if char in brackets.values():
            stack.append(char)
        elif char in brackets.keys():
            if not stack or stack.pop() != brackets[char]:
                return False
                
    return not stack","def is_balanced(s):
    stack = []
    brackets = {')': '(', ']': '[', '}': '{'}
    for char in s:
        if char in brackets.values():
            stack.append(char)
        elif char in brackets.keys():
            if not stack or stack.pop() != brackets[char]:
                return False
    return not stack",c9606186035f84d1,08d608547462d16a,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,brackets_v1
1756744534.2552462,brackets_v1,brackets_v1_1756744534,gpt-4o-mini,0.2,"```python
def is_balanced(s):
    stack = []
    brackets = {')': '(', ']': '[', '}': '{'}
    
    for char in s:
        if char in brackets.values():
            stack.append(char)
        elif char in brackets.keys():
            if not stack or stack.pop() != brackets[char]:
                return False
    return not stack
```","def is_balanced(s):
    stack = []
    brackets = {')': '(', ']': '[', '}': '{'}
    
    for char in s:
        if char in brackets.values():
            stack.append(char)
        elif char in brackets.keys():
            if not stack or stack.pop() != brackets[char]:
                return False
    return not stack","def is_balanced(s):
    stack = []
    brackets = {')': '(', ']': '[', '}': '{'}
    for char in s:
        if char in brackets.values():
            stack.append(char)
        elif char in brackets.keys():
            if not stack or stack.pop() != brackets[char]:
                return False
    return not stack",8b4b6e51b08ed4c1,08d608547462d16a,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,brackets_v1
1756744536.5039382,brackets_v1,brackets_v1_1756744536,gpt-4o-mini,0.2,"```python
def is_balanced(s):
    stack = []
    brackets = {')': '(', ']': '[', '}': '{'}
    
    for char in s:
        if char in brackets.values():
            stack.append(char)
        elif char in brackets.keys():
            if not stack or stack.pop() != brackets[char]:
                return False
    return not stack
```","def is_balanced(s):
    stack = []
    brackets = {')': '(', ']': '[', '}': '{'}
    
    for char in s:
        if char in brackets.values():
            stack.append(char)
        elif char in brackets.keys():
            if not stack or stack.pop() != brackets[char]:
                return False
    return not stack","def is_balanced(s):
    stack = []
    brackets = {')': '(', ']': '[', '}': '{'}
    for char in s:
        if char in brackets.values():
            stack.append(char)
        elif char in brackets.keys():
            if not stack or stack.pop() != brackets[char]:
                return False
    return not stack",8b4b6e51b08ed4c1,08d608547462d16a,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,brackets_v1
1756744538.3019445,brackets_v1,brackets_v1_1756744538,gpt-4o-mini,0.2,"```python
def is_balanced(s):
    stack = []
    brackets = {')': '(', ']': '[', '}': '{'}
    
    for char in s:
        if char in brackets.values():
            stack.append(char)
        elif char in brackets.keys():
            if not stack or stack.pop() != brackets[char]:
                return False
    return not stack
```","def is_balanced(s):
    stack = []
    brackets = {')': '(', ']': '[', '}': '{'}
    
    for char in s:
        if char in brackets.values():
            stack.append(char)
        elif char in brackets.keys():
            if not stack or stack.pop() != brackets[char]:
                return False
    return not stack","def is_balanced(s):
    stack = []
    brackets = {')': '(', ']': '[', '}': '{'}
    for char in s:
        if char in brackets.values():
            stack.append(char)
        elif char in brackets.keys():
            if not stack or stack.pop() != brackets[char]:
                return False
    return not stack",8b4b6e51b08ed4c1,08d608547462d16a,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,brackets_v1
1756744541.0206504,brackets_v1,brackets_v1_1756744541,gpt-4o-mini,0.2,"```python
def is_balanced(s):
    stack = []
    brackets = {')': '(', ']': '[', '}': '{'}
    
    for char in s:
        if char in brackets.values():
            stack.append(char)
        elif char in brackets.keys():
            if not stack or stack.pop() != brackets[char]:
                return False
                
    return not stack
```","def is_balanced(s):
    stack = []
    brackets = {')': '(', ']': '[', '}': '{'}
    
    for char in s:
        if char in brackets.values():
            stack.append(char)
        elif char in brackets.keys():
            if not stack or stack.pop() != brackets[char]:
                return False
                
    return not stack","def is_balanced(s):
    stack = []
    brackets = {')': '(', ']': '[', '}': '{'}
    for char in s:
        if char in brackets.values():
            stack.append(char)
        elif char in brackets.keys():
            if not stack or stack.pop() != brackets[char]:
                return False
    return not stack",c9606186035f84d1,08d608547462d16a,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,brackets_v1
1756744543.9398434,brackets_v2,brackets_v2_1756744543,gpt-4o-mini,0.0,"```python
def is_balanced(s):
    stack = []
    brackets = {')': '(', ']': '[', '}': '{'}
    
    for char in s:
        if char in brackets.values():
            stack.append(char)
        elif char in brackets.keys():
            if not stack or stack.pop() != brackets[char]:
                return False
    
    return len(stack) == 0
```","def is_balanced(s):
    stack = []
    brackets = {')': '(', ']': '[', '}': '{'}
    
    for char in s:
        if char in brackets.values():
            stack.append(char)
        elif char in brackets.keys():
            if not stack or stack.pop() != brackets[char]:
                return False
    
    return len(stack) == 0","def is_balanced(s):
    stack = []
    brackets = {')': '(', ']': '[', '}': '{'}
    for char in s:
        if char in brackets.values():
            stack.append(char)
        elif char in brackets.keys():
            if not stack or stack.pop() != brackets[char]:
                return False
    return len(stack) == 0",7dac20d60badb6f9,575ed40b22d69af4,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,brackets_v2
1756744547.707457,brackets_v2,brackets_v2_1756744547,gpt-4o-mini,0.0,"```python
def is_balanced(s):
    stack = []
    parentheses = {')': '(', ']': '[', '}': '{'}
    
    for char in s:
        if char in parentheses.values():
            stack.append(char)
        elif char in parentheses.keys():
            if not stack or stack.pop() != parentheses[char]:
                return False
    
    return len(stack) == 0
```","def is_balanced(s):
    stack = []
    parentheses = {')': '(', ']': '[', '}': '{'}
    
    for char in s:
        if char in parentheses.values():
            stack.append(char)
        elif char in parentheses.keys():
            if not stack or stack.pop() != parentheses[char]:
                return False
    
    return len(stack) == 0","def is_balanced(s):
    stack = []
    parentheses = {')': '(', ']': '[', '}': '{'}
    for char in s:
        if char in parentheses.values():
            stack.append(char)
        elif char in parentheses.keys():
            if not stack or stack.pop() != parentheses[char]:
                return False
    return len(stack) == 0",70c5e1b8cd6e0c3e,52301c9611327349,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,brackets_v2
1756744550.329475,brackets_v2,brackets_v2_1756744550,gpt-4o-mini,0.0,"```python
def is_balanced(s):
    stack = []
    parentheses = {')': '(', ']': '[', '}': '{'}
    
    for char in s:
        if char in parentheses.values():
            stack.append(char)
        elif char in parentheses.keys():
            if not stack or stack.pop() != parentheses[char]:
                return False
    
    return len(stack) == 0
```","def is_balanced(s):
    stack = []
    parentheses = {')': '(', ']': '[', '}': '{'}
    
    for char in s:
        if char in parentheses.values():
            stack.append(char)
        elif char in parentheses.keys():
            if not stack or stack.pop() != parentheses[char]:
                return False
    
    return len(stack) == 0","def is_balanced(s):
    stack = []
    parentheses = {')': '(', ']': '[', '}': '{'}
    for char in s:
        if char in parentheses.values():
            stack.append(char)
        elif char in parentheses.keys():
            if not stack or stack.pop() != parentheses[char]:
                return False
    return len(stack) == 0",70c5e1b8cd6e0c3e,52301c9611327349,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,brackets_v2
1756744554.8877537,brackets_v2,brackets_v2_1756744554,gpt-4o-mini,0.0,"```python
def is_balanced(s):
    stack = []
    parentheses = {')': '(', ']': '[', '}': '{'}
    
    for char in s:
        if char in parentheses.values():
            stack.append(char)
        elif char in parentheses.keys():
            if not stack or stack.pop() != parentheses[char]:
                return False
    
    return len(stack) == 0
```","def is_balanced(s):
    stack = []
    parentheses = {')': '(', ']': '[', '}': '{'}
    
    for char in s:
        if char in parentheses.values():
            stack.append(char)
        elif char in parentheses.keys():
            if not stack or stack.pop() != parentheses[char]:
                return False
    
    return len(stack) == 0","def is_balanced(s):
    stack = []
    parentheses = {')': '(', ']': '[', '}': '{'}
    for char in s:
        if char in parentheses.values():
            stack.append(char)
        elif char in parentheses.keys():
            if not stack or stack.pop() != parentheses[char]:
                return False
    return len(stack) == 0",70c5e1b8cd6e0c3e,52301c9611327349,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,brackets_v2
1756744557.5191746,brackets_v2,brackets_v2_1756744557,gpt-4o-mini,0.0,"```python
def is_balanced(s):
    stack = []
    mapping = {')': '(', '}': '{', ']': '['}
    
    for char in s:
        if char in mapping.values():
            stack.append(char)
        elif char in mapping.keys():
            if stack == [] or mapping[char] != stack.pop():
                return False
    
    return stack == []
```","def is_balanced(s):
    stack = []
    mapping = {')': '(', '}': '{', ']': '['}
    
    for char in s:
        if char in mapping.values():
            stack.append(char)
        elif char in mapping.keys():
            if stack == [] or mapping[char] != stack.pop():
                return False
    
    return stack == []","def is_balanced(s):
    stack = []
    mapping = {')': '(', '}': '{', ']': '['}
    for char in s:
        if char in mapping.values():
            stack.append(char)
        elif char in mapping.keys():
            if stack == [] or mapping[char] != stack.pop():
                return False
    return stack == []",de6e33f045255a41,9dad437465e5e8f6,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,brackets_v2
1756744559.9013765,brackets_v2,brackets_v2_1756744559,gpt-4o-mini,0.0,"```python
def is_balanced(s):
    stack = []
    parentheses = {')': '(', ']': '[', '}': '{'}
    
    for char in s:
        if char in parentheses.values():
            stack.append(char)
        elif char in parentheses.keys():
            if not stack or stack.pop() != parentheses[char]:
                return False
    
    return len(stack) == 0
```","def is_balanced(s):
    stack = []
    parentheses = {')': '(', ']': '[', '}': '{'}
    
    for char in s:
        if char in parentheses.values():
            stack.append(char)
        elif char in parentheses.keys():
            if not stack or stack.pop() != parentheses[char]:
                return False
    
    return len(stack) == 0","def is_balanced(s):
    stack = []
    parentheses = {')': '(', ']': '[', '}': '{'}
    for char in s:
        if char in parentheses.values():
            stack.append(char)
        elif char in parentheses.keys():
            if not stack or stack.pop() != parentheses[char]:
                return False
    return len(stack) == 0",70c5e1b8cd6e0c3e,52301c9611327349,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,brackets_v2
1756744562.1271405,brackets_v2,brackets_v2_1756744562,gpt-4o-mini,0.0,"```python
def is_balanced(s):
    stack = []
    parentheses = {')': '(', ']': '[', '}': '{'}
    
    for char in s:
        if char in parentheses.values():
            stack.append(char)
        elif char in parentheses.keys():
            if not stack or stack.pop() != parentheses[char]:
                return False
    
    return len(stack) == 0
```","def is_balanced(s):
    stack = []
    parentheses = {')': '(', ']': '[', '}': '{'}
    
    for char in s:
        if char in parentheses.values():
            stack.append(char)
        elif char in parentheses.keys():
            if not stack or stack.pop() != parentheses[char]:
                return False
    
    return len(stack) == 0","def is_balanced(s):
    stack = []
    parentheses = {')': '(', ']': '[', '}': '{'}
    for char in s:
        if char in parentheses.values():
            stack.append(char)
        elif char in parentheses.keys():
            if not stack or stack.pop() != parentheses[char]:
                return False
    return len(stack) == 0",70c5e1b8cd6e0c3e,52301c9611327349,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,brackets_v2
1756744564.4766793,brackets_v2,brackets_v2_1756744564,gpt-4o-mini,0.0,"```python
def is_balanced(s):
    stack = []
    parentheses_map = {')': '(', ']': '[', '}': '{'}
    
    for char in s:
        if char in parentheses_map.values():
            stack.append(char)
        elif char in parentheses_map.keys():
            if not stack or stack.pop() != parentheses_map[char]:
                return False
    
    return len(stack) == 0
```","def is_balanced(s):
    stack = []
    parentheses_map = {')': '(', ']': '[', '}': '{'}
    
    for char in s:
        if char in parentheses_map.values():
            stack.append(char)
        elif char in parentheses_map.keys():
            if not stack or stack.pop() != parentheses_map[char]:
                return False
    
    return len(stack) == 0","def is_balanced(s):
    stack = []
    parentheses_map = {')': '(', ']': '[', '}': '{'}
    for char in s:
        if char in parentheses_map.values():
            stack.append(char)
        elif char in parentheses_map.keys():
            if not stack or stack.pop() != parentheses_map[char]:
                return False
    return len(stack) == 0",65b0166e3e43f9db,93e13db610b6b8ef,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,brackets_v2
1756744567.8862958,brackets_v2,brackets_v2_1756744567,gpt-4o-mini,0.0,"```python
def is_balanced(s):
    stack = []
    parentheses_map = {')': '(', ']': '[', '}': '{'}
    
    for char in s:
        if char in parentheses_map.values():
            stack.append(char)
        elif char in parentheses_map.keys():
            if not stack or stack.pop() != parentheses_map[char]:
                return False
    
    return len(stack) == 0
```","def is_balanced(s):
    stack = []
    parentheses_map = {')': '(', ']': '[', '}': '{'}
    
    for char in s:
        if char in parentheses_map.values():
            stack.append(char)
        elif char in parentheses_map.keys():
            if not stack or stack.pop() != parentheses_map[char]:
                return False
    
    return len(stack) == 0","def is_balanced(s):
    stack = []
    parentheses_map = {')': '(', ']': '[', '}': '{'}
    for char in s:
        if char in parentheses_map.values():
            stack.append(char)
        elif char in parentheses_map.keys():
            if not stack or stack.pop() != parentheses_map[char]:
                return False
    return len(stack) == 0",65b0166e3e43f9db,93e13db610b6b8ef,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,brackets_v2
1756744570.7504358,brackets_v2,brackets_v2_1756744570,gpt-4o-mini,0.0,"```python
def is_balanced(s):
    stack = []
    parentheses = {')': '(', ']': '[', '}': '{'}
    
    for char in s:
        if char in parentheses.values():
            stack.append(char)
        elif char in parentheses.keys():
            if not stack or stack.pop() != parentheses[char]:
                return False
    
    return len(stack) == 0
```","def is_balanced(s):
    stack = []
    parentheses = {')': '(', ']': '[', '}': '{'}
    
    for char in s:
        if char in parentheses.values():
            stack.append(char)
        elif char in parentheses.keys():
            if not stack or stack.pop() != parentheses[char]:
                return False
    
    return len(stack) == 0","def is_balanced(s):
    stack = []
    parentheses = {')': '(', ']': '[', '}': '{'}
    for char in s:
        if char in parentheses.values():
            stack.append(char)
        elif char in parentheses.keys():
            if not stack or stack.pop() != parentheses[char]:
                return False
    return len(stack) == 0",70c5e1b8cd6e0c3e,52301c9611327349,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,brackets_v2
1756744572.9701252,brackets_v2,brackets_v2_1756744572,gpt-4o-mini,0.2,"```python
def is_balanced(s):
    stack = []
    parentheses_map = {')': '(', ']': '[', '}': '{'}
    
    for char in s:
        if char in parentheses_map.values():
            stack.append(char)
        elif char in parentheses_map.keys():
            if not stack or stack.pop() != parentheses_map[char]:
                return False
    
    return len(stack) == 0
```","def is_balanced(s):
    stack = []
    parentheses_map = {')': '(', ']': '[', '}': '{'}
    
    for char in s:
        if char in parentheses_map.values():
            stack.append(char)
        elif char in parentheses_map.keys():
            if not stack or stack.pop() != parentheses_map[char]:
                return False
    
    return len(stack) == 0","def is_balanced(s):
    stack = []
    parentheses_map = {')': '(', ']': '[', '}': '{'}
    for char in s:
        if char in parentheses_map.values():
            stack.append(char)
        elif char in parentheses_map.keys():
            if not stack or stack.pop() != parentheses_map[char]:
                return False
    return len(stack) == 0",65b0166e3e43f9db,93e13db610b6b8ef,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,brackets_v2
1756744574.9153297,brackets_v2,brackets_v2_1756744574,gpt-4o-mini,0.2,"```python
def is_balanced(s):
    stack = []
    mapping = {')': '(', '}': '{', ']': '['}
    
    for char in s:
        if char in mapping.values():
            stack.append(char)
        elif char in mapping.keys():
            if stack == [] or mapping[char] != stack.pop():
                return False
    
    return stack == []
```","def is_balanced(s):
    stack = []
    mapping = {')': '(', '}': '{', ']': '['}
    
    for char in s:
        if char in mapping.values():
            stack.append(char)
        elif char in mapping.keys():
            if stack == [] or mapping[char] != stack.pop():
                return False
    
    return stack == []","def is_balanced(s):
    stack = []
    mapping = {')': '(', '}': '{', ']': '['}
    for char in s:
        if char in mapping.values():
            stack.append(char)
        elif char in mapping.keys():
            if stack == [] or mapping[char] != stack.pop():
                return False
    return stack == []",de6e33f045255a41,9dad437465e5e8f6,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,brackets_v2
1756744577.7067606,brackets_v2,brackets_v2_1756744577,gpt-4o-mini,0.2,"```python
def is_balanced(s):
    stack = []
    brackets = {')': '(', ']': '[', '}': '{'}
    
    for char in s:
        if char in brackets.values():
            stack.append(char)
        elif char in brackets.keys():
            if not stack or stack.pop() != brackets[char]:
                return False
    
    return len(stack) == 0
```","def is_balanced(s):
    stack = []
    brackets = {')': '(', ']': '[', '}': '{'}
    
    for char in s:
        if char in brackets.values():
            stack.append(char)
        elif char in brackets.keys():
            if not stack or stack.pop() != brackets[char]:
                return False
    
    return len(stack) == 0","def is_balanced(s):
    stack = []
    brackets = {')': '(', ']': '[', '}': '{'}
    for char in s:
        if char in brackets.values():
            stack.append(char)
        elif char in brackets.keys():
            if not stack or stack.pop() != brackets[char]:
                return False
    return len(stack) == 0",7dac20d60badb6f9,575ed40b22d69af4,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,brackets_v2
1756744579.9439142,brackets_v2,brackets_v2_1756744579,gpt-4o-mini,0.2,"```python
def is_balanced(s):
    stack = []
    parentheses_map = {')': '(', ']': '[', '}': '{'}
    
    for char in s:
        if char in parentheses_map.values():
            stack.append(char)
        elif char in parentheses_map.keys():
            if not stack or stack.pop() != parentheses_map[char]:
                return False
    
    return len(stack) == 0
```","def is_balanced(s):
    stack = []
    parentheses_map = {')': '(', ']': '[', '}': '{'}
    
    for char in s:
        if char in parentheses_map.values():
            stack.append(char)
        elif char in parentheses_map.keys():
            if not stack or stack.pop() != parentheses_map[char]:
                return False
    
    return len(stack) == 0","def is_balanced(s):
    stack = []
    parentheses_map = {')': '(', ']': '[', '}': '{'}
    for char in s:
        if char in parentheses_map.values():
            stack.append(char)
        elif char in parentheses_map.keys():
            if not stack or stack.pop() != parentheses_map[char]:
                return False
    return len(stack) == 0",65b0166e3e43f9db,93e13db610b6b8ef,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,brackets_v2
1756744582.2908382,brackets_v2,brackets_v2_1756744582,gpt-4o-mini,0.2,"```python
def is_balanced(s):
    stack = []
    bracket_map = {')': '(', ']': '[', '}': '{'}
    
    for char in s:
        if char in bracket_map.values():
            stack.append(char)
        elif char in bracket_map.keys():
            if not stack or stack.pop() != bracket_map[char]:
                return False
    
    return len(stack) == 0
```","def is_balanced(s):
    stack = []
    bracket_map = {')': '(', ']': '[', '}': '{'}
    
    for char in s:
        if char in bracket_map.values():
            stack.append(char)
        elif char in bracket_map.keys():
            if not stack or stack.pop() != bracket_map[char]:
                return False
    
    return len(stack) == 0","def is_balanced(s):
    stack = []
    bracket_map = {')': '(', ']': '[', '}': '{'}
    for char in s:
        if char in bracket_map.values():
            stack.append(char)
        elif char in bracket_map.keys():
            if not stack or stack.pop() != bracket_map[char]:
                return False
    return len(stack) == 0",ae09d4c4a36b722d,c98d91a2ad725f57,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,brackets_v2
1756744586.0617318,brackets_v2,brackets_v2_1756744586,gpt-4o-mini,0.2,"```python
def is_balanced(s):
    stack = []
    parentheses_map = {')': '(', ']': '[', '}': '{'}
    
    for char in s:
        if char in parentheses_map.values():
            stack.append(char)
        elif char in parentheses_map.keys():
            if not stack or stack.pop() != parentheses_map[char]:
                return False
    
    return len(stack) == 0
```","def is_balanced(s):
    stack = []
    parentheses_map = {')': '(', ']': '[', '}': '{'}
    
    for char in s:
        if char in parentheses_map.values():
            stack.append(char)
        elif char in parentheses_map.keys():
            if not stack or stack.pop() != parentheses_map[char]:
                return False
    
    return len(stack) == 0","def is_balanced(s):
    stack = []
    parentheses_map = {')': '(', ']': '[', '}': '{'}
    for char in s:
        if char in parentheses_map.values():
            stack.append(char)
        elif char in parentheses_map.keys():
            if not stack or stack.pop() != parentheses_map[char]:
                return False
    return len(stack) == 0",65b0166e3e43f9db,93e13db610b6b8ef,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,brackets_v2
1756744588.2355196,brackets_v2,brackets_v2_1756744588,gpt-4o-mini,0.2,"```python
def is_balanced(s):
    stack = []
    parentheses = {')': '(', ']': '[', '}': '{'}
    
    for char in s:
        if char in parentheses.values():
            stack.append(char)
        elif char in parentheses.keys():
            if not stack or stack.pop() != parentheses[char]:
                return False
    
    return len(stack) == 0
```","def is_balanced(s):
    stack = []
    parentheses = {')': '(', ']': '[', '}': '{'}
    
    for char in s:
        if char in parentheses.values():
            stack.append(char)
        elif char in parentheses.keys():
            if not stack or stack.pop() != parentheses[char]:
                return False
    
    return len(stack) == 0","def is_balanced(s):
    stack = []
    parentheses = {')': '(', ']': '[', '}': '{'}
    for char in s:
        if char in parentheses.values():
            stack.append(char)
        elif char in parentheses.keys():
            if not stack or stack.pop() != parentheses[char]:
                return False
    return len(stack) == 0",70c5e1b8cd6e0c3e,52301c9611327349,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,brackets_v2
1756744590.6628432,brackets_v2,brackets_v2_1756744590,gpt-4o-mini,0.2,"```python
def is_balanced(s):
    stack = []
    mapping = {')': '(', ']': '[', '}': '{'}
    
    for char in s:
        if char in mapping.values():
            stack.append(char)
        elif char in mapping.keys():
            if stack == [] or mapping[char] != stack.pop():
                return False
                
    return stack == []
```","def is_balanced(s):
    stack = []
    mapping = {')': '(', ']': '[', '}': '{'}
    
    for char in s:
        if char in mapping.values():
            stack.append(char)
        elif char in mapping.keys():
            if stack == [] or mapping[char] != stack.pop():
                return False
                
    return stack == []","def is_balanced(s):
    stack = []
    mapping = {')': '(', ']': '[', '}': '{'}
    for char in s:
        if char in mapping.values():
            stack.append(char)
        elif char in mapping.keys():
            if stack == [] or mapping[char] != stack.pop():
                return False
    return stack == []",77499b4a10d64747,7c5f6b84f40605e0,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,brackets_v2
1756744594.0196106,brackets_v2,brackets_v2_1756744594,gpt-4o-mini,0.2,"```python
def is_balanced(s):
    stack = []
    brackets = {')': '(', ']': '[', '}': '{'}
    
    for char in s:
        if char in brackets.values():
            stack.append(char)
        elif char in brackets.keys():
            if not stack or stack.pop() != brackets[char]:
                return False
                
    return len(stack) == 0
```","def is_balanced(s):
    stack = []
    brackets = {')': '(', ']': '[', '}': '{'}
    
    for char in s:
        if char in brackets.values():
            stack.append(char)
        elif char in brackets.keys():
            if not stack or stack.pop() != brackets[char]:
                return False
                
    return len(stack) == 0","def is_balanced(s):
    stack = []
    brackets = {')': '(', ']': '[', '}': '{'}
    for char in s:
        if char in brackets.values():
            stack.append(char)
        elif char in brackets.keys():
            if not stack or stack.pop() != brackets[char]:
                return False
    return len(stack) == 0",bf0bda784d8abe8f,575ed40b22d69af4,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,brackets_v2
1756744596.1624842,brackets_v2,brackets_v2_1756744596,gpt-4o-mini,0.2,"```python
def is_balanced(s):
    stack = []
    parentheses = {')': '(', ']': '[', '}': '{'}
    
    for char in s:
        if char in parentheses.values():
            stack.append(char)
        elif char in parentheses.keys():
            if not stack or stack.pop() != parentheses[char]:
                return False
    
    return len(stack) == 0
```","def is_balanced(s):
    stack = []
    parentheses = {')': '(', ']': '[', '}': '{'}
    
    for char in s:
        if char in parentheses.values():
            stack.append(char)
        elif char in parentheses.keys():
            if not stack or stack.pop() != parentheses[char]:
                return False
    
    return len(stack) == 0","def is_balanced(s):
    stack = []
    parentheses = {')': '(', ']': '[', '}': '{'}
    for char in s:
        if char in parentheses.values():
            stack.append(char)
        elif char in parentheses.keys():
            if not stack or stack.pop() != parentheses[char]:
                return False
    return len(stack) == 0",70c5e1b8cd6e0c3e,52301c9611327349,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,brackets_v2
