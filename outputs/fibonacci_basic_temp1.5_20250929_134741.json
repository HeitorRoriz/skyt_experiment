{
  "experiment_id": "fibonacci_basic_temp1.5_20250929_134741",
  "contract_id": "fibonacci_basic",
  "temperature": 1.5,
  "timestamp": "2025-09-29T13:47:41.823275",
  "num_runs": 10,
  "successful_runs": 10,
  "contract": {
    "id": "fibonacci_basic",
    "task_intent": "Generate nth Fibonacci number using iteration",
    "prompt": "Write a Python function called 'fibonacci' that takes an integer n and returns the nth Fibonacci number. Use iteration, not recursion.",
    "constraints": {
      "function_name": "fibonacci",
      "requires_recursion": false,
      "implementation_style": "iterative"
    },
    "language": "python",
    "environment": {},
    "output_format": "raw_code",
    "oracle_requirements": {
      "test_cases": [
        {
          "input": 0,
          "expected": 0,
          "description": "Base case F(0)"
        },
        {
          "input": 1,
          "expected": 1,
          "description": "Base case F(1)"
        },
        {
          "input": 5,
          "expected": 5,
          "description": "F(5)"
        },
        {
          "input": 10,
          "expected": 55,
          "description": "F(10)"
        }
      ],
      "correctness_threshold": 1.0,
      "required_pass_rate": 0.8
    },
    "normalization_rules": {
      "remove_comments": true,
      "normalize_whitespace": true,
      "enforce_function_name": true
    },
    "anchor_signature": null,
    "compliance_flag": false,
    "distance_metric": "foundational_properties",
    "rescue_bounds": {
      "allow_function_rename": true,
      "allow_print_removal": true,
      "max_transformations": 5
    },
    "model_specification": {},
    "contract_version": "2.0",
    "oracle_version": "1.0",
    "normalization_version": "1.0",
    "created_timestamp": "2025-09-29T13:47:14.589838",
    "run_id": null,
    "prompt_id": "fibonacci_basic",
    "sample_id": null
  },
  "canon_data": {
    "contract_id": "fibonacci_basic",
    "canonical_code": "def fibonacci(n):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b",
    "foundational_properties": {
      "control_flow_signature": {
        "if_statements": 2,
        "for_loops": 1,
        "while_loops": 0,
        "function_calls": [
          "range"
        ],
        "nested_depth": 2,
        "branch_patterns": [
          "if_at_depth_0",
          "if_at_depth_1"
        ]
      },
      "data_dependency_graph": {
        "dependencies": {},
        "assignments": {}
      },
      "execution_paths": {
        "execution_paths": [
          [
            "function_fibonacci"
          ],
          [
            "function_fibonacci",
            "branch"
          ],
          [
            "function_fibonacci",
            "branch",
            "branch"
          ],
          [
            "function_fibonacci",
            "loop"
          ]
        ]
      },
      "function_contracts": {
        "fibonacci": {
          "name": "fibonacci",
          "args": [
            "n"
          ],
          "returns": null,
          "has_return": true
        }
      },
      "complexity_class": {
        "nested_loops": 1,
        "recursive_calls": 0,
        "estimated_complexity": "O(n)"
      },
      "side_effect_profile": {
        "has_print": false,
        "has_global_access": false,
        "has_file_io": false,
        "modifies_arguments": false,
        "is_pure": true
      },
      "termination_properties": {
        "has_base_case": true,
        "has_bounded_loops": true,
        "recursive_depth": 0
      },
      "algebraic_structure": {
        "commutative_ops": [
          "Add",
          "Add"
        ],
        "associative_ops": [
          "Add",
          "Add"
        ],
        "binary_operations": [
          "Add",
          "Add"
        ]
      },
      "numerical_behavior": {
        "uses_integers": true,
        "uses_floats": false,
        "has_arithmetic": true,
        "numeric_constants": [
          0,
          0,
          1,
          1,
          0,
          1,
          2,
          1
        ]
      },
      "logical_equivalence": {
        "boolean_ops": [],
        "comparisons": [
          "LtE",
          "Eq"
        ],
        "logical_patterns": []
      },
      "normalized_ast_structure": {
        "node_types": [
          "Module",
          "FunctionDef",
          "arguments",
          "arg",
          "If",
          "Compare",
          "Name",
          "Load",
          "LtE",
          "Constant",
          "Return",
          "Constant",
          "If",
          "Compare",
          "Name",
          "Load",
          "Eq",
          "Constant",
          "Return",
          "Constant",
          "Assign",
          "Tuple",
          "Name",
          "Store",
          "Name",
          "Store",
          "Store",
          "Tuple",
          "Constant",
          "Constant",
          "Load",
          "For",
          "Name",
          "Store",
          "Call",
          "Name",
          "Load",
          "Constant",
          "BinOp",
          "Name",
          "Load",
          "Add",
          "Constant",
          "Assign",
          "Tuple",
          "Name",
          "Store",
          "Name",
          "Store",
          "Store",
          "Tuple",
          "Name",
          "Load",
          "BinOp",
          "Name",
          "Load",
          "Add",
          "Name",
          "Load",
          "Load",
          "Return",
          "Name",
          "Load"
        ],
        "ast_depth": 7,
        "ast_hash": "9ab064e3ea8e7729ca5332b33258c4f7"
      },
      "operator_precedence": {
        "operator_sequence": [
          "Add",
          "Add"
        ],
        "precedence_levels": {
          "Add": 3
        }
      },
      "statement_ordering": {
        "statement_types": [
          "FunctionDef",
          "If",
          "Return",
          "If",
          "Return",
          "Assign",
          "For",
          "Assign",
          "Return"
        ],
        "statement_sequence": [
          "FunctionDef_0",
          "If_1",
          "Return_2",
          "If_3",
          "Return_4",
          "Assign_5",
          "For_6",
          "Assign_7",
          "Return_8"
        ],
        "control_flow_order": [
          "FunctionDef",
          "If",
          "If",
          "For"
        ]
      }
    },
    "created_timestamp": "2025-09-29T11:19:21.406978",
    "canon_version": "1.0"
  },
  "canon_created": true,
  "llm_results": [
    {
      "run_id": 1,
      "raw_output": "def fibonacci(n):\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    \n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b",
      "success": true,
      "enhanced_prompt": "Write a Python function called 'fibonacci' that takes an integer n and returns the nth Fibonacci number. Use iteration, not recursion.\n\nIMPORTANT: The function must be named 'fibonacci'.\n\nProvide only the Python code, no explanations or markdown."
    },
    {
      "run_id": 2,
      "raw_output": "def fibonacci(n):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b",
      "success": true,
      "enhanced_prompt": "Write a Python function called 'fibonacci' that takes an integer n and returns the nth Fibonacci number. Use iteration, not recursion.\n\nIMPORTANT: The function must be named 'fibonacci'.\n\nProvide only the Python code, no explanations or markdown."
    },
    {
      "run_id": 3,
      "raw_output": "def fibonacci(n):\n    if n < 0:\n        return None\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b",
      "success": true,
      "enhanced_prompt": "Write a Python function called 'fibonacci' that takes an integer n and returns the nth Fibonacci number. Use iteration, not recursion.\n\nIMPORTANT: The function must be named 'fibonacci'.\n\nProvide only the Python code, no explanations or markdown."
    },
    {
      "run_id": 4,
      "raw_output": "def fibonacci(n):\n    if n < 0:\n        raise ValueError(\"Input should be a non-negative integer.\")\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    \n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b",
      "success": true,
      "enhanced_prompt": "Write a Python function called 'fibonacci' that takes an integer n and returns the nth Fibonacci number. Use iteration, not recursion.\n\nIMPORTANT: The function must be named 'fibonacci'.\n\nProvide only the Python code, no explanations or markdown."
    },
    {
      "run_id": 5,
      "raw_output": "def fibonacci(n):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b",
      "success": true,
      "enhanced_prompt": "Write a Python function called 'fibonacci' that takes an integer n and returns the nth Fibonacci number. Use iteration, not recursion.\n\nIMPORTANT: The function must be named 'fibonacci'.\n\nProvide only the Python code, no explanations or markdown."
    },
    {
      "run_id": 6,
      "raw_output": "def fibonacci(n):\n    if n < 0:\n        raise ValueError(\"Input should be a non-negative integer.\")\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    \n    prev, curr = 0, 1\n    for _ in range(2, n + 1):\n        prev, curr = curr, prev + curr\n    return curr",
      "success": true,
      "enhanced_prompt": "Write a Python function called 'fibonacci' that takes an integer n and returns the nth Fibonacci number. Use iteration, not recursion.\n\nIMPORTANT: The function must be named 'fibonacci'.\n\nProvide only the Python code, no explanations or markdown."
    },
    {
      "run_id": 7,
      "raw_output": "def fibonacci(n):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    \n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b",
      "success": true,
      "enhanced_prompt": "Write a Python function called 'fibonacci' that takes an integer n and returns the nth Fibonacci number. Use iteration, not recursion.\n\nIMPORTANT: The function must be named 'fibonacci'.\n\nProvide only the Python code, no explanations or markdown."
    },
    {
      "run_id": 8,
      "raw_output": "def fibonacci(n):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b",
      "success": true,
      "enhanced_prompt": "Write a Python function called 'fibonacci' that takes an integer n and returns the nth Fibonacci number. Use iteration, not recursion.\n\nIMPORTANT: The function must be named 'fibonacci'.\n\nProvide only the Python code, no explanations or markdown."
    },
    {
      "run_id": 9,
      "raw_output": "def fibonacci(n):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    \n    fib_prev, fib_curr = 0, 1\n    for _ in range(2, n + 1):\n        fib_prev, fib_curr = fib_curr, fib_prev + fib_curr\n    return fib_curr",
      "success": true,
      "enhanced_prompt": "Write a Python function called 'fibonacci' that takes an integer n and returns the nth Fibonacci number. Use iteration, not recursion.\n\nIMPORTANT: The function must be named 'fibonacci'.\n\nProvide only the Python code, no explanations or markdown."
    },
    {
      "run_id": 10,
      "raw_output": "def fibonacci(n):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    \n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b",
      "success": true,
      "enhanced_prompt": "Write a Python function called 'fibonacci' that takes an integer n and returns the nth Fibonacci number. Use iteration, not recursion.\n\nIMPORTANT: The function must be named 'fibonacci'.\n\nProvide only the Python code, no explanations or markdown."
    }
  ],
  "raw_outputs": [
    "def fibonacci(n):\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    \n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b",
    "def fibonacci(n):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b",
    "def fibonacci(n):\n    if n < 0:\n        return None\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b",
    "def fibonacci(n):\n    if n < 0:\n        raise ValueError(\"Input should be a non-negative integer.\")\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    \n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b",
    "def fibonacci(n):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b",
    "def fibonacci(n):\n    if n < 0:\n        raise ValueError(\"Input should be a non-negative integer.\")\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    \n    prev, curr = 0, 1\n    for _ in range(2, n + 1):\n        prev, curr = curr, prev + curr\n    return curr",
    "def fibonacci(n):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    \n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b",
    "def fibonacci(n):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b",
    "def fibonacci(n):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    \n    fib_prev, fib_curr = 0, 1\n    for _ in range(2, n + 1):\n        fib_prev, fib_curr = fib_curr, fib_prev + fib_curr\n    return fib_curr",
    "def fibonacci(n):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    \n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b"
  ],
  "transformation_results": [
    {
      "run_id": 1,
      "original_code": "def fibonacci(n):\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    \n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b",
      "transformed_code": "def fibonacci(n):\n    if n <= 0:\n        return 0\n        return 0\n    elif n == 1:\n        return 1\n    \n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b",
      "transformation_needed": true,
      "transformation_success": false,
      "final_distance": 0.1474358974358974,
      "transformations_applied": [
        "ErrorHandlingAligner"
      ]
    },
    {
      "run_id": 2,
      "original_code": "def fibonacci(n):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b",
      "transformed_code": "def fibonacci(n):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b",
      "transformation_needed": false,
      "final_distance": 0.0
    },
    {
      "run_id": 3,
      "original_code": "def fibonacci(n):\n    if n < 0:\n        return None\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b",
      "transformed_code": "def fibonacci(n):\n    if n <= 0:\n        return 0\n        return None\n    elif n == 1:\n        return 1\n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b",
      "transformation_needed": true,
      "transformation_success": false,
      "final_distance": 0.1282051282051282,
      "transformations_applied": [
        "ErrorHandlingAligner"
      ]
    },
    {
      "run_id": 4,
      "original_code": "def fibonacci(n):\n    if n < 0:\n        raise ValueError(\"Input should be a non-negative integer.\")\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    \n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b",
      "transformed_code": "def fibonacci(n):\n    if n <= 0:\n        return 0\n        return 0\n    elif n == 1:\n        return 1\n    \n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b",
      "transformation_needed": true,
      "transformation_success": false,
      "final_distance": 0.1474358974358974,
      "transformations_applied": [
        "ErrorHandlingAligner"
      ]
    },
    {
      "run_id": 5,
      "original_code": "def fibonacci(n):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b",
      "transformed_code": "def fibonacci(n):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b",
      "transformation_needed": true,
      "transformation_success": true,
      "final_distance": 0.0,
      "transformations_applied": [
        "RedundantClauseRemover"
      ]
    },
    {
      "run_id": 6,
      "original_code": "def fibonacci(n):\n    if n < 0:\n        raise ValueError(\"Input should be a non-negative integer.\")\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    \n    prev, curr = 0, 1\n    for _ in range(2, n + 1):\n        prev, curr = curr, prev + curr\n    return curr",
      "transformed_code": "def fibonacci(n):\n    if n <= 0:\n        return 0\n        return 0\n    elif n == 1:\n        return 1\n    \n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b",
      "transformation_needed": true,
      "transformation_success": false,
      "final_distance": 0.1474358974358974,
      "transformations_applied": [
        "ErrorHandlingAligner",
        "AlgorithmOptimizer"
      ]
    },
    {
      "run_id": 7,
      "original_code": "def fibonacci(n):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    \n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b",
      "transformed_code": "def fibonacci(n):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    \n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b",
      "transformation_needed": false,
      "final_distance": 0.0
    },
    {
      "run_id": 8,
      "original_code": "def fibonacci(n):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b",
      "transformed_code": "def fibonacci(n):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b",
      "transformation_needed": false,
      "final_distance": 0.0
    },
    {
      "run_id": 9,
      "original_code": "def fibonacci(n):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    \n    fib_prev, fib_curr = 0, 1\n    for _ in range(2, n + 1):\n        fib_prev, fib_curr = fib_curr, fib_prev + fib_curr\n    return fib_curr",
      "transformed_code": "def fibonacci(n):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    \n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b",
      "transformation_needed": true,
      "transformation_success": true,
      "final_distance": 0.0,
      "transformations_applied": [
        "AlgorithmOptimizer"
      ]
    },
    {
      "run_id": 10,
      "original_code": "def fibonacci(n):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    \n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b",
      "transformed_code": "def fibonacci(n):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    \n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b",
      "transformation_needed": false,
      "final_distance": 0.0
    }
  ],
  "metrics": {
    "R_raw": 0.2,
    "R_behavioral": 1.0,
    "R_structural": 0.4,
    "R_canon": 0.4,
    "total_runs": 10,
    "raw_stats": {
      "unique_outputs": 8,
      "most_common_count": 2,
      "distribution": {
        "def fibonacci(n):\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    \n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b": 1,
        "def fibonacci(n):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b": 2,
        "def fibonacci(n):\n    if n < 0:\n        return None\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b": 1,
        "def fibonacci(n):\n    if n < 0:\n        raise ValueError(\"Input should be a non-negative integer.\")\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    \n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b": 1,
        "def fibonacci(n):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b": 1,
        "def fibonacci(n):\n    if n < 0:\n        raise ValueError(\"Input should be a non-negative integer.\")\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    \n    prev, curr = 0, 1\n    for _ in range(2, n + 1):\n        prev, curr = curr, prev + curr\n    return curr": 1,
        "def fibonacci(n):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    \n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b": 2,
        "def fibonacci(n):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    \n    fib_prev, fib_curr = 0, 1\n    for _ in range(2, n + 1):\n        fib_prev, fib_curr = fib_curr, fib_prev + fib_curr\n    return fib_curr": 1
      },
      "entropy": 2.9219280948873623
    },
    "behavioral_stats": {
      "unique_behaviors": 1,
      "oracle_results": [
        {
          "passed": true,
          "pass_rate": 1.0,
          "passed_tests": 10,
          "total_tests": 10,
          "test_results": [
            {
              "description": "Base case: F(0)",
              "input": 0,
              "expected": 0,
              "actual": 0,
              "passed": true
            },
            {
              "description": "Base case: F(1)",
              "input": 1,
              "expected": 1,
              "actual": 1,
              "passed": true
            },
            {
              "description": "F(2)",
              "input": 2,
              "expected": 1,
              "actual": 1,
              "passed": true
            },
            {
              "description": "F(5)",
              "input": 5,
              "expected": 5,
              "actual": 5,
              "passed": true
            },
            {
              "description": "F(10)",
              "input": 10,
              "expected": 55,
              "actual": 55,
              "passed": true
            },
            {
              "description": "Fibonacci property: F(3) = F(2) + F(1)",
              "input": 3,
              "expected": 2,
              "actual": 2,
              "passed": true
            },
            {
              "description": "Fibonacci property: F(4) = F(3) + F(2)",
              "input": 4,
              "expected": 3,
              "actual": 3,
              "passed": true
            },
            {
              "description": "Fibonacci property: F(5) = F(4) + F(3)",
              "input": 5,
              "expected": 5,
              "actual": 5,
              "passed": true
            },
            {
              "description": "Fibonacci property: F(6) = F(5) + F(4)",
              "input": 6,
              "expected": 8,
              "actual": 8,
              "passed": true
            },
            {
              "description": "Fibonacci property: F(7) = F(6) + F(5)",
              "input": 7,
              "expected": 13,
              "actual": 13,
              "passed": true
            }
          ]
        },
        {
          "passed": true,
          "pass_rate": 1.0,
          "passed_tests": 10,
          "total_tests": 10,
          "test_results": [
            {
              "description": "Base case: F(0)",
              "input": 0,
              "expected": 0,
              "actual": 0,
              "passed": true
            },
            {
              "description": "Base case: F(1)",
              "input": 1,
              "expected": 1,
              "actual": 1,
              "passed": true
            },
            {
              "description": "F(2)",
              "input": 2,
              "expected": 1,
              "actual": 1,
              "passed": true
            },
            {
              "description": "F(5)",
              "input": 5,
              "expected": 5,
              "actual": 5,
              "passed": true
            },
            {
              "description": "F(10)",
              "input": 10,
              "expected": 55,
              "actual": 55,
              "passed": true
            },
            {
              "description": "Fibonacci property: F(3) = F(2) + F(1)",
              "input": 3,
              "expected": 2,
              "actual": 2,
              "passed": true
            },
            {
              "description": "Fibonacci property: F(4) = F(3) + F(2)",
              "input": 4,
              "expected": 3,
              "actual": 3,
              "passed": true
            },
            {
              "description": "Fibonacci property: F(5) = F(4) + F(3)",
              "input": 5,
              "expected": 5,
              "actual": 5,
              "passed": true
            },
            {
              "description": "Fibonacci property: F(6) = F(5) + F(4)",
              "input": 6,
              "expected": 8,
              "actual": 8,
              "passed": true
            },
            {
              "description": "Fibonacci property: F(7) = F(6) + F(5)",
              "input": 7,
              "expected": 13,
              "actual": 13,
              "passed": true
            }
          ]
        },
        {
          "passed": true,
          "pass_rate": 1.0,
          "passed_tests": 10,
          "total_tests": 10,
          "test_results": [
            {
              "description": "Base case: F(0)",
              "input": 0,
              "expected": 0,
              "actual": 0,
              "passed": true
            },
            {
              "description": "Base case: F(1)",
              "input": 1,
              "expected": 1,
              "actual": 1,
              "passed": true
            },
            {
              "description": "F(2)",
              "input": 2,
              "expected": 1,
              "actual": 1,
              "passed": true
            },
            {
              "description": "F(5)",
              "input": 5,
              "expected": 5,
              "actual": 5,
              "passed": true
            },
            {
              "description": "F(10)",
              "input": 10,
              "expected": 55,
              "actual": 55,
              "passed": true
            },
            {
              "description": "Fibonacci property: F(3) = F(2) + F(1)",
              "input": 3,
              "expected": 2,
              "actual": 2,
              "passed": true
            },
            {
              "description": "Fibonacci property: F(4) = F(3) + F(2)",
              "input": 4,
              "expected": 3,
              "actual": 3,
              "passed": true
            },
            {
              "description": "Fibonacci property: F(5) = F(4) + F(3)",
              "input": 5,
              "expected": 5,
              "actual": 5,
              "passed": true
            },
            {
              "description": "Fibonacci property: F(6) = F(5) + F(4)",
              "input": 6,
              "expected": 8,
              "actual": 8,
              "passed": true
            },
            {
              "description": "Fibonacci property: F(7) = F(6) + F(5)",
              "input": 7,
              "expected": 13,
              "actual": 13,
              "passed": true
            }
          ]
        },
        {
          "passed": true,
          "pass_rate": 1.0,
          "passed_tests": 10,
          "total_tests": 10,
          "test_results": [
            {
              "description": "Base case: F(0)",
              "input": 0,
              "expected": 0,
              "actual": 0,
              "passed": true
            },
            {
              "description": "Base case: F(1)",
              "input": 1,
              "expected": 1,
              "actual": 1,
              "passed": true
            },
            {
              "description": "F(2)",
              "input": 2,
              "expected": 1,
              "actual": 1,
              "passed": true
            },
            {
              "description": "F(5)",
              "input": 5,
              "expected": 5,
              "actual": 5,
              "passed": true
            },
            {
              "description": "F(10)",
              "input": 10,
              "expected": 55,
              "actual": 55,
              "passed": true
            },
            {
              "description": "Fibonacci property: F(3) = F(2) + F(1)",
              "input": 3,
              "expected": 2,
              "actual": 2,
              "passed": true
            },
            {
              "description": "Fibonacci property: F(4) = F(3) + F(2)",
              "input": 4,
              "expected": 3,
              "actual": 3,
              "passed": true
            },
            {
              "description": "Fibonacci property: F(5) = F(4) + F(3)",
              "input": 5,
              "expected": 5,
              "actual": 5,
              "passed": true
            },
            {
              "description": "Fibonacci property: F(6) = F(5) + F(4)",
              "input": 6,
              "expected": 8,
              "actual": 8,
              "passed": true
            },
            {
              "description": "Fibonacci property: F(7) = F(6) + F(5)",
              "input": 7,
              "expected": 13,
              "actual": 13,
              "passed": true
            }
          ]
        },
        {
          "passed": true,
          "pass_rate": 1.0,
          "passed_tests": 10,
          "total_tests": 10,
          "test_results": [
            {
              "description": "Base case: F(0)",
              "input": 0,
              "expected": 0,
              "actual": 0,
              "passed": true
            },
            {
              "description": "Base case: F(1)",
              "input": 1,
              "expected": 1,
              "actual": 1,
              "passed": true
            },
            {
              "description": "F(2)",
              "input": 2,
              "expected": 1,
              "actual": 1,
              "passed": true
            },
            {
              "description": "F(5)",
              "input": 5,
              "expected": 5,
              "actual": 5,
              "passed": true
            },
            {
              "description": "F(10)",
              "input": 10,
              "expected": 55,
              "actual": 55,
              "passed": true
            },
            {
              "description": "Fibonacci property: F(3) = F(2) + F(1)",
              "input": 3,
              "expected": 2,
              "actual": 2,
              "passed": true
            },
            {
              "description": "Fibonacci property: F(4) = F(3) + F(2)",
              "input": 4,
              "expected": 3,
              "actual": 3,
              "passed": true
            },
            {
              "description": "Fibonacci property: F(5) = F(4) + F(3)",
              "input": 5,
              "expected": 5,
              "actual": 5,
              "passed": true
            },
            {
              "description": "Fibonacci property: F(6) = F(5) + F(4)",
              "input": 6,
              "expected": 8,
              "actual": 8,
              "passed": true
            },
            {
              "description": "Fibonacci property: F(7) = F(6) + F(5)",
              "input": 7,
              "expected": 13,
              "actual": 13,
              "passed": true
            }
          ]
        },
        {
          "passed": true,
          "pass_rate": 1.0,
          "passed_tests": 10,
          "total_tests": 10,
          "test_results": [
            {
              "description": "Base case: F(0)",
              "input": 0,
              "expected": 0,
              "actual": 0,
              "passed": true
            },
            {
              "description": "Base case: F(1)",
              "input": 1,
              "expected": 1,
              "actual": 1,
              "passed": true
            },
            {
              "description": "F(2)",
              "input": 2,
              "expected": 1,
              "actual": 1,
              "passed": true
            },
            {
              "description": "F(5)",
              "input": 5,
              "expected": 5,
              "actual": 5,
              "passed": true
            },
            {
              "description": "F(10)",
              "input": 10,
              "expected": 55,
              "actual": 55,
              "passed": true
            },
            {
              "description": "Fibonacci property: F(3) = F(2) + F(1)",
              "input": 3,
              "expected": 2,
              "actual": 2,
              "passed": true
            },
            {
              "description": "Fibonacci property: F(4) = F(3) + F(2)",
              "input": 4,
              "expected": 3,
              "actual": 3,
              "passed": true
            },
            {
              "description": "Fibonacci property: F(5) = F(4) + F(3)",
              "input": 5,
              "expected": 5,
              "actual": 5,
              "passed": true
            },
            {
              "description": "Fibonacci property: F(6) = F(5) + F(4)",
              "input": 6,
              "expected": 8,
              "actual": 8,
              "passed": true
            },
            {
              "description": "Fibonacci property: F(7) = F(6) + F(5)",
              "input": 7,
              "expected": 13,
              "actual": 13,
              "passed": true
            }
          ]
        },
        {
          "passed": true,
          "pass_rate": 1.0,
          "passed_tests": 10,
          "total_tests": 10,
          "test_results": [
            {
              "description": "Base case: F(0)",
              "input": 0,
              "expected": 0,
              "actual": 0,
              "passed": true
            },
            {
              "description": "Base case: F(1)",
              "input": 1,
              "expected": 1,
              "actual": 1,
              "passed": true
            },
            {
              "description": "F(2)",
              "input": 2,
              "expected": 1,
              "actual": 1,
              "passed": true
            },
            {
              "description": "F(5)",
              "input": 5,
              "expected": 5,
              "actual": 5,
              "passed": true
            },
            {
              "description": "F(10)",
              "input": 10,
              "expected": 55,
              "actual": 55,
              "passed": true
            },
            {
              "description": "Fibonacci property: F(3) = F(2) + F(1)",
              "input": 3,
              "expected": 2,
              "actual": 2,
              "passed": true
            },
            {
              "description": "Fibonacci property: F(4) = F(3) + F(2)",
              "input": 4,
              "expected": 3,
              "actual": 3,
              "passed": true
            },
            {
              "description": "Fibonacci property: F(5) = F(4) + F(3)",
              "input": 5,
              "expected": 5,
              "actual": 5,
              "passed": true
            },
            {
              "description": "Fibonacci property: F(6) = F(5) + F(4)",
              "input": 6,
              "expected": 8,
              "actual": 8,
              "passed": true
            },
            {
              "description": "Fibonacci property: F(7) = F(6) + F(5)",
              "input": 7,
              "expected": 13,
              "actual": 13,
              "passed": true
            }
          ]
        },
        {
          "passed": true,
          "pass_rate": 1.0,
          "passed_tests": 10,
          "total_tests": 10,
          "test_results": [
            {
              "description": "Base case: F(0)",
              "input": 0,
              "expected": 0,
              "actual": 0,
              "passed": true
            },
            {
              "description": "Base case: F(1)",
              "input": 1,
              "expected": 1,
              "actual": 1,
              "passed": true
            },
            {
              "description": "F(2)",
              "input": 2,
              "expected": 1,
              "actual": 1,
              "passed": true
            },
            {
              "description": "F(5)",
              "input": 5,
              "expected": 5,
              "actual": 5,
              "passed": true
            },
            {
              "description": "F(10)",
              "input": 10,
              "expected": 55,
              "actual": 55,
              "passed": true
            },
            {
              "description": "Fibonacci property: F(3) = F(2) + F(1)",
              "input": 3,
              "expected": 2,
              "actual": 2,
              "passed": true
            },
            {
              "description": "Fibonacci property: F(4) = F(3) + F(2)",
              "input": 4,
              "expected": 3,
              "actual": 3,
              "passed": true
            },
            {
              "description": "Fibonacci property: F(5) = F(4) + F(3)",
              "input": 5,
              "expected": 5,
              "actual": 5,
              "passed": true
            },
            {
              "description": "Fibonacci property: F(6) = F(5) + F(4)",
              "input": 6,
              "expected": 8,
              "actual": 8,
              "passed": true
            },
            {
              "description": "Fibonacci property: F(7) = F(6) + F(5)",
              "input": 7,
              "expected": 13,
              "actual": 13,
              "passed": true
            }
          ]
        },
        {
          "passed": true,
          "pass_rate": 1.0,
          "passed_tests": 10,
          "total_tests": 10,
          "test_results": [
            {
              "description": "Base case: F(0)",
              "input": 0,
              "expected": 0,
              "actual": 0,
              "passed": true
            },
            {
              "description": "Base case: F(1)",
              "input": 1,
              "expected": 1,
              "actual": 1,
              "passed": true
            },
            {
              "description": "F(2)",
              "input": 2,
              "expected": 1,
              "actual": 1,
              "passed": true
            },
            {
              "description": "F(5)",
              "input": 5,
              "expected": 5,
              "actual": 5,
              "passed": true
            },
            {
              "description": "F(10)",
              "input": 10,
              "expected": 55,
              "actual": 55,
              "passed": true
            },
            {
              "description": "Fibonacci property: F(3) = F(2) + F(1)",
              "input": 3,
              "expected": 2,
              "actual": 2,
              "passed": true
            },
            {
              "description": "Fibonacci property: F(4) = F(3) + F(2)",
              "input": 4,
              "expected": 3,
              "actual": 3,
              "passed": true
            },
            {
              "description": "Fibonacci property: F(5) = F(4) + F(3)",
              "input": 5,
              "expected": 5,
              "actual": 5,
              "passed": true
            },
            {
              "description": "Fibonacci property: F(6) = F(5) + F(4)",
              "input": 6,
              "expected": 8,
              "actual": 8,
              "passed": true
            },
            {
              "description": "Fibonacci property: F(7) = F(6) + F(5)",
              "input": 7,
              "expected": 13,
              "actual": 13,
              "passed": true
            }
          ]
        },
        {
          "passed": true,
          "pass_rate": 1.0,
          "passed_tests": 10,
          "total_tests": 10,
          "test_results": [
            {
              "description": "Base case: F(0)",
              "input": 0,
              "expected": 0,
              "actual": 0,
              "passed": true
            },
            {
              "description": "Base case: F(1)",
              "input": 1,
              "expected": 1,
              "actual": 1,
              "passed": true
            },
            {
              "description": "F(2)",
              "input": 2,
              "expected": 1,
              "actual": 1,
              "passed": true
            },
            {
              "description": "F(5)",
              "input": 5,
              "expected": 5,
              "actual": 5,
              "passed": true
            },
            {
              "description": "F(10)",
              "input": 10,
              "expected": 55,
              "actual": 55,
              "passed": true
            },
            {
              "description": "Fibonacci property: F(3) = F(2) + F(1)",
              "input": 3,
              "expected": 2,
              "actual": 2,
              "passed": true
            },
            {
              "description": "Fibonacci property: F(4) = F(3) + F(2)",
              "input": 4,
              "expected": 3,
              "actual": 3,
              "passed": true
            },
            {
              "description": "Fibonacci property: F(5) = F(4) + F(3)",
              "input": 5,
              "expected": 5,
              "actual": 5,
              "passed": true
            },
            {
              "description": "Fibonacci property: F(6) = F(5) + F(4)",
              "input": 6,
              "expected": 8,
              "actual": 8,
              "passed": true
            },
            {
              "description": "Fibonacci property: F(7) = F(6) + F(5)",
              "input": 7,
              "expected": 13,
              "actual": 13,
              "passed": true
            }
          ]
        }
      ],
      "behavioral_groups": {
        "PPPPPPPPPP": [
          0,
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9
        ]
      },
      "pass_rate": 1.0
    },
    "structural_stats": {
      "unique_structures": 7,
      "property_results": [
        {
          "control_flow_signature": {
            "if_statements": 3,
            "for_loops": 1,
            "while_loops": 0,
            "function_calls": [
              "ValueError",
              "range"
            ],
            "nested_depth": 3,
            "branch_patterns": [
              "if_at_depth_0",
              "if_at_depth_1",
              "if_at_depth_2"
            ]
          },
          "data_dependency_graph": {
            "dependencies": {},
            "assignments": {}
          },
          "execution_paths": {
            "execution_paths": [
              [
                "function_fibonacci"
              ],
              [
                "function_fibonacci",
                "branch"
              ],
              [
                "function_fibonacci",
                "branch",
                "branch"
              ],
              [
                "function_fibonacci",
                "branch",
                "branch",
                "branch"
              ],
              [
                "function_fibonacci",
                "loop"
              ]
            ]
          },
          "function_contracts": {
            "fibonacci": {
              "name": "fibonacci",
              "args": [
                "n"
              ],
              "returns": null,
              "has_return": true
            }
          },
          "complexity_class": {
            "nested_loops": 1,
            "recursive_calls": 0,
            "estimated_complexity": "O(n)"
          },
          "side_effect_profile": {
            "has_print": false,
            "has_global_access": false,
            "has_file_io": false,
            "modifies_arguments": false,
            "is_pure": true
          },
          "termination_properties": {
            "has_base_case": true,
            "has_bounded_loops": true,
            "recursive_depth": 0
          },
          "algebraic_structure": {
            "commutative_ops": [
              "Add",
              "Add"
            ],
            "associative_ops": [
              "Add",
              "Add"
            ],
            "binary_operations": [
              "Add",
              "Add"
            ]
          },
          "numerical_behavior": {
            "uses_integers": true,
            "uses_floats": false,
            "has_arithmetic": true,
            "numeric_constants": [
              0,
              0,
              0,
              1,
              1,
              0,
              1,
              2,
              1
            ]
          },
          "logical_equivalence": {
            "boolean_ops": [],
            "comparisons": [
              "Lt",
              "Eq",
              "Eq"
            ],
            "logical_patterns": []
          },
          "normalized_ast_structure": {
            "node_types": [
              "Module",
              "FunctionDef",
              "arguments",
              "arg",
              "If",
              "Compare",
              "Name",
              "Load",
              "Lt",
              "Constant",
              "Raise",
              "Call",
              "Name",
              "Load",
              "Constant",
              "If",
              "Compare",
              "Name",
              "Load",
              "Eq",
              "Constant",
              "Return",
              "Constant",
              "If",
              "Compare",
              "Name",
              "Load",
              "Eq",
              "Constant",
              "Return",
              "Constant",
              "Assign",
              "Tuple",
              "Name",
              "Store",
              "Name",
              "Store",
              "Store",
              "Tuple",
              "Constant",
              "Constant",
              "Load",
              "For",
              "Name",
              "Store",
              "Call",
              "Name",
              "Load",
              "Constant",
              "BinOp",
              "Name",
              "Load",
              "Add",
              "Constant",
              "Assign",
              "Tuple",
              "Name",
              "Store",
              "Name",
              "Store",
              "Store",
              "Tuple",
              "Name",
              "Load",
              "BinOp",
              "Name",
              "Load",
              "Add",
              "Name",
              "Load",
              "Load",
              "Return",
              "Name",
              "Load"
            ],
            "ast_depth": 7,
            "ast_hash": "6a82e0331156e414539330e7db519eff"
          },
          "operator_precedence": {
            "operator_sequence": [
              "Add",
              "Add"
            ],
            "precedence_levels": {
              "Add": 3
            }
          },
          "statement_ordering": {
            "statement_types": [
              "FunctionDef",
              "If",
              "Raise",
              "If",
              "Return",
              "If",
              "Return",
              "Assign",
              "For",
              "Assign",
              "Return"
            ],
            "statement_sequence": [
              "FunctionDef_0",
              "If_1",
              "Raise_2",
              "If_3",
              "Return_4",
              "If_5",
              "Return_6",
              "Assign_7",
              "For_8",
              "Assign_9",
              "Return_10"
            ],
            "control_flow_order": [
              "FunctionDef",
              "If",
              "If",
              "If",
              "For"
            ]
          }
        },
        {
          "control_flow_signature": {
            "if_statements": 2,
            "for_loops": 1,
            "while_loops": 0,
            "function_calls": [
              "range"
            ],
            "nested_depth": 2,
            "branch_patterns": [
              "if_at_depth_0",
              "if_at_depth_1"
            ]
          },
          "data_dependency_graph": {
            "dependencies": {},
            "assignments": {}
          },
          "execution_paths": {
            "execution_paths": [
              [
                "function_fibonacci"
              ],
              [
                "function_fibonacci",
                "branch"
              ],
              [
                "function_fibonacci",
                "branch",
                "branch"
              ],
              [
                "function_fibonacci",
                "loop"
              ]
            ]
          },
          "function_contracts": {
            "fibonacci": {
              "name": "fibonacci",
              "args": [
                "n"
              ],
              "returns": null,
              "has_return": true
            }
          },
          "complexity_class": {
            "nested_loops": 1,
            "recursive_calls": 0,
            "estimated_complexity": "O(n)"
          },
          "side_effect_profile": {
            "has_print": false,
            "has_global_access": false,
            "has_file_io": false,
            "modifies_arguments": false,
            "is_pure": true
          },
          "termination_properties": {
            "has_base_case": true,
            "has_bounded_loops": true,
            "recursive_depth": 0
          },
          "algebraic_structure": {
            "commutative_ops": [
              "Add",
              "Add"
            ],
            "associative_ops": [
              "Add",
              "Add"
            ],
            "binary_operations": [
              "Add",
              "Add"
            ]
          },
          "numerical_behavior": {
            "uses_integers": true,
            "uses_floats": false,
            "has_arithmetic": true,
            "numeric_constants": [
              0,
              0,
              1,
              1,
              0,
              1,
              2,
              1
            ]
          },
          "logical_equivalence": {
            "boolean_ops": [],
            "comparisons": [
              "LtE",
              "Eq"
            ],
            "logical_patterns": []
          },
          "normalized_ast_structure": {
            "node_types": [
              "Module",
              "FunctionDef",
              "arguments",
              "arg",
              "If",
              "Compare",
              "Name",
              "Load",
              "LtE",
              "Constant",
              "Return",
              "Constant",
              "If",
              "Compare",
              "Name",
              "Load",
              "Eq",
              "Constant",
              "Return",
              "Constant",
              "Assign",
              "Tuple",
              "Name",
              "Store",
              "Name",
              "Store",
              "Store",
              "Tuple",
              "Constant",
              "Constant",
              "Load",
              "For",
              "Name",
              "Store",
              "Call",
              "Name",
              "Load",
              "Constant",
              "BinOp",
              "Name",
              "Load",
              "Add",
              "Constant",
              "Assign",
              "Tuple",
              "Name",
              "Store",
              "Name",
              "Store",
              "Store",
              "Tuple",
              "Name",
              "Load",
              "BinOp",
              "Name",
              "Load",
              "Add",
              "Name",
              "Load",
              "Load",
              "Return",
              "Name",
              "Load"
            ],
            "ast_depth": 7,
            "ast_hash": "9ab064e3ea8e7729ca5332b33258c4f7"
          },
          "operator_precedence": {
            "operator_sequence": [
              "Add",
              "Add"
            ],
            "precedence_levels": {
              "Add": 3
            }
          },
          "statement_ordering": {
            "statement_types": [
              "FunctionDef",
              "If",
              "Return",
              "If",
              "Return",
              "Assign",
              "For",
              "Assign",
              "Return"
            ],
            "statement_sequence": [
              "FunctionDef_0",
              "If_1",
              "Return_2",
              "If_3",
              "Return_4",
              "Assign_5",
              "For_6",
              "Assign_7",
              "Return_8"
            ],
            "control_flow_order": [
              "FunctionDef",
              "If",
              "If",
              "For"
            ]
          }
        },
        {
          "control_flow_signature": {
            "if_statements": 3,
            "for_loops": 1,
            "while_loops": 0,
            "function_calls": [
              "range"
            ],
            "nested_depth": 3,
            "branch_patterns": [
              "if_at_depth_0",
              "if_at_depth_1",
              "if_at_depth_2"
            ]
          },
          "data_dependency_graph": {
            "dependencies": {},
            "assignments": {}
          },
          "execution_paths": {
            "execution_paths": [
              [
                "function_fibonacci"
              ],
              [
                "function_fibonacci",
                "branch"
              ],
              [
                "function_fibonacci",
                "branch",
                "branch"
              ],
              [
                "function_fibonacci",
                "branch",
                "branch",
                "branch"
              ],
              [
                "function_fibonacci",
                "loop"
              ]
            ]
          },
          "function_contracts": {
            "fibonacci": {
              "name": "fibonacci",
              "args": [
                "n"
              ],
              "returns": null,
              "has_return": true
            }
          },
          "complexity_class": {
            "nested_loops": 1,
            "recursive_calls": 0,
            "estimated_complexity": "O(n)"
          },
          "side_effect_profile": {
            "has_print": false,
            "has_global_access": false,
            "has_file_io": false,
            "modifies_arguments": false,
            "is_pure": true
          },
          "termination_properties": {
            "has_base_case": true,
            "has_bounded_loops": true,
            "recursive_depth": 0
          },
          "algebraic_structure": {
            "commutative_ops": [
              "Add",
              "Add"
            ],
            "associative_ops": [
              "Add",
              "Add"
            ],
            "binary_operations": [
              "Add",
              "Add"
            ]
          },
          "numerical_behavior": {
            "uses_integers": true,
            "uses_floats": false,
            "has_arithmetic": true,
            "numeric_constants": [
              0,
              0,
              0,
              1,
              1,
              0,
              1,
              2,
              1
            ]
          },
          "logical_equivalence": {
            "boolean_ops": [],
            "comparisons": [
              "Lt",
              "Eq",
              "Eq"
            ],
            "logical_patterns": []
          },
          "normalized_ast_structure": {
            "node_types": [
              "Module",
              "FunctionDef",
              "arguments",
              "arg",
              "If",
              "Compare",
              "Name",
              "Load",
              "Lt",
              "Constant",
              "Return",
              "Constant",
              "If",
              "Compare",
              "Name",
              "Load",
              "Eq",
              "Constant",
              "Return",
              "Constant",
              "If",
              "Compare",
              "Name",
              "Load",
              "Eq",
              "Constant",
              "Return",
              "Constant",
              "Assign",
              "Tuple",
              "Name",
              "Store",
              "Name",
              "Store",
              "Store",
              "Tuple",
              "Constant",
              "Constant",
              "Load",
              "For",
              "Name",
              "Store",
              "Call",
              "Name",
              "Load",
              "Constant",
              "BinOp",
              "Name",
              "Load",
              "Add",
              "Constant",
              "Assign",
              "Tuple",
              "Name",
              "Store",
              "Name",
              "Store",
              "Store",
              "Tuple",
              "Name",
              "Load",
              "BinOp",
              "Name",
              "Load",
              "Add",
              "Name",
              "Load",
              "Load",
              "Return",
              "Name",
              "Load"
            ],
            "ast_depth": 7,
            "ast_hash": "13b9defae50bbf4787aca8da33674dde"
          },
          "operator_precedence": {
            "operator_sequence": [
              "Add",
              "Add"
            ],
            "precedence_levels": {
              "Add": 3
            }
          },
          "statement_ordering": {
            "statement_types": [
              "FunctionDef",
              "If",
              "Return",
              "If",
              "Return",
              "If",
              "Return",
              "Assign",
              "For",
              "Assign",
              "Return"
            ],
            "statement_sequence": [
              "FunctionDef_0",
              "If_1",
              "Return_2",
              "If_3",
              "Return_4",
              "If_5",
              "Return_6",
              "Assign_7",
              "For_8",
              "Assign_9",
              "Return_10"
            ],
            "control_flow_order": [
              "FunctionDef",
              "If",
              "If",
              "If",
              "For"
            ]
          }
        },
        {
          "control_flow_signature": {
            "if_statements": 3,
            "for_loops": 1,
            "while_loops": 0,
            "function_calls": [
              "ValueError",
              "range"
            ],
            "nested_depth": 3,
            "branch_patterns": [
              "if_at_depth_0",
              "if_at_depth_1",
              "if_at_depth_2"
            ]
          },
          "data_dependency_graph": {
            "dependencies": {},
            "assignments": {}
          },
          "execution_paths": {
            "execution_paths": [
              [
                "function_fibonacci"
              ],
              [
                "function_fibonacci",
                "branch"
              ],
              [
                "function_fibonacci",
                "branch",
                "branch"
              ],
              [
                "function_fibonacci",
                "branch",
                "branch",
                "branch"
              ],
              [
                "function_fibonacci",
                "loop"
              ]
            ]
          },
          "function_contracts": {
            "fibonacci": {
              "name": "fibonacci",
              "args": [
                "n"
              ],
              "returns": null,
              "has_return": true
            }
          },
          "complexity_class": {
            "nested_loops": 1,
            "recursive_calls": 0,
            "estimated_complexity": "O(n)"
          },
          "side_effect_profile": {
            "has_print": false,
            "has_global_access": false,
            "has_file_io": false,
            "modifies_arguments": false,
            "is_pure": true
          },
          "termination_properties": {
            "has_base_case": true,
            "has_bounded_loops": true,
            "recursive_depth": 0
          },
          "algebraic_structure": {
            "commutative_ops": [
              "Add",
              "Add"
            ],
            "associative_ops": [
              "Add",
              "Add"
            ],
            "binary_operations": [
              "Add",
              "Add"
            ]
          },
          "numerical_behavior": {
            "uses_integers": true,
            "uses_floats": false,
            "has_arithmetic": true,
            "numeric_constants": [
              0,
              0,
              0,
              1,
              1,
              0,
              1,
              2,
              1
            ]
          },
          "logical_equivalence": {
            "boolean_ops": [],
            "comparisons": [
              "Lt",
              "Eq",
              "Eq"
            ],
            "logical_patterns": []
          },
          "normalized_ast_structure": {
            "node_types": [
              "Module",
              "FunctionDef",
              "arguments",
              "arg",
              "If",
              "Compare",
              "Name",
              "Load",
              "Lt",
              "Constant",
              "Raise",
              "Call",
              "Name",
              "Load",
              "Constant",
              "If",
              "Compare",
              "Name",
              "Load",
              "Eq",
              "Constant",
              "Return",
              "Constant",
              "If",
              "Compare",
              "Name",
              "Load",
              "Eq",
              "Constant",
              "Return",
              "Constant",
              "Assign",
              "Tuple",
              "Name",
              "Store",
              "Name",
              "Store",
              "Store",
              "Tuple",
              "Constant",
              "Constant",
              "Load",
              "For",
              "Name",
              "Store",
              "Call",
              "Name",
              "Load",
              "Constant",
              "BinOp",
              "Name",
              "Load",
              "Add",
              "Constant",
              "Assign",
              "Tuple",
              "Name",
              "Store",
              "Name",
              "Store",
              "Store",
              "Tuple",
              "Name",
              "Load",
              "BinOp",
              "Name",
              "Load",
              "Add",
              "Name",
              "Load",
              "Load",
              "Return",
              "Name",
              "Load"
            ],
            "ast_depth": 7,
            "ast_hash": "ca0bf87836f5554b56e166bc09ff3789"
          },
          "operator_precedence": {
            "operator_sequence": [
              "Add",
              "Add"
            ],
            "precedence_levels": {
              "Add": 3
            }
          },
          "statement_ordering": {
            "statement_types": [
              "FunctionDef",
              "If",
              "Raise",
              "If",
              "Return",
              "If",
              "Return",
              "Assign",
              "For",
              "Assign",
              "Return"
            ],
            "statement_sequence": [
              "FunctionDef_0",
              "If_1",
              "Raise_2",
              "If_3",
              "Return_4",
              "If_5",
              "Return_6",
              "Assign_7",
              "For_8",
              "Assign_9",
              "Return_10"
            ],
            "control_flow_order": [
              "FunctionDef",
              "If",
              "If",
              "If",
              "For"
            ]
          }
        },
        {
          "control_flow_signature": {
            "if_statements": 2,
            "for_loops": 1,
            "while_loops": 0,
            "function_calls": [
              "range"
            ],
            "nested_depth": 3,
            "branch_patterns": [
              "if_at_depth_0",
              "if_at_depth_1"
            ]
          },
          "data_dependency_graph": {
            "dependencies": {},
            "assignments": {}
          },
          "execution_paths": {
            "execution_paths": [
              [
                "function_fibonacci"
              ],
              [
                "function_fibonacci",
                "branch"
              ],
              [
                "function_fibonacci",
                "branch",
                "branch"
              ],
              [
                "function_fibonacci",
                "branch",
                "branch",
                "loop"
              ]
            ]
          },
          "function_contracts": {
            "fibonacci": {
              "name": "fibonacci",
              "args": [
                "n"
              ],
              "returns": null,
              "has_return": true
            }
          },
          "complexity_class": {
            "nested_loops": 1,
            "recursive_calls": 0,
            "estimated_complexity": "O(n)"
          },
          "side_effect_profile": {
            "has_print": false,
            "has_global_access": false,
            "has_file_io": false,
            "modifies_arguments": false,
            "is_pure": true
          },
          "termination_properties": {
            "has_base_case": true,
            "has_bounded_loops": true,
            "recursive_depth": 0
          },
          "algebraic_structure": {
            "commutative_ops": [
              "Add",
              "Add"
            ],
            "associative_ops": [
              "Add",
              "Add"
            ],
            "binary_operations": [
              "Add",
              "Add"
            ]
          },
          "numerical_behavior": {
            "uses_integers": true,
            "uses_floats": false,
            "has_arithmetic": true,
            "numeric_constants": [
              0,
              0,
              1,
              1,
              0,
              1,
              2,
              1
            ]
          },
          "logical_equivalence": {
            "boolean_ops": [],
            "comparisons": [
              "LtE",
              "Eq"
            ],
            "logical_patterns": []
          },
          "normalized_ast_structure": {
            "node_types": [
              "Module",
              "FunctionDef",
              "arguments",
              "arg",
              "If",
              "Compare",
              "Name",
              "Load",
              "LtE",
              "Constant",
              "Return",
              "Constant",
              "If",
              "Compare",
              "Name",
              "Load",
              "Eq",
              "Constant",
              "Return",
              "Constant",
              "Assign",
              "Tuple",
              "Name",
              "Store",
              "Name",
              "Store",
              "Store",
              "Tuple",
              "Constant",
              "Constant",
              "Load",
              "For",
              "Name",
              "Store",
              "Call",
              "Name",
              "Load",
              "Constant",
              "BinOp",
              "Name",
              "Load",
              "Add",
              "Constant",
              "Assign",
              "Tuple",
              "Name",
              "Store",
              "Name",
              "Store",
              "Store",
              "Tuple",
              "Name",
              "Load",
              "BinOp",
              "Name",
              "Load",
              "Add",
              "Name",
              "Load",
              "Load",
              "Return",
              "Name",
              "Load"
            ],
            "ast_depth": 9,
            "ast_hash": "bd9ce84d566123fa53458cc745f40d7f"
          },
          "operator_precedence": {
            "operator_sequence": [
              "Add",
              "Add"
            ],
            "precedence_levels": {
              "Add": 3
            }
          },
          "statement_ordering": {
            "statement_types": [
              "FunctionDef",
              "If",
              "Return",
              "If",
              "Return",
              "Assign",
              "For",
              "Assign",
              "Return"
            ],
            "statement_sequence": [
              "FunctionDef_0",
              "If_1",
              "Return_2",
              "If_3",
              "Return_4",
              "Assign_5",
              "For_6",
              "Assign_7",
              "Return_8"
            ],
            "control_flow_order": [
              "FunctionDef",
              "If",
              "If",
              "For"
            ]
          }
        },
        {
          "control_flow_signature": {
            "if_statements": 3,
            "for_loops": 1,
            "while_loops": 0,
            "function_calls": [
              "ValueError",
              "range"
            ],
            "nested_depth": 3,
            "branch_patterns": [
              "if_at_depth_0",
              "if_at_depth_1",
              "if_at_depth_2"
            ]
          },
          "data_dependency_graph": {
            "dependencies": {},
            "assignments": {}
          },
          "execution_paths": {
            "execution_paths": [
              [
                "function_fibonacci"
              ],
              [
                "function_fibonacci",
                "branch"
              ],
              [
                "function_fibonacci",
                "branch",
                "branch"
              ],
              [
                "function_fibonacci",
                "branch",
                "branch",
                "branch"
              ],
              [
                "function_fibonacci",
                "loop"
              ]
            ]
          },
          "function_contracts": {
            "fibonacci": {
              "name": "fibonacci",
              "args": [
                "n"
              ],
              "returns": null,
              "has_return": true
            }
          },
          "complexity_class": {
            "nested_loops": 1,
            "recursive_calls": 0,
            "estimated_complexity": "O(n)"
          },
          "side_effect_profile": {
            "has_print": false,
            "has_global_access": false,
            "has_file_io": false,
            "modifies_arguments": false,
            "is_pure": true
          },
          "termination_properties": {
            "has_base_case": true,
            "has_bounded_loops": true,
            "recursive_depth": 0
          },
          "algebraic_structure": {
            "commutative_ops": [
              "Add",
              "Add"
            ],
            "associative_ops": [
              "Add",
              "Add"
            ],
            "binary_operations": [
              "Add",
              "Add"
            ]
          },
          "numerical_behavior": {
            "uses_integers": true,
            "uses_floats": false,
            "has_arithmetic": true,
            "numeric_constants": [
              0,
              0,
              0,
              1,
              1,
              0,
              1,
              2,
              1
            ]
          },
          "logical_equivalence": {
            "boolean_ops": [],
            "comparisons": [
              "Lt",
              "Eq",
              "Eq"
            ],
            "logical_patterns": []
          },
          "normalized_ast_structure": {
            "node_types": [
              "Module",
              "FunctionDef",
              "arguments",
              "arg",
              "If",
              "Compare",
              "Name",
              "Load",
              "Lt",
              "Constant",
              "Raise",
              "Call",
              "Name",
              "Load",
              "Constant",
              "If",
              "Compare",
              "Name",
              "Load",
              "Eq",
              "Constant",
              "Return",
              "Constant",
              "If",
              "Compare",
              "Name",
              "Load",
              "Eq",
              "Constant",
              "Return",
              "Constant",
              "Assign",
              "Tuple",
              "Name",
              "Store",
              "Name",
              "Store",
              "Store",
              "Tuple",
              "Constant",
              "Constant",
              "Load",
              "For",
              "Name",
              "Store",
              "Call",
              "Name",
              "Load",
              "Constant",
              "BinOp",
              "Name",
              "Load",
              "Add",
              "Constant",
              "Assign",
              "Tuple",
              "Name",
              "Store",
              "Name",
              "Store",
              "Store",
              "Tuple",
              "Name",
              "Load",
              "BinOp",
              "Name",
              "Load",
              "Add",
              "Name",
              "Load",
              "Load",
              "Return",
              "Name",
              "Load"
            ],
            "ast_depth": 7,
            "ast_hash": "81f1beb8d67af84b34de94dc07195fbb"
          },
          "operator_precedence": {
            "operator_sequence": [
              "Add",
              "Add"
            ],
            "precedence_levels": {
              "Add": 3
            }
          },
          "statement_ordering": {
            "statement_types": [
              "FunctionDef",
              "If",
              "Raise",
              "If",
              "Return",
              "If",
              "Return",
              "Assign",
              "For",
              "Assign",
              "Return"
            ],
            "statement_sequence": [
              "FunctionDef_0",
              "If_1",
              "Raise_2",
              "If_3",
              "Return_4",
              "If_5",
              "Return_6",
              "Assign_7",
              "For_8",
              "Assign_9",
              "Return_10"
            ],
            "control_flow_order": [
              "FunctionDef",
              "If",
              "If",
              "If",
              "For"
            ]
          }
        },
        {
          "control_flow_signature": {
            "if_statements": 2,
            "for_loops": 1,
            "while_loops": 0,
            "function_calls": [
              "range"
            ],
            "nested_depth": 2,
            "branch_patterns": [
              "if_at_depth_0",
              "if_at_depth_1"
            ]
          },
          "data_dependency_graph": {
            "dependencies": {},
            "assignments": {}
          },
          "execution_paths": {
            "execution_paths": [
              [
                "function_fibonacci"
              ],
              [
                "function_fibonacci",
                "branch"
              ],
              [
                "function_fibonacci",
                "branch",
                "branch"
              ],
              [
                "function_fibonacci",
                "loop"
              ]
            ]
          },
          "function_contracts": {
            "fibonacci": {
              "name": "fibonacci",
              "args": [
                "n"
              ],
              "returns": null,
              "has_return": true
            }
          },
          "complexity_class": {
            "nested_loops": 1,
            "recursive_calls": 0,
            "estimated_complexity": "O(n)"
          },
          "side_effect_profile": {
            "has_print": false,
            "has_global_access": false,
            "has_file_io": false,
            "modifies_arguments": false,
            "is_pure": true
          },
          "termination_properties": {
            "has_base_case": true,
            "has_bounded_loops": true,
            "recursive_depth": 0
          },
          "algebraic_structure": {
            "commutative_ops": [
              "Add",
              "Add"
            ],
            "associative_ops": [
              "Add",
              "Add"
            ],
            "binary_operations": [
              "Add",
              "Add"
            ]
          },
          "numerical_behavior": {
            "uses_integers": true,
            "uses_floats": false,
            "has_arithmetic": true,
            "numeric_constants": [
              0,
              0,
              1,
              1,
              0,
              1,
              2,
              1
            ]
          },
          "logical_equivalence": {
            "boolean_ops": [],
            "comparisons": [
              "LtE",
              "Eq"
            ],
            "logical_patterns": []
          },
          "normalized_ast_structure": {
            "node_types": [
              "Module",
              "FunctionDef",
              "arguments",
              "arg",
              "If",
              "Compare",
              "Name",
              "Load",
              "LtE",
              "Constant",
              "Return",
              "Constant",
              "If",
              "Compare",
              "Name",
              "Load",
              "Eq",
              "Constant",
              "Return",
              "Constant",
              "Assign",
              "Tuple",
              "Name",
              "Store",
              "Name",
              "Store",
              "Store",
              "Tuple",
              "Constant",
              "Constant",
              "Load",
              "For",
              "Name",
              "Store",
              "Call",
              "Name",
              "Load",
              "Constant",
              "BinOp",
              "Name",
              "Load",
              "Add",
              "Constant",
              "Assign",
              "Tuple",
              "Name",
              "Store",
              "Name",
              "Store",
              "Store",
              "Tuple",
              "Name",
              "Load",
              "BinOp",
              "Name",
              "Load",
              "Add",
              "Name",
              "Load",
              "Load",
              "Return",
              "Name",
              "Load"
            ],
            "ast_depth": 7,
            "ast_hash": "9ab064e3ea8e7729ca5332b33258c4f7"
          },
          "operator_precedence": {
            "operator_sequence": [
              "Add",
              "Add"
            ],
            "precedence_levels": {
              "Add": 3
            }
          },
          "statement_ordering": {
            "statement_types": [
              "FunctionDef",
              "If",
              "Return",
              "If",
              "Return",
              "Assign",
              "For",
              "Assign",
              "Return"
            ],
            "statement_sequence": [
              "FunctionDef_0",
              "If_1",
              "Return_2",
              "If_3",
              "Return_4",
              "Assign_5",
              "For_6",
              "Assign_7",
              "Return_8"
            ],
            "control_flow_order": [
              "FunctionDef",
              "If",
              "If",
              "For"
            ]
          }
        },
        {
          "control_flow_signature": {
            "if_statements": 2,
            "for_loops": 1,
            "while_loops": 0,
            "function_calls": [
              "range"
            ],
            "nested_depth": 2,
            "branch_patterns": [
              "if_at_depth_0",
              "if_at_depth_1"
            ]
          },
          "data_dependency_graph": {
            "dependencies": {},
            "assignments": {}
          },
          "execution_paths": {
            "execution_paths": [
              [
                "function_fibonacci"
              ],
              [
                "function_fibonacci",
                "branch"
              ],
              [
                "function_fibonacci",
                "branch",
                "branch"
              ],
              [
                "function_fibonacci",
                "loop"
              ]
            ]
          },
          "function_contracts": {
            "fibonacci": {
              "name": "fibonacci",
              "args": [
                "n"
              ],
              "returns": null,
              "has_return": true
            }
          },
          "complexity_class": {
            "nested_loops": 1,
            "recursive_calls": 0,
            "estimated_complexity": "O(n)"
          },
          "side_effect_profile": {
            "has_print": false,
            "has_global_access": false,
            "has_file_io": false,
            "modifies_arguments": false,
            "is_pure": true
          },
          "termination_properties": {
            "has_base_case": true,
            "has_bounded_loops": true,
            "recursive_depth": 0
          },
          "algebraic_structure": {
            "commutative_ops": [
              "Add",
              "Add"
            ],
            "associative_ops": [
              "Add",
              "Add"
            ],
            "binary_operations": [
              "Add",
              "Add"
            ]
          },
          "numerical_behavior": {
            "uses_integers": true,
            "uses_floats": false,
            "has_arithmetic": true,
            "numeric_constants": [
              0,
              0,
              1,
              1,
              0,
              1,
              2,
              1
            ]
          },
          "logical_equivalence": {
            "boolean_ops": [],
            "comparisons": [
              "LtE",
              "Eq"
            ],
            "logical_patterns": []
          },
          "normalized_ast_structure": {
            "node_types": [
              "Module",
              "FunctionDef",
              "arguments",
              "arg",
              "If",
              "Compare",
              "Name",
              "Load",
              "LtE",
              "Constant",
              "Return",
              "Constant",
              "If",
              "Compare",
              "Name",
              "Load",
              "Eq",
              "Constant",
              "Return",
              "Constant",
              "Assign",
              "Tuple",
              "Name",
              "Store",
              "Name",
              "Store",
              "Store",
              "Tuple",
              "Constant",
              "Constant",
              "Load",
              "For",
              "Name",
              "Store",
              "Call",
              "Name",
              "Load",
              "Constant",
              "BinOp",
              "Name",
              "Load",
              "Add",
              "Constant",
              "Assign",
              "Tuple",
              "Name",
              "Store",
              "Name",
              "Store",
              "Store",
              "Tuple",
              "Name",
              "Load",
              "BinOp",
              "Name",
              "Load",
              "Add",
              "Name",
              "Load",
              "Load",
              "Return",
              "Name",
              "Load"
            ],
            "ast_depth": 7,
            "ast_hash": "9ab064e3ea8e7729ca5332b33258c4f7"
          },
          "operator_precedence": {
            "operator_sequence": [
              "Add",
              "Add"
            ],
            "precedence_levels": {
              "Add": 3
            }
          },
          "statement_ordering": {
            "statement_types": [
              "FunctionDef",
              "If",
              "Return",
              "If",
              "Return",
              "Assign",
              "For",
              "Assign",
              "Return"
            ],
            "statement_sequence": [
              "FunctionDef_0",
              "If_1",
              "Return_2",
              "If_3",
              "Return_4",
              "Assign_5",
              "For_6",
              "Assign_7",
              "Return_8"
            ],
            "control_flow_order": [
              "FunctionDef",
              "If",
              "If",
              "For"
            ]
          }
        },
        {
          "control_flow_signature": {
            "if_statements": 2,
            "for_loops": 1,
            "while_loops": 0,
            "function_calls": [
              "range"
            ],
            "nested_depth": 2,
            "branch_patterns": [
              "if_at_depth_0",
              "if_at_depth_1"
            ]
          },
          "data_dependency_graph": {
            "dependencies": {},
            "assignments": {}
          },
          "execution_paths": {
            "execution_paths": [
              [
                "function_fibonacci"
              ],
              [
                "function_fibonacci",
                "branch"
              ],
              [
                "function_fibonacci",
                "branch",
                "branch"
              ],
              [
                "function_fibonacci",
                "loop"
              ]
            ]
          },
          "function_contracts": {
            "fibonacci": {
              "name": "fibonacci",
              "args": [
                "n"
              ],
              "returns": null,
              "has_return": true
            }
          },
          "complexity_class": {
            "nested_loops": 1,
            "recursive_calls": 0,
            "estimated_complexity": "O(n)"
          },
          "side_effect_profile": {
            "has_print": false,
            "has_global_access": false,
            "has_file_io": false,
            "modifies_arguments": false,
            "is_pure": true
          },
          "termination_properties": {
            "has_base_case": true,
            "has_bounded_loops": true,
            "recursive_depth": 0
          },
          "algebraic_structure": {
            "commutative_ops": [
              "Add",
              "Add"
            ],
            "associative_ops": [
              "Add",
              "Add"
            ],
            "binary_operations": [
              "Add",
              "Add"
            ]
          },
          "numerical_behavior": {
            "uses_integers": true,
            "uses_floats": false,
            "has_arithmetic": true,
            "numeric_constants": [
              0,
              0,
              1,
              1,
              0,
              1,
              2,
              1
            ]
          },
          "logical_equivalence": {
            "boolean_ops": [],
            "comparisons": [
              "LtE",
              "Eq"
            ],
            "logical_patterns": []
          },
          "normalized_ast_structure": {
            "node_types": [
              "Module",
              "FunctionDef",
              "arguments",
              "arg",
              "If",
              "Compare",
              "Name",
              "Load",
              "LtE",
              "Constant",
              "Return",
              "Constant",
              "If",
              "Compare",
              "Name",
              "Load",
              "Eq",
              "Constant",
              "Return",
              "Constant",
              "Assign",
              "Tuple",
              "Name",
              "Store",
              "Name",
              "Store",
              "Store",
              "Tuple",
              "Constant",
              "Constant",
              "Load",
              "For",
              "Name",
              "Store",
              "Call",
              "Name",
              "Load",
              "Constant",
              "BinOp",
              "Name",
              "Load",
              "Add",
              "Constant",
              "Assign",
              "Tuple",
              "Name",
              "Store",
              "Name",
              "Store",
              "Store",
              "Tuple",
              "Name",
              "Load",
              "BinOp",
              "Name",
              "Load",
              "Add",
              "Name",
              "Load",
              "Load",
              "Return",
              "Name",
              "Load"
            ],
            "ast_depth": 7,
            "ast_hash": "c50a779a12fd5d8d5e3a6bab9314a9fe"
          },
          "operator_precedence": {
            "operator_sequence": [
              "Add",
              "Add"
            ],
            "precedence_levels": {
              "Add": 3
            }
          },
          "statement_ordering": {
            "statement_types": [
              "FunctionDef",
              "If",
              "Return",
              "If",
              "Return",
              "Assign",
              "For",
              "Assign",
              "Return"
            ],
            "statement_sequence": [
              "FunctionDef_0",
              "If_1",
              "Return_2",
              "If_3",
              "Return_4",
              "Assign_5",
              "For_6",
              "Assign_7",
              "Return_8"
            ],
            "control_flow_order": [
              "FunctionDef",
              "If",
              "If",
              "For"
            ]
          }
        },
        {
          "control_flow_signature": {
            "if_statements": 2,
            "for_loops": 1,
            "while_loops": 0,
            "function_calls": [
              "range"
            ],
            "nested_depth": 2,
            "branch_patterns": [
              "if_at_depth_0",
              "if_at_depth_1"
            ]
          },
          "data_dependency_graph": {
            "dependencies": {},
            "assignments": {}
          },
          "execution_paths": {
            "execution_paths": [
              [
                "function_fibonacci"
              ],
              [
                "function_fibonacci",
                "branch"
              ],
              [
                "function_fibonacci",
                "branch",
                "branch"
              ],
              [
                "function_fibonacci",
                "loop"
              ]
            ]
          },
          "function_contracts": {
            "fibonacci": {
              "name": "fibonacci",
              "args": [
                "n"
              ],
              "returns": null,
              "has_return": true
            }
          },
          "complexity_class": {
            "nested_loops": 1,
            "recursive_calls": 0,
            "estimated_complexity": "O(n)"
          },
          "side_effect_profile": {
            "has_print": false,
            "has_global_access": false,
            "has_file_io": false,
            "modifies_arguments": false,
            "is_pure": true
          },
          "termination_properties": {
            "has_base_case": true,
            "has_bounded_loops": true,
            "recursive_depth": 0
          },
          "algebraic_structure": {
            "commutative_ops": [
              "Add",
              "Add"
            ],
            "associative_ops": [
              "Add",
              "Add"
            ],
            "binary_operations": [
              "Add",
              "Add"
            ]
          },
          "numerical_behavior": {
            "uses_integers": true,
            "uses_floats": false,
            "has_arithmetic": true,
            "numeric_constants": [
              0,
              0,
              1,
              1,
              0,
              1,
              2,
              1
            ]
          },
          "logical_equivalence": {
            "boolean_ops": [],
            "comparisons": [
              "LtE",
              "Eq"
            ],
            "logical_patterns": []
          },
          "normalized_ast_structure": {
            "node_types": [
              "Module",
              "FunctionDef",
              "arguments",
              "arg",
              "If",
              "Compare",
              "Name",
              "Load",
              "LtE",
              "Constant",
              "Return",
              "Constant",
              "If",
              "Compare",
              "Name",
              "Load",
              "Eq",
              "Constant",
              "Return",
              "Constant",
              "Assign",
              "Tuple",
              "Name",
              "Store",
              "Name",
              "Store",
              "Store",
              "Tuple",
              "Constant",
              "Constant",
              "Load",
              "For",
              "Name",
              "Store",
              "Call",
              "Name",
              "Load",
              "Constant",
              "BinOp",
              "Name",
              "Load",
              "Add",
              "Constant",
              "Assign",
              "Tuple",
              "Name",
              "Store",
              "Name",
              "Store",
              "Store",
              "Tuple",
              "Name",
              "Load",
              "BinOp",
              "Name",
              "Load",
              "Add",
              "Name",
              "Load",
              "Load",
              "Return",
              "Name",
              "Load"
            ],
            "ast_depth": 7,
            "ast_hash": "9ab064e3ea8e7729ca5332b33258c4f7"
          },
          "operator_precedence": {
            "operator_sequence": [
              "Add",
              "Add"
            ],
            "precedence_levels": {
              "Add": 3
            }
          },
          "statement_ordering": {
            "statement_types": [
              "FunctionDef",
              "If",
              "Return",
              "If",
              "Return",
              "Assign",
              "For",
              "Assign",
              "Return"
            ],
            "statement_sequence": [
              "FunctionDef_0",
              "If_1",
              "Return_2",
              "If_3",
              "Return_4",
              "Assign_5",
              "For_6",
              "Assign_7",
              "Return_8"
            ],
            "control_flow_order": [
              "FunctionDef",
              "If",
              "If",
              "For"
            ]
          }
        }
      ],
      "structural_groups": {
        "-8142681571875717632_4525362293023757255_-2764606340694838315_7769288353164350977": [
          0
        ],
        "6746204401553386543_4525362293023757255_-2764606340694838315_-8902930338143988196": [
          1,
          6,
          7,
          9
        ],
        "6466048042038500039_4525362293023757255_-2764606340694838315_-2522344890572198377": [
          2
        ],
        "-8142681571875717632_4525362293023757255_-2764606340694838315_2738502136133943970": [
          3
        ],
        "-2882989374770433887_4525362293023757255_-2764606340694838315_6216076428792399888": [
          4
        ],
        "-8142681571875717632_4525362293023757255_-2764606340694838315_-145609412729354870": [
          5
        ],
        "6746204401553386543_4525362293023757255_-2764606340694838315_9103980517343730473": [
          8
        ]
      },
      "distances_to_canon": [
        0.28846153846153844,
        0.0,
        0.28846153846153844,
        0.28846153846153844,
        0.16025641025641024,
        0.28846153846153844,
        0.0,
        0.0,
        0.07692307692307693,
        0.0
      ],
      "mean_distance": 0.13910256410256408,
      "std_distance": 0.13074566152606956
    },
    "distance_variance": {
      "distances": [
        0.28846153846153844,
        0.0,
        0.28846153846153844,
        0.28846153846153844,
        0.16025641025641024,
        0.28846153846153844,
        0.0,
        0.0,
        0.07692307692307693,
        0.0
      ],
      "mean": 0.13910256410256408,
      "std": 0.13074566152606956,
      "min": 0.0,
      "max": 0.28846153846153844,
      "variance": 0.017094428007889545,
      "histogram_bins": [
        4,
        0,
        1,
        0,
        0,
        1,
        0,
        0,
        0,
        4
      ],
      "histogram_edges": [
        0.0,
        0.028846153846153844,
        0.05769230769230769,
        0.08653846153846154,
        0.11538461538461538,
        0.14423076923076922,
        0.17307692307692307,
        0.2019230769230769,
        0.23076923076923075,
        0.2596153846153846,
        0.28846153846153844
      ]
    },
    "behavioral_improvement": 0.8,
    "structural_improvement": 0.2,
    "total_improvement": 0.2
  },
  "bell_curve_analysis": {
    "plot_path": "outputs\\analysis\\bell_curve_fibonacci_basic_temp1.5.png",
    "statistics": {
      "mean": 0.13910256410256408,
      "std": 0.13074566152606956,
      "median": 0.11858974358974358,
      "min": 0.0,
      "max": 0.28846153846153844,
      "variance": 0.017094428007889545,
      "skewness": 0.10426968072065887,
      "kurtosis": -1.8011166624055632,
      "percentiles": {
        "25th": 0.0,
        "50th": 0.11858974358974358,
        "75th": 0.28846153846153844,
        "90th": 0.28846153846153844,
        "95th": 0.28846153846153844
      }
    },
    "normality_test": {
      "statistic": 0.7622851002886101,
      "p_value": 0.005036768016761722,
      "is_normal": "False"
    },
    "sample_size": 10
  },
  "hypothesis_evaluation": {
    "hypothesis": "SKYT improves LLM code repeatability through contract-driven canonicalization",
    "supported": true,
    "evidence": {
      "raw_repeatability": 0.2,
      "behavioral_improvement": 0.8,
      "structural_improvement": 0.2,
      "total_improvement": 0.2
    },
    "conclusion": "Hypothesis SUPPORTED: Significant improvement detected"
  }
}