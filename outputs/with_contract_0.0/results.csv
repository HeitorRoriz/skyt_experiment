ts,prompt_id,run_id,model,temperature,raw_output,code,canon_code,raw_hash,canon_signature,structural_ok,canonicalization_ok,contract_pass,oracle_pass,notes,attempts,last_error,status,metrics_version,contract_id
1756744189.721031,anchor_fib_v1,anchor_fib_v1_1756744189,gpt-4o-mini,0.0,"```python
def fibonacci(n=20, fib_list=None):
    if fib_list is None:
        fib_list = [0, 1]
    if len(fib_list) < n:
        fib_list.append(fib_list[-1] + fib_list[-2])
        return fibonacci(n, fib_list)
    return fib_list[:n]

# Example usage
print(fibonacci())
```","def fibonacci(n=20, fib_list=None):
    if fib_list is None:
        fib_list = [0, 1]
    if len(fib_list) < n:
        fib_list.append(fib_list[-1] + fib_list[-2])
        return fibonacci(n, fib_list)
    return fib_list[:n]

# Example usage
print(fibonacci())","def fibonacci(n=20, fib_list=None):
    if fib_list is None:
        fib_list = [0, 1]
    if len(fib_list) < n:
        fib_list.append(fib_list[-1] + fib_list[-2])
        return fibonacci(n, fib_list)
    return fib_list[:n]
print(fibonacci())",528bd28faa9ca9a8,f8a5a9c9a861533f,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,anchor_fib_v1
1756744193.0667713,anchor_fib_v1,anchor_fib_v1_1756744193,gpt-4o-mini,0.0,"```python
def fibonacci(n=20, fib_list=None):
    if fib_list is None:
        fib_list = [0, 1]
    if len(fib_list) < n:
        fib_list.append(fib_list[-1] + fib_list[-2])
        return fibonacci(n, fib_list)
    return fib_list[:n]

# Example usage
print(fibonacci())
```","def fibonacci(n=20, fib_list=None):
    if fib_list is None:
        fib_list = [0, 1]
    if len(fib_list) < n:
        fib_list.append(fib_list[-1] + fib_list[-2])
        return fibonacci(n, fib_list)
    return fib_list[:n]

# Example usage
print(fibonacci())","def fibonacci(n=20, fib_list=None):
    if fib_list is None:
        fib_list = [0, 1]
    if len(fib_list) < n:
        fib_list.append(fib_list[-1] + fib_list[-2])
        return fibonacci(n, fib_list)
    return fib_list[:n]
print(fibonacci())",528bd28faa9ca9a8,f8a5a9c9a861533f,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,anchor_fib_v1
1756744195.1942732,anchor_fib_v1,anchor_fib_v1_1756744195,gpt-4o-mini,0.0,"```python
def fibonacci(n=20, fib_list=None):
    if fib_list is None:
        fib_list = [0, 1]
    if len(fib_list) < n:
        fib_list.append(fib_list[-1] + fib_list[-2])
        return fibonacci(n, fib_list)
    return fib_list[:n]

# Example usage
print(fibonacci())
```","def fibonacci(n=20, fib_list=None):
    if fib_list is None:
        fib_list = [0, 1]
    if len(fib_list) < n:
        fib_list.append(fib_list[-1] + fib_list[-2])
        return fibonacci(n, fib_list)
    return fib_list[:n]

# Example usage
print(fibonacci())","def fibonacci(n=20, fib_list=None):
    if fib_list is None:
        fib_list = [0, 1]
    if len(fib_list) < n:
        fib_list.append(fib_list[-1] + fib_list[-2])
        return fibonacci(n, fib_list)
    return fib_list[:n]
print(fibonacci())",528bd28faa9ca9a8,f8a5a9c9a861533f,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,anchor_fib_v1
1756744197.7725556,anchor_fib_v1,anchor_fib_v1_1756744197,gpt-4o-mini,0.0,"```python
def fibonacci(n=20, fib_list=None):
    if fib_list is None:
        fib_list = [0, 1]
    if len(fib_list) < n:
        fib_list.append(fib_list[-1] + fib_list[-2])
        return fibonacci(n, fib_list)
    return fib_list[:n]

# Example usage
print(fibonacci())
```","def fibonacci(n=20, fib_list=None):
    if fib_list is None:
        fib_list = [0, 1]
    if len(fib_list) < n:
        fib_list.append(fib_list[-1] + fib_list[-2])
        return fibonacci(n, fib_list)
    return fib_list[:n]

# Example usage
print(fibonacci())","def fibonacci(n=20, fib_list=None):
    if fib_list is None:
        fib_list = [0, 1]
    if len(fib_list) < n:
        fib_list.append(fib_list[-1] + fib_list[-2])
        return fibonacci(n, fib_list)
    return fib_list[:n]
print(fibonacci())",528bd28faa9ca9a8,f8a5a9c9a861533f,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,anchor_fib_v1
1756744201.53745,anchor_fib_v1,anchor_fib_v1_1756744201,gpt-4o-mini,0.0,"```python
def fibonacci(n=20, fib_list=None):
    if fib_list is None:
        fib_list = [0, 1]
    if len(fib_list) < n:
        fib_list.append(fib_list[-1] + fib_list[-2])
        return fibonacci(n, fib_list)
    return fib_list[:n]

# Example usage
print(fibonacci())
```","def fibonacci(n=20, fib_list=None):
    if fib_list is None:
        fib_list = [0, 1]
    if len(fib_list) < n:
        fib_list.append(fib_list[-1] + fib_list[-2])
        return fibonacci(n, fib_list)
    return fib_list[:n]

# Example usage
print(fibonacci())","def fibonacci(n=20, fib_list=None):
    if fib_list is None:
        fib_list = [0, 1]
    if len(fib_list) < n:
        fib_list.append(fib_list[-1] + fib_list[-2])
        return fibonacci(n, fib_list)
    return fib_list[:n]
print(fibonacci())",528bd28faa9ca9a8,f8a5a9c9a861533f,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,anchor_fib_v1
1756744254.2041373,slugify_v1,slugify_v1_1756744254,gpt-4o-mini,0.0,"```python
import unicodedata
import re

def slugify(texts):
    def create_slug(text):
        # Normalize the text to remove accents
        text = unicodedata.normalize('NFKD', text)
        # Remove non-ASCII characters
        text = re.sub(r'[^\w\s-]', '', text)
        # Replace spaces and collapse internal whitespace
        text = re.sub(r'\s+', ' ', text).strip()
        # Convert to lowercase and replace spaces with '-'
        return re.sub(r'[-\s]+', '-', text.lower())

    return [create_slug(text) for text in texts]
```","import unicodedata
import re

def slugify(texts):
    def create_slug(text):
        # Normalize the text to remove accents
        text = unicodedata.normalize('NFKD', text)
        # Remove non-ASCII characters
        text = re.sub(r'[^\w\s-]', '', text)
        # Replace spaces and collapse internal whitespace
        text = re.sub(r'\s+', ' ', text).strip()
        # Convert to lowercase and replace spaces with '-'
        return re.sub(r'[-\s]+', '-', text.lower())

    return [create_slug(text) for text in texts]","import unicodedata
import re
def slugify(texts):
    def create_slug(text):
        text = unicodedata.normalize('NFKD', text)
        text = re.sub('[^\\w\\s-]', '', text)
        text = re.sub('\\s+', ' ', text).strip()
        return re.sub('[-\\s]+', '-', text.lower())
    return [create_slug(text) for text in texts]",98a95589ffe78484,95d74e726c044f66,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,slugify_v1
1756744258.1079454,slugify_v1,slugify_v1_1756744258,gpt-4o-mini,0.0,"```python
import unicodedata
import re

def slugify(texts):
    def create_slug(text):
        # Normalize the text to remove accents
        text = unicodedata.normalize('NFKD', text)
        # Remove non-ASCII characters
        text = re.sub(r'[^\w\s-]', '', text)
        # Replace spaces and collapse multiple spaces
        text = re.sub(r'\s+', ' ', text).strip()
        # Convert to lowercase and replace spaces with '-'
        return re.sub(r'[-\s]+', '-', text.lower())
    
    return [create_slug(text) for text in texts]
```","import unicodedata
import re

def slugify(texts):
    def create_slug(text):
        # Normalize the text to remove accents
        text = unicodedata.normalize('NFKD', text)
        # Remove non-ASCII characters
        text = re.sub(r'[^\w\s-]', '', text)
        # Replace spaces and collapse multiple spaces
        text = re.sub(r'\s+', ' ', text).strip()
        # Convert to lowercase and replace spaces with '-'
        return re.sub(r'[-\s]+', '-', text.lower())
    
    return [create_slug(text) for text in texts]","import unicodedata
import re
def slugify(texts):
    def create_slug(text):
        text = unicodedata.normalize('NFKD', text)
        text = re.sub('[^\\w\\s-]', '', text)
        text = re.sub('\\s+', ' ', text).strip()
        return re.sub('[-\\s]+', '-', text.lower())
    return [create_slug(text) for text in texts]",84def82912d6f8b1,95d74e726c044f66,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,slugify_v1
1756744261.8449407,slugify_v1,slugify_v1_1756744261,gpt-4o-mini,0.0,"```python
import unicodedata
import re

def slugify(texts):
    def create_slug(text):
        # Normalize the text to remove accents
        text = unicodedata.normalize('NFKD', text)
        # Remove non-ASCII characters
        text = re.sub(r'[^\w\s-]', '', text)
        # Replace spaces and collapse internal whitespace
        text = re.sub(r'\s+', ' ', text).strip()
        # Convert to lowercase and replace spaces with '-'
        return re.sub(r'[-\s]+', '-', text.lower())
    
    return [create_slug(text) for text in texts]
```","import unicodedata
import re

def slugify(texts):
    def create_slug(text):
        # Normalize the text to remove accents
        text = unicodedata.normalize('NFKD', text)
        # Remove non-ASCII characters
        text = re.sub(r'[^\w\s-]', '', text)
        # Replace spaces and collapse internal whitespace
        text = re.sub(r'\s+', ' ', text).strip()
        # Convert to lowercase and replace spaces with '-'
        return re.sub(r'[-\s]+', '-', text.lower())
    
    return [create_slug(text) for text in texts]","import unicodedata
import re
def slugify(texts):
    def create_slug(text):
        text = unicodedata.normalize('NFKD', text)
        text = re.sub('[^\\w\\s-]', '', text)
        text = re.sub('\\s+', ' ', text).strip()
        return re.sub('[-\\s]+', '-', text.lower())
    return [create_slug(text) for text in texts]",84760151ac6e0773,95d74e726c044f66,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,slugify_v1
1756744266.1935434,slugify_v1,slugify_v1_1756744266,gpt-4o-mini,0.0,"```python
import unicodedata
import re

def slugify(texts):
    def create_slug(text):
        # Normalize the text to remove accents
        text = unicodedata.normalize('NFKD', text)
        # Remove unwanted characters and replace spaces with '-'
        text = re.sub(r'[^a-zA-Z0-9\s-]', '', text)
        # Collapse internal whitespace to single spaces
        text = re.sub(r'\s+', ' ', text).strip()
        # Replace spaces with '-'
        text = text.replace(' ', '-')
        # Convert to lowercase
        return text.lower()

    return [create_slug(text) for text in texts]
```","import unicodedata
import re

def slugify(texts):
    def create_slug(text):
        # Normalize the text to remove accents
        text = unicodedata.normalize('NFKD', text)
        # Remove unwanted characters and replace spaces with '-'
        text = re.sub(r'[^a-zA-Z0-9\s-]', '', text)
        # Collapse internal whitespace to single spaces
        text = re.sub(r'\s+', ' ', text).strip()
        # Replace spaces with '-'
        text = text.replace(' ', '-')
        # Convert to lowercase
        return text.lower()

    return [create_slug(text) for text in texts]","import unicodedata
import re
def slugify(texts):
    def create_slug(text):
        text = unicodedata.normalize('NFKD', text)
        text = re.sub('[^a-zA-Z0-9\\s-]', '', text)
        text = re.sub('\\s+', ' ', text).strip()
        text = text.replace(' ', '-')
        return text.lower()
    return [create_slug(text) for text in texts]",9c4e61054c223927,25d5cc324cdaebbd,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,slugify_v1
1756744270.1926167,slugify_v1,slugify_v1_1756744270,gpt-4o-mini,0.0,"```python
import unicodedata
import re

def slugify(texts):
    def create_slug(text):
        # Normalize the text to remove accents
        text = unicodedata.normalize('NFKD', text)
        # Remove non-ASCII characters
        text = re.sub(r'[^\w\s-]', '', text)
        # Replace spaces and collapse internal whitespace
        text = re.sub(r'\s+', ' ', text).strip()
        # Convert to lowercase and replace spaces with '-'
        return re.sub(r'[-\s]+', '-', text.lower())
    
    return [create_slug(text) for text in texts]
```","import unicodedata
import re

def slugify(texts):
    def create_slug(text):
        # Normalize the text to remove accents
        text = unicodedata.normalize('NFKD', text)
        # Remove non-ASCII characters
        text = re.sub(r'[^\w\s-]', '', text)
        # Replace spaces and collapse internal whitespace
        text = re.sub(r'\s+', ' ', text).strip()
        # Convert to lowercase and replace spaces with '-'
        return re.sub(r'[-\s]+', '-', text.lower())
    
    return [create_slug(text) for text in texts]","import unicodedata
import re
def slugify(texts):
    def create_slug(text):
        text = unicodedata.normalize('NFKD', text)
        text = re.sub('[^\\w\\s-]', '', text)
        text = re.sub('\\s+', ' ', text).strip()
        return re.sub('[-\\s]+', '-', text.lower())
    return [create_slug(text) for text in texts]",84760151ac6e0773,95d74e726c044f66,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,slugify_v1
1756744327.1534088,slugify_v2,slugify_v2_1756744327,gpt-4o-mini,0.0,"```python
import unicodedata
import re

def slugify(texts):
    def normalize_and_slugify(text):
        # Normalize to NFKD
        normalized = unicodedata.normalize('NFKD', text)
        # Remove diacritics
        no_diacritics = normalized.encode('ascii', 'ignore').decode('utf-8')
        # Strip, collapse spaces, lower, and replace spaces with '-'
        slug = re.sub(r'\s+', '-', no_diacritics.strip().lower())
        # Remove characters not in [a-z0-9-]
        slug = re.sub(r'[^a-z0-9-]', '', slug)
        return slug

    return [normalize_and_slugify(text) for text in texts]
```","import unicodedata
import re

def slugify(texts):
    def normalize_and_slugify(text):
        # Normalize to NFKD
        normalized = unicodedata.normalize('NFKD', text)
        # Remove diacritics
        no_diacritics = normalized.encode('ascii', 'ignore').decode('utf-8')
        # Strip, collapse spaces, lower, and replace spaces with '-'
        slug = re.sub(r'\s+', '-', no_diacritics.strip().lower())
        # Remove characters not in [a-z0-9-]
        slug = re.sub(r'[^a-z0-9-]', '', slug)
        return slug

    return [normalize_and_slugify(text) for text in texts]","import unicodedata
import re
def slugify(texts):
    def normalize_and_slugify(text):
        normalized = unicodedata.normalize('NFKD', text)
        no_diacritics = normalized.encode('ascii', 'ignore').decode('utf-8')
        slug = re.sub('\\s+', '-', no_diacritics.strip().lower())
        slug = re.sub('[^a-z0-9-]', '', slug)
        return slug
    return [normalize_and_slugify(text) for text in texts]",4f52894c4adeeb0d,dfc592cc1f9cf533,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,slugify_v2
1756744330.2590194,slugify_v2,slugify_v2_1756744330,gpt-4o-mini,0.0,"```python
import unicodedata
import re

def slugify(texts):
    def normalize_and_slugify(text):
        # Normalize to NFKD
        normalized = unicodedata.normalize('NFKD', text)
        # Remove diacritics
        no_diacritics = normalized.encode('ascii', 'ignore').decode('utf-8')
        # Strip, collapse spaces, lower, and replace spaces with '-'
        slug = re.sub(r'\s+', '-', no_diacritics.strip().lower())
        # Remove characters not in [a-z0-9-]
        slug = re.sub(r'[^a-z0-9-]', '', slug)
        return slug

    return [normalize_and_slugify(text) for text in texts]
```","import unicodedata
import re

def slugify(texts):
    def normalize_and_slugify(text):
        # Normalize to NFKD
        normalized = unicodedata.normalize('NFKD', text)
        # Remove diacritics
        no_diacritics = normalized.encode('ascii', 'ignore').decode('utf-8')
        # Strip, collapse spaces, lower, and replace spaces with '-'
        slug = re.sub(r'\s+', '-', no_diacritics.strip().lower())
        # Remove characters not in [a-z0-9-]
        slug = re.sub(r'[^a-z0-9-]', '', slug)
        return slug

    return [normalize_and_slugify(text) for text in texts]","import unicodedata
import re
def slugify(texts):
    def normalize_and_slugify(text):
        normalized = unicodedata.normalize('NFKD', text)
        no_diacritics = normalized.encode('ascii', 'ignore').decode('utf-8')
        slug = re.sub('\\s+', '-', no_diacritics.strip().lower())
        slug = re.sub('[^a-z0-9-]', '', slug)
        return slug
    return [normalize_and_slugify(text) for text in texts]",4f52894c4adeeb0d,dfc592cc1f9cf533,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,slugify_v2
1756744333.51319,slugify_v2,slugify_v2_1756744333,gpt-4o-mini,0.0,"```python
import unicodedata
import re

def slugify(texts):
    def normalize_and_slugify(text):
        # Normalize to NFKD
        normalized = unicodedata.normalize('NFKD', text)
        # Remove diacritics
        no_diacritics = normalized.encode('ascii', 'ignore').decode('utf-8')
        # Strip, collapse spaces, lower, and replace spaces with '-'
        slug = re.sub(r'\s+', '-', no_diacritics.strip().lower())
        # Remove characters not in [a-z0-9-]
        slug = re.sub(r'[^a-z0-9-]', '', slug)
        return slug

    return [normalize_and_slugify(text) for text in texts]
```","import unicodedata
import re

def slugify(texts):
    def normalize_and_slugify(text):
        # Normalize to NFKD
        normalized = unicodedata.normalize('NFKD', text)
        # Remove diacritics
        no_diacritics = normalized.encode('ascii', 'ignore').decode('utf-8')
        # Strip, collapse spaces, lower, and replace spaces with '-'
        slug = re.sub(r'\s+', '-', no_diacritics.strip().lower())
        # Remove characters not in [a-z0-9-]
        slug = re.sub(r'[^a-z0-9-]', '', slug)
        return slug

    return [normalize_and_slugify(text) for text in texts]","import unicodedata
import re
def slugify(texts):
    def normalize_and_slugify(text):
        normalized = unicodedata.normalize('NFKD', text)
        no_diacritics = normalized.encode('ascii', 'ignore').decode('utf-8')
        slug = re.sub('\\s+', '-', no_diacritics.strip().lower())
        slug = re.sub('[^a-z0-9-]', '', slug)
        return slug
    return [normalize_and_slugify(text) for text in texts]",4f52894c4adeeb0d,dfc592cc1f9cf533,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,slugify_v2
1756744337.1109447,slugify_v2,slugify_v2_1756744337,gpt-4o-mini,0.0,"```python
import unicodedata
import re

def slugify(texts):
    def normalize_and_slugify(text):
        # Normalize to NFKD
        normalized = unicodedata.normalize('NFKD', text)
        # Remove diacritics
        no_diacritics = normalized.encode('ascii', 'ignore').decode('utf-8')
        # Strip, collapse spaces, lower, and replace spaces with '-'
        slug = re.sub(r'\s+', '-', no_diacritics.strip().lower())
        # Remove characters not in [a-z0-9-]
        slug = re.sub(r'[^a-z0-9-]', '', slug)
        return slug

    return [normalize_and_slugify(text) for text in texts]
```","import unicodedata
import re

def slugify(texts):
    def normalize_and_slugify(text):
        # Normalize to NFKD
        normalized = unicodedata.normalize('NFKD', text)
        # Remove diacritics
        no_diacritics = normalized.encode('ascii', 'ignore').decode('utf-8')
        # Strip, collapse spaces, lower, and replace spaces with '-'
        slug = re.sub(r'\s+', '-', no_diacritics.strip().lower())
        # Remove characters not in [a-z0-9-]
        slug = re.sub(r'[^a-z0-9-]', '', slug)
        return slug

    return [normalize_and_slugify(text) for text in texts]","import unicodedata
import re
def slugify(texts):
    def normalize_and_slugify(text):
        normalized = unicodedata.normalize('NFKD', text)
        no_diacritics = normalized.encode('ascii', 'ignore').decode('utf-8')
        slug = re.sub('\\s+', '-', no_diacritics.strip().lower())
        slug = re.sub('[^a-z0-9-]', '', slug)
        return slug
    return [normalize_and_slugify(text) for text in texts]",4f52894c4adeeb0d,dfc592cc1f9cf533,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,slugify_v2
1756744340.4276893,slugify_v2,slugify_v2_1756744340,gpt-4o-mini,0.0,"```python
import unicodedata
import re

def slugify(texts):
    def normalize_and_slugify(text):
        # Normalize to NFKD
        normalized = unicodedata.normalize('NFKD', text)
        # Remove diacritics
        no_diacritics = normalized.encode('ascii', 'ignore').decode('utf-8')
        # Strip, collapse spaces, lower, and replace spaces with '-'
        slug = re.sub(r'\s+', '-', no_diacritics.strip().lower())
        # Remove characters not in [a-z0-9-]
        slug = re.sub(r'[^a-z0-9-]', '', slug)
        return slug

    return [normalize_and_slugify(text) for text in texts]
```","import unicodedata
import re

def slugify(texts):
    def normalize_and_slugify(text):
        # Normalize to NFKD
        normalized = unicodedata.normalize('NFKD', text)
        # Remove diacritics
        no_diacritics = normalized.encode('ascii', 'ignore').decode('utf-8')
        # Strip, collapse spaces, lower, and replace spaces with '-'
        slug = re.sub(r'\s+', '-', no_diacritics.strip().lower())
        # Remove characters not in [a-z0-9-]
        slug = re.sub(r'[^a-z0-9-]', '', slug)
        return slug

    return [normalize_and_slugify(text) for text in texts]","import unicodedata
import re
def slugify(texts):
    def normalize_and_slugify(text):
        normalized = unicodedata.normalize('NFKD', text)
        no_diacritics = normalized.encode('ascii', 'ignore').decode('utf-8')
        slug = re.sub('\\s+', '-', no_diacritics.strip().lower())
        slug = re.sub('[^a-z0-9-]', '', slug)
        return slug
    return [normalize_and_slugify(text) for text in texts]",4f52894c4adeeb0d,dfc592cc1f9cf533,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,slugify_v2
1756744397.921994,csvjson_v1,csvjson_v1_1756744397,gpt-4o-mini,0.0,"```python
def csv_to_json(csv_text):
    lines = csv_text.strip().split('\n')
    headers = lines[0].split(',')
    result = []
    
    for line in lines[1:]:
        values = line.split(',')
        entry = {headers[i]: values[i] for i in range(len(headers))}
        result.append(entry)
    
    return result
```","def csv_to_json(csv_text):
    lines = csv_text.strip().split('\n')
    headers = lines[0].split(',')
    result = []
    
    for line in lines[1:]:
        values = line.split(',')
        entry = {headers[i]: values[i] for i in range(len(headers))}
        result.append(entry)
    
    return result","def csv_to_json(csv_text):
    lines = csv_text.strip().split('\n')
    headers = lines[0].split(',')
    result = []
    for line in lines[1:]:
        values = line.split(',')
        entry = {headers[i]: values[i] for i in range(len(headers))}
        result.append(entry)
    return result",df9e7900c2e3f3e3,27efb277124c588f,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,csvjson_v1
1756744399.8523934,csvjson_v1,csvjson_v1_1756744399,gpt-4o-mini,0.0,"```python
def csv_to_json(csv_text):
    lines = csv_text.strip().split('\n')
    headers = lines[0].split(',')
    result = []
    
    for line in lines[1:]:
        values = line.split(',')
        entry = {headers[i]: values[i] for i in range(len(headers))}
        result.append(entry)
    
    return result
```","def csv_to_json(csv_text):
    lines = csv_text.strip().split('\n')
    headers = lines[0].split(',')
    result = []
    
    for line in lines[1:]:
        values = line.split(',')
        entry = {headers[i]: values[i] for i in range(len(headers))}
        result.append(entry)
    
    return result","def csv_to_json(csv_text):
    lines = csv_text.strip().split('\n')
    headers = lines[0].split(',')
    result = []
    for line in lines[1:]:
        values = line.split(',')
        entry = {headers[i]: values[i] for i in range(len(headers))}
        result.append(entry)
    return result",df9e7900c2e3f3e3,27efb277124c588f,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,csvjson_v1
1756744402.3890831,csvjson_v1,csvjson_v1_1756744402,gpt-4o-mini,0.0,"```python
def csv_to_json(csv_text):
    lines = csv_text.strip().split('\n')
    headers = lines[0].split(',')
    result = []
    
    for line in lines[1:]:
        values = line.split(',')
        entry = {headers[i]: values[i] for i in range(len(headers))}
        result.append(entry)
    
    return result
```","def csv_to_json(csv_text):
    lines = csv_text.strip().split('\n')
    headers = lines[0].split(',')
    result = []
    
    for line in lines[1:]:
        values = line.split(',')
        entry = {headers[i]: values[i] for i in range(len(headers))}
        result.append(entry)
    
    return result","def csv_to_json(csv_text):
    lines = csv_text.strip().split('\n')
    headers = lines[0].split(',')
    result = []
    for line in lines[1:]:
        values = line.split(',')
        entry = {headers[i]: values[i] for i in range(len(headers))}
        result.append(entry)
    return result",df9e7900c2e3f3e3,27efb277124c588f,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,csvjson_v1
1756744404.5453987,csvjson_v1,csvjson_v1_1756744404,gpt-4o-mini,0.0,"```python
def csv_to_json(csv_text):
    lines = csv_text.strip().split('\n')
    headers = lines[0].split(',')
    result = []
    
    for line in lines[1:]:
        values = line.split(',')
        entry = {headers[i]: values[i] for i in range(len(headers))}
        result.append(entry)
    
    return result
```","def csv_to_json(csv_text):
    lines = csv_text.strip().split('\n')
    headers = lines[0].split(',')
    result = []
    
    for line in lines[1:]:
        values = line.split(',')
        entry = {headers[i]: values[i] for i in range(len(headers))}
        result.append(entry)
    
    return result","def csv_to_json(csv_text):
    lines = csv_text.strip().split('\n')
    headers = lines[0].split(',')
    result = []
    for line in lines[1:]:
        values = line.split(',')
        entry = {headers[i]: values[i] for i in range(len(headers))}
        result.append(entry)
    return result",df9e7900c2e3f3e3,27efb277124c588f,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,csvjson_v1
1756744406.783852,csvjson_v1,csvjson_v1_1756744406,gpt-4o-mini,0.0,"```python
def csv_to_json(csv_text):
    lines = csv_text.strip().split('\n')
    headers = lines[0].split(',')
    result = []
    
    for line in lines[1:]:
        values = line.split(',')
        entry = {headers[i]: values[i] for i in range(len(headers))}
        result.append(entry)
    
    return result
```","def csv_to_json(csv_text):
    lines = csv_text.strip().split('\n')
    headers = lines[0].split(',')
    result = []
    
    for line in lines[1:]:
        values = line.split(',')
        entry = {headers[i]: values[i] for i in range(len(headers))}
        result.append(entry)
    
    return result","def csv_to_json(csv_text):
    lines = csv_text.strip().split('\n')
    headers = lines[0].split(',')
    result = []
    for line in lines[1:]:
        values = line.split(',')
        entry = {headers[i]: values[i] for i in range(len(headers))}
        result.append(entry)
    return result",df9e7900c2e3f3e3,27efb277124c588f,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,csvjson_v1
1756744449.046014,csvjson_v2,csvjson_v2_1756744449,gpt-4o-mini,0.0,"```python
def csv_to_json(csv_text) -> list[dict[str, str]]:
    lines = csv_text.strip().split('\n')
    header = lines[0].split(',')
    result = []
    
    for line in lines[1:]:
        values = line.split(',')
        row_dict = {header[i]: values[i] for i in range(len(header))}
        result.append(row_dict)
    
    return result
```","def csv_to_json(csv_text) -> list[dict[str, str]]:
    lines = csv_text.strip().split('\n')
    header = lines[0].split(',')
    result = []
    
    for line in lines[1:]:
        values = line.split(',')
        row_dict = {header[i]: values[i] for i in range(len(header))}
        result.append(row_dict)
    
    return result","def csv_to_json(csv_text) -> list[dict[str, str]]:
    lines = csv_text.strip().split('\n')
    header = lines[0].split(',')
    result = []
    for line in lines[1:]:
        values = line.split(',')
        row_dict = {header[i]: values[i] for i in range(len(header))}
        result.append(row_dict)
    return result",2cb250033f5517be,50e05b819f231be6,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,csvjson_v2
1756744451.435646,csvjson_v2,csvjson_v2_1756744451,gpt-4o-mini,0.0,"```python
def csv_to_json(csv_text) -> list[dict[str, str]]:
    lines = csv_text.strip().split('\n')
    header = lines[0].split(',')
    result = []
    
    for line in lines[1:]:
        values = line.split(',')
        row_dict = {header[i]: values[i] for i in range(len(header))}
        result.append(row_dict)
    
    return result
```","def csv_to_json(csv_text) -> list[dict[str, str]]:
    lines = csv_text.strip().split('\n')
    header = lines[0].split(',')
    result = []
    
    for line in lines[1:]:
        values = line.split(',')
        row_dict = {header[i]: values[i] for i in range(len(header))}
        result.append(row_dict)
    
    return result","def csv_to_json(csv_text) -> list[dict[str, str]]:
    lines = csv_text.strip().split('\n')
    header = lines[0].split(',')
    result = []
    for line in lines[1:]:
        values = line.split(',')
        row_dict = {header[i]: values[i] for i in range(len(header))}
        result.append(row_dict)
    return result",2cb250033f5517be,50e05b819f231be6,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,csvjson_v2
1756744453.8458285,csvjson_v2,csvjson_v2_1756744453,gpt-4o-mini,0.0,"```python
def csv_to_json(csv_text: str) -> list[dict[str, str]]:
    lines = csv_text.strip().split('\n')
    header = lines[0].split(',')
    result = []
    
    for line in lines[1:]:
        values = line.split(',')
        result.append(dict(zip(header, values)))
    
    return result
```","def csv_to_json(csv_text: str) -> list[dict[str, str]]:
    lines = csv_text.strip().split('\n')
    header = lines[0].split(',')
    result = []
    
    for line in lines[1:]:
        values = line.split(',')
        result.append(dict(zip(header, values)))
    
    return result","def csv_to_json(csv_text: str) -> list[dict[str, str]]:
    lines = csv_text.strip().split('\n')
    header = lines[0].split(',')
    result = []
    for line in lines[1:]:
        values = line.split(',')
        result.append(dict(zip(header, values)))
    return result",6fa0a6ec58ed3c52,50737639196c691a,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,csvjson_v2
1756744456.592477,csvjson_v2,csvjson_v2_1756744456,gpt-4o-mini,0.0,"```python
def csv_to_json(csv_text):
    lines = csv_text.strip().split('\n')
    header = lines[0].split(',')
    result = []
    
    for line in lines[1:]:
        values = line.split(',')
        result.append({header[i]: values[i] for i in range(len(header))})
    
    return result
```","def csv_to_json(csv_text):
    lines = csv_text.strip().split('\n')
    header = lines[0].split(',')
    result = []
    
    for line in lines[1:]:
        values = line.split(',')
        result.append({header[i]: values[i] for i in range(len(header))})
    
    return result","def csv_to_json(csv_text):
    lines = csv_text.strip().split('\n')
    header = lines[0].split(',')
    result = []
    for line in lines[1:]:
        values = line.split(',')
        result.append({header[i]: values[i] for i in range(len(header))})
    return result",6288e42469517c59,f9a4afbca9f24b2d,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,csvjson_v2
1756744461.086643,csvjson_v2,csvjson_v2_1756744461,gpt-4o-mini,0.0,"```python
def csv_to_json(csv_text) -> list[dict[str, str]]:
    lines = csv_text.strip().split('\n')
    header = lines[0].split(',')
    result = []
    
    for line in lines[1:]:
        values = line.split(',')
        row_dict = {header[i]: values[i] for i in range(len(header))}
        result.append(row_dict)
    
    return result
```","def csv_to_json(csv_text) -> list[dict[str, str]]:
    lines = csv_text.strip().split('\n')
    header = lines[0].split(',')
    result = []
    
    for line in lines[1:]:
        values = line.split(',')
        row_dict = {header[i]: values[i] for i in range(len(header))}
        result.append(row_dict)
    
    return result","def csv_to_json(csv_text) -> list[dict[str, str]]:
    lines = csv_text.strip().split('\n')
    header = lines[0].split(',')
    result = []
    for line in lines[1:]:
        values = line.split(',')
        row_dict = {header[i]: values[i] for i in range(len(header))}
        result.append(row_dict)
    return result",2cb250033f5517be,50e05b819f231be6,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,csvjson_v2
1756744496.3205469,brackets_v1,brackets_v1_1756744496,gpt-4o-mini,0.0,"```python
def is_balanced(s):
    stack = []
    brackets = {')': '(', ']': '[', '}': '{'}
    
    for char in s:
        if char in brackets.values():
            stack.append(char)
        elif char in brackets.keys():
            if not stack or stack.pop() != brackets[char]:
                return False
    
    return len(stack) == 0
```","def is_balanced(s):
    stack = []
    brackets = {')': '(', ']': '[', '}': '{'}
    
    for char in s:
        if char in brackets.values():
            stack.append(char)
        elif char in brackets.keys():
            if not stack or stack.pop() != brackets[char]:
                return False
    
    return len(stack) == 0","def is_balanced(s):
    stack = []
    brackets = {')': '(', ']': '[', '}': '{'}
    for char in s:
        if char in brackets.values():
            stack.append(char)
        elif char in brackets.keys():
            if not stack or stack.pop() != brackets[char]:
                return False
    return len(stack) == 0",7dac20d60badb6f9,575ed40b22d69af4,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,brackets_v1
1756744498.5238402,brackets_v1,brackets_v1_1756744498,gpt-4o-mini,0.0,"```python
def is_balanced(s):
    stack = []
    brackets = {')': '(', ']': '[', '}': '{'}
    
    for char in s:
        if char in brackets.values():
            stack.append(char)
        elif char in brackets.keys():
            if not stack or stack.pop() != brackets[char]:
                return False
    
    return len(stack) == 0
```","def is_balanced(s):
    stack = []
    brackets = {')': '(', ']': '[', '}': '{'}
    
    for char in s:
        if char in brackets.values():
            stack.append(char)
        elif char in brackets.keys():
            if not stack or stack.pop() != brackets[char]:
                return False
    
    return len(stack) == 0","def is_balanced(s):
    stack = []
    brackets = {')': '(', ']': '[', '}': '{'}
    for char in s:
        if char in brackets.values():
            stack.append(char)
        elif char in brackets.keys():
            if not stack or stack.pop() != brackets[char]:
                return False
    return len(stack) == 0",7dac20d60badb6f9,575ed40b22d69af4,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,brackets_v1
1756744501.2307239,brackets_v1,brackets_v1_1756744501,gpt-4o-mini,0.0,"```python
def is_balanced(s):
    stack = []
    brackets = {')': '(', ']': '[', '}': '{'}
    
    for char in s:
        if char in brackets.values():
            stack.append(char)
        elif char in brackets.keys():
            if not stack or stack.pop() != brackets[char]:
                return False
    
    return not stack
```","def is_balanced(s):
    stack = []
    brackets = {')': '(', ']': '[', '}': '{'}
    
    for char in s:
        if char in brackets.values():
            stack.append(char)
        elif char in brackets.keys():
            if not stack or stack.pop() != brackets[char]:
                return False
    
    return not stack","def is_balanced(s):
    stack = []
    brackets = {')': '(', ']': '[', '}': '{'}
    for char in s:
        if char in brackets.values():
            stack.append(char)
        elif char in brackets.keys():
            if not stack or stack.pop() != brackets[char]:
                return False
    return not stack",96dae3f02a200e18,08d608547462d16a,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,brackets_v1
1756744503.5533538,brackets_v1,brackets_v1_1756744503,gpt-4o-mini,0.0,"```python
def is_balanced(s):
    stack = []
    brackets = {')': '(', ']': '[', '}': '{'}
    
    for char in s:
        if char in brackets.values():
            stack.append(char)
        elif char in brackets.keys():
            if not stack or stack.pop() != brackets[char]:
                return False
    
    return len(stack) == 0
```","def is_balanced(s):
    stack = []
    brackets = {')': '(', ']': '[', '}': '{'}
    
    for char in s:
        if char in brackets.values():
            stack.append(char)
        elif char in brackets.keys():
            if not stack or stack.pop() != brackets[char]:
                return False
    
    return len(stack) == 0","def is_balanced(s):
    stack = []
    brackets = {')': '(', ']': '[', '}': '{'}
    for char in s:
        if char in brackets.values():
            stack.append(char)
        elif char in brackets.keys():
            if not stack or stack.pop() != brackets[char]:
                return False
    return len(stack) == 0",7dac20d60badb6f9,575ed40b22d69af4,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,brackets_v1
1756744505.8766038,brackets_v1,brackets_v1_1756744505,gpt-4o-mini,0.0,"```python
def is_balanced(s):
    stack = []
    brackets = {')': '(', ']': '[', '}': '{'}
    
    for char in s:
        if char in brackets.values():
            stack.append(char)
        elif char in brackets.keys():
            if not stack or stack.pop() != brackets[char]:
                return False
    
    return len(stack) == 0
```","def is_balanced(s):
    stack = []
    brackets = {')': '(', ']': '[', '}': '{'}
    
    for char in s:
        if char in brackets.values():
            stack.append(char)
        elif char in brackets.keys():
            if not stack or stack.pop() != brackets[char]:
                return False
    
    return len(stack) == 0","def is_balanced(s):
    stack = []
    brackets = {')': '(', ']': '[', '}': '{'}
    for char in s:
        if char in brackets.values():
            stack.append(char)
        elif char in brackets.keys():
            if not stack or stack.pop() != brackets[char]:
                return False
    return len(stack) == 0",7dac20d60badb6f9,575ed40b22d69af4,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,brackets_v1
1756744543.9408429,brackets_v2,brackets_v2_1756744543,gpt-4o-mini,0.0,"```python
def is_balanced(s):
    stack = []
    brackets = {')': '(', ']': '[', '}': '{'}
    
    for char in s:
        if char in brackets.values():
            stack.append(char)
        elif char in brackets.keys():
            if not stack or stack.pop() != brackets[char]:
                return False
    
    return len(stack) == 0
```","def is_balanced(s):
    stack = []
    brackets = {')': '(', ']': '[', '}': '{'}
    
    for char in s:
        if char in brackets.values():
            stack.append(char)
        elif char in brackets.keys():
            if not stack or stack.pop() != brackets[char]:
                return False
    
    return len(stack) == 0","def is_balanced(s):
    stack = []
    brackets = {')': '(', ']': '[', '}': '{'}
    for char in s:
        if char in brackets.values():
            stack.append(char)
        elif char in brackets.keys():
            if not stack or stack.pop() != brackets[char]:
                return False
    return len(stack) == 0",7dac20d60badb6f9,575ed40b22d69af4,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,brackets_v2
1756744547.7084196,brackets_v2,brackets_v2_1756744547,gpt-4o-mini,0.0,"```python
def is_balanced(s):
    stack = []
    parentheses = {')': '(', ']': '[', '}': '{'}
    
    for char in s:
        if char in parentheses.values():
            stack.append(char)
        elif char in parentheses.keys():
            if not stack or stack.pop() != parentheses[char]:
                return False
    
    return len(stack) == 0
```","def is_balanced(s):
    stack = []
    parentheses = {')': '(', ']': '[', '}': '{'}
    
    for char in s:
        if char in parentheses.values():
            stack.append(char)
        elif char in parentheses.keys():
            if not stack or stack.pop() != parentheses[char]:
                return False
    
    return len(stack) == 0","def is_balanced(s):
    stack = []
    parentheses = {')': '(', ']': '[', '}': '{'}
    for char in s:
        if char in parentheses.values():
            stack.append(char)
        elif char in parentheses.keys():
            if not stack or stack.pop() != parentheses[char]:
                return False
    return len(stack) == 0",70c5e1b8cd6e0c3e,52301c9611327349,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,brackets_v2
1756744550.3304718,brackets_v2,brackets_v2_1756744550,gpt-4o-mini,0.0,"```python
def is_balanced(s):
    stack = []
    parentheses = {')': '(', ']': '[', '}': '{'}
    
    for char in s:
        if char in parentheses.values():
            stack.append(char)
        elif char in parentheses.keys():
            if not stack or stack.pop() != parentheses[char]:
                return False
    
    return len(stack) == 0
```","def is_balanced(s):
    stack = []
    parentheses = {')': '(', ']': '[', '}': '{'}
    
    for char in s:
        if char in parentheses.values():
            stack.append(char)
        elif char in parentheses.keys():
            if not stack or stack.pop() != parentheses[char]:
                return False
    
    return len(stack) == 0","def is_balanced(s):
    stack = []
    parentheses = {')': '(', ']': '[', '}': '{'}
    for char in s:
        if char in parentheses.values():
            stack.append(char)
        elif char in parentheses.keys():
            if not stack or stack.pop() != parentheses[char]:
                return False
    return len(stack) == 0",70c5e1b8cd6e0c3e,52301c9611327349,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,brackets_v2
1756744554.888754,brackets_v2,brackets_v2_1756744554,gpt-4o-mini,0.0,"```python
def is_balanced(s):
    stack = []
    parentheses = {')': '(', ']': '[', '}': '{'}
    
    for char in s:
        if char in parentheses.values():
            stack.append(char)
        elif char in parentheses.keys():
            if not stack or stack.pop() != parentheses[char]:
                return False
    
    return len(stack) == 0
```","def is_balanced(s):
    stack = []
    parentheses = {')': '(', ']': '[', '}': '{'}
    
    for char in s:
        if char in parentheses.values():
            stack.append(char)
        elif char in parentheses.keys():
            if not stack or stack.pop() != parentheses[char]:
                return False
    
    return len(stack) == 0","def is_balanced(s):
    stack = []
    parentheses = {')': '(', ']': '[', '}': '{'}
    for char in s:
        if char in parentheses.values():
            stack.append(char)
        elif char in parentheses.keys():
            if not stack or stack.pop() != parentheses[char]:
                return False
    return len(stack) == 0",70c5e1b8cd6e0c3e,52301c9611327349,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,brackets_v2
1756744557.5201738,brackets_v2,brackets_v2_1756744557,gpt-4o-mini,0.0,"```python
def is_balanced(s):
    stack = []
    mapping = {')': '(', '}': '{', ']': '['}
    
    for char in s:
        if char in mapping.values():
            stack.append(char)
        elif char in mapping.keys():
            if stack == [] or mapping[char] != stack.pop():
                return False
    
    return stack == []
```","def is_balanced(s):
    stack = []
    mapping = {')': '(', '}': '{', ']': '['}
    
    for char in s:
        if char in mapping.values():
            stack.append(char)
        elif char in mapping.keys():
            if stack == [] or mapping[char] != stack.pop():
                return False
    
    return stack == []","def is_balanced(s):
    stack = []
    mapping = {')': '(', '}': '{', ']': '['}
    for char in s:
        if char in mapping.values():
            stack.append(char)
        elif char in mapping.keys():
            if stack == [] or mapping[char] != stack.pop():
                return False
    return stack == []",de6e33f045255a41,9dad437465e5e8f6,True,True,True,True,stripped_fences; stripped_docstrings; normalized_identifiers; stripped_comments; normalized_whitespace,1,,completed,2025-08-26,brackets_v2
